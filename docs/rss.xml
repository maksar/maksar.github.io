<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"
    xmlns:dc="http://purl.org/dc/elements/1.1/">
    <channel>
        <title>Shestakov Alex - All articles</title>
        <link>https://maksar.github.io</link>
        <description><![CDATA[Personal blog of Shestakov Alex]]></description>
        <atom:link href="https://maksar.github.io/rss.xml" rel="self"
                   type="application/rss+xml" />
        <lastBuildDate>Tue, 27 Jul 2021 00:00:00 UT</lastBuildDate>
        <item>
    <title>Parsing environment variables with in kotlin with konfig</title>
    <link>https://maksar.github.io/posts/code/2021-07-27-konfig.html</link>
    <description><![CDATA[<!doctype html>
<html lang="en">

<head>
  <meta charset="utf-8">
  <meta http-equiv="x-ua-compatible" content="ie=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Shestakov Alex Blog - Parsing environment variables with in kotlin with konfig</title>
  <link rel="stylesheet" href="../../css/default.css" />

  <script type="text/javascript" src="../../vendor/jquery/jquery-3.6.0.min.js"></script>
  <script type="text/javascript" src="../../vendor/fresco/js/fresco.min.js"></script>
  <link rel="stylesheet" type="text/css" href="../../vendor/fresco/css/fresco.css" />

  <link rel="stylesheet" href="../../vendor/highlight/styles/atom-one-dark.min.css">
  <script src="../../vendor/highlight/highlight.min.js"></script>
  <script src="../../vendor/highlight/languages/haskell.min.js"></script>
  <script src="../../vendor/highlight/languages/ruby.min.js"></script>
  <script src="../../vendor/highlight/languages/shell.min.js"></script>
  <script src="../../vendor/highlight/languages/kotlin.min.js"></script>
  <script src="../../vendor/highlight/languages/javascript.min.js"></script>
  <script>hljs.highlightAll();</script>
</head>

<body>
  <header>
    <div class="logo">
      <a href="../../">Shestakov Alex</a>
    </div>
    <nav>
      &amp;<a href="../../languages/english.html">english</a> &amp;<a href="../../languages/russian.html">russian</a>
      @<a href="../../categories/code.html">code</a> @<a href="../../categories/projects.html">projects</a>
      <a href="../../about.html">About</a>
    </nav>
  </header>

  <main role="main">
    <h1>Parsing environment variables with in kotlin with konfig</h1>
    <article>
  <section class="header">
    July 27, 2021 &amp;<a href="../../languages/english.html">english</a> @<a href="../../categories/code.html">code</a> #<a href="../../tags/kotlin.html">kotlin</a> #<a href="../../tags/konfig.html">konfig</a>
  </section>
  <section>
    <p>There is a wonderful kotlin library for reading configuration from various sources (environment variables, files, etc.) – <a href="https://github.com/npryce/konfig">konfig</a>. It allows to define your application configuration in a declarative way and even perform some data transformations along the way.</p>
<!--more-->
<p><img src="../../previews/konfig/logo.png" class="center" /></p>
<p>Konfig was used in <a href="../../posts/projects/2021-03-09-milestones.html">milestones</a> project to read some values from a predefined <code>.env</code> file and, if absent, from environment variables.</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode kotlin"><code class="sourceCode kotlin"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="kw">val</span> <span class="va">MILESTONES_JIRA_URL</span> <span class="kw">by</span> stringType</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="kw">val</span> <span class="va">MILESTONES_JIRA_USERNAME</span> <span class="kw">by</span> stringType</span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a><span class="kw">val</span> <span class="va">MILESTONES_JIRA_PASSWORD</span> <span class="kw">by</span> stringType</span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a><span class="kw">val</span> <span class="va">MILESTONES_JIRA_PROJECT</span> <span class="kw">by</span> stringType</span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a><span class="kw">val</span> <span class="va">MILESTONES_PAGE_SIZE</span> <span class="kw">by</span> intType</span></code></pre></div>
<p>Fallback order can be explicitly specified by <code>overriding</code> combinator.</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode kotlin"><code class="sourceCode kotlin"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="kw">val</span> <span class="va">env</span> <span class="op">=</span> EnvironmentVariables<span class="op">()</span> overriding ConfigurationProperties<span class="op">.</span>fromOptionalFile<span class="op">(</span>File<span class="op">(</span><span class="st">&quot;.env&quot;</span><span class="op">))</span></span></code></pre></div>
<p>Usage is pretty straightforward too.</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode kotlin"><code class="sourceCode kotlin"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="kw">internal</span> <span class="kw">val</span> <span class="va">jiraClient</span> <span class="op">=</span> AsynchronousJiraRestClientFactory<span class="op">().</span>createWithBasicHttpAuthentication<span class="op">(</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>  URI<span class="op">(</span>env<span class="op">[</span>MILESTONES_JIRA_URL<span class="op">]),</span> env<span class="op">[</span>MILESTONES_JIRA_USERNAME<span class="op">],</span> env<span class="op">[</span>MILESTONES_JIRA_PASSWORD<span class="op">]</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a><span class="op">)</span></span></code></pre></div>
<p>But today, there was a slight requirements change and I decided to factor out explicitly hardcoded mapping (finally) to become actual configuration. So I did transition from this:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode kotlin"><code class="sourceCode kotlin"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="kw">fun</span> <span class="fu">team</span><span class="op">(</span><span class="va">c</span><span class="op">:</span> <span class="dt">String</span><span class="op">)</span> <span class="op">=</span> <span class="st">&quot;Team </span><span class="ss">$c</span><span class="st">&quot;</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a><span class="kw">val</span> <span class="va">teamHeads</span> <span class="op">=</span> mapOf<span class="op">(</span></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>  team<span class="op">(</span><span class="st">&quot;Salesforce&quot;</span><span class="op">)</span> to <span class="st">&quot;a.person&quot;</span><span class="op">,</span></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a>  team<span class="op">(</span><span class="st">&quot;Internal Automation&quot;</span><span class="op">)</span> to <span class="st">&quot;a.human&quot;</span></span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a>  <span class="op">...</span></span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a><span class="op">)</span></span></code></pre></div>
<p>To the nested definition of “how to parse a value”. Configuration values itself are just comma separated string <code>MILESTONES_DEPARTMENTS_MAPPING="Salesforce:a.person,Internal Automation:a.human"</code>. So, inner layer gets converted into <code>Pair</code>s after splitting by <code>":"</code>. Outer layer (after splitting by comma) converts inner list of <code>Pair</code>s to a <code>Map</code>.</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode kotlin"><code class="sourceCode kotlin"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="kw">val</span> <span class="va">MILESTONES_DEPARTMENTS_MAPPING</span> <span class="kw">by</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a>  listType<span class="op">(</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a>    listType<span class="op">(</span></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a>      stringType<span class="op">,</span></span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a>      <span class="st">&quot;:&quot;</span><span class="op">.</span>toRegex<span class="op">()</span></span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a>    <span class="op">).</span>wrappedAs <span class="op">{</span> Pair<span class="op">(</span><span class="st">&quot;Team </span><span class="ss">${</span>it<span class="op">.</span>first<span class="op">()</span><span class="ss">}</span><span class="st">&quot;</span><span class="op">,</span> it<span class="op">.</span>last<span class="op">())</span> <span class="op">},</span></span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a>    <span class="st">&quot;,&quot;</span><span class="op">.</span>toRegex<span class="op">()</span></span>
<span id="cb5-8"><a href="#cb5-8" aria-hidden="true" tabindex="-1"></a>  <span class="op">).</span>wrappedAs <span class="op">{</span> it<span class="op">.</span>toMap<span class="op">()</span> <span class="op">}</span></span></code></pre></div>
<p>At the time of usage, <code>env[MILESTONES_DEPARTMENTS_MAPPING]</code> value is already a <code>Map&lt;String, String&gt;</code>. So there is no need to worry about conversions, mapping or any other transformation of the input configuration string, neat! I very much like such declarative approach, it reminds me <a href="https://hackage.haskell.org/package/optparse-applicative">optparse-applicative</a> library from <a href="../../tags/haskell.html">Haskell</a> ecosystem.</p>
  </section>
</article>

  </main>

  <footer>
    Site generated by
    <a href="http://jaspervdj.be/hakyll">Hakyll</a>
  </footer>
</body>

</html>]]></description>
    <pubDate>Tue, 27 Jul 2021 00:00:00 UT</pubDate>
    <guid>https://maksar.github.io/posts/code/2021-07-27-konfig.html</guid>
    <dc:creator>Shestakov Alex</dc:creator>
</item>
<item>
    <title>People membership validation in JIRA fields against Active Directory</title>
    <link>https://maksar.github.io/posts/projects/2021-06-11-coorish.html</link>
    <description><![CDATA[<!doctype html>
<html lang="en">

<head>
  <meta charset="utf-8">
  <meta http-equiv="x-ua-compatible" content="ie=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Shestakov Alex Blog - People membership validation in JIRA fields against Active Directory</title>
  <link rel="stylesheet" href="../../css/default.css" />

  <script type="text/javascript" src="../../vendor/jquery/jquery-3.6.0.min.js"></script>
  <script type="text/javascript" src="../../vendor/fresco/js/fresco.min.js"></script>
  <link rel="stylesheet" type="text/css" href="../../vendor/fresco/css/fresco.css" />

  <link rel="stylesheet" href="../../vendor/highlight/styles/atom-one-dark.min.css">
  <script src="../../vendor/highlight/highlight.min.js"></script>
  <script src="../../vendor/highlight/languages/haskell.min.js"></script>
  <script src="../../vendor/highlight/languages/ruby.min.js"></script>
  <script src="../../vendor/highlight/languages/shell.min.js"></script>
  <script src="../../vendor/highlight/languages/kotlin.min.js"></script>
  <script src="../../vendor/highlight/languages/javascript.min.js"></script>
  <script>hljs.highlightAll();</script>
</head>

<body>
  <header>
    <div class="logo">
      <a href="../../">Shestakov Alex</a>
    </div>
    <nav>
      &amp;<a href="../../languages/english.html">english</a> &amp;<a href="../../languages/russian.html">russian</a>
      @<a href="../../categories/code.html">code</a> @<a href="../../categories/projects.html">projects</a>
      <a href="../../about.html">About</a>
    </nav>
  </header>

  <main role="main">
    <h1>People membership validation in JIRA fields against Active Directory</h1>
    <article>
  <section class="header">
    June 11, 2021 &amp;<a href="../../languages/english.html">english</a> @<a href="../../categories/projects.html">projects</a> #<a href="../../tags/haskell.html">haskell</a> #<a href="../../tags/aeson.html">aeson</a> #<a href="../../tags/servant.html">servant</a>
  </section>
  <section>
    <p>Current version of JIRA inside Itransition does not allow to validate “whether a person belongs to a certain group” for multi-people fields, only for single-user fields. <a href="https://github.com/maksar/Coorish">Coorish</a> – is a small utility to determine ineligible people being specified in jira tickets.</p>
<!--more-->
<p><a href="../../images/coorish/1.png" class="center fresco" data-fresco-group="thumbnail" data-fresco-options="ui: 'inside', thumbnails: false"><img src="../../previews/coorish/1.png" /></a></p>
<h2 id="history">History</h2>
<p>Project card – is a custom JIRA ticket, containing a bunch of fields about the project (I do work in an outsource company, so…) – technologies used, people involved, plans and troubles, etc. Since migration plans are far away, I decided to write a small utility to ensure that there are no “misuses” – only people from <code>Project.Management.All</code> AD group are specified in “Project Manager” fields in project cards.</p>
<h2 id="internals">Internals</h2>
<p>So it is a small terminal application, which “talks” to JIRA asking about project cards, “talks” to AD via LDAP to get members of the groups and spills the results to the terminal.</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="ot">main ::</span> <span class="dt">IO</span> ()</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>  <span class="dt">Config</span> {<span class="op">..</span>} <span class="ot">&lt;-</span> readConfig <span class="op">@</span><span class="dt">Config</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>  ldapConfig <span class="ot">&lt;-</span> readConfig <span class="op">@</span><span class="dt">Ldap.LdapConfig</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>  jiraConfig <span class="ot">&lt;-</span> readConfig <span class="op">@</span><span class="dt">Jira.JiraConfig</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a>  activeDirectoryPeople <span class="ot">&lt;-</span> Ldap.groupMembers ldapGroups ldapConfig</span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a>  projectCards <span class="ot">&lt;-</span> Jira.projectCards jiraField jiraConfig</span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a>  forM_ projectCards <span class="op">$</span> \card <span class="ot">-&gt;</span> <span class="kw">do</span></span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a>    <span class="kw">let</span> people <span class="ot">=</span> Jira.people card</span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a>    when (<span class="fu">null</span> people) <span class="op">$</span> <span class="fu">pure</span> ()</span>
<span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-14"><a href="#cb1-14" aria-hidden="true" tabindex="-1"></a>    <span class="kw">let</span> (validPeople, invalidPeople) <span class="ot">=</span> partition (\person <span class="ot">-&gt;</span> Jira.displayName person <span class="ot">`elem`</span> activeDirectoryPeople) people</span>
<span id="cb1-15"><a href="#cb1-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-16"><a href="#cb1-16" aria-hidden="true" tabindex="-1"></a>    unless (<span class="fu">null</span> invalidPeople) <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb1-17"><a href="#cb1-17" aria-hidden="true" tabindex="-1"></a>      putTextLn <span class="op">$</span></span>
<span id="cb1-18"><a href="#cb1-18" aria-hidden="true" tabindex="-1"></a>        <span class="st">&quot;Card '&quot;</span> <span class="op">&lt;&gt;</span> Jira.projectName card <span class="op">&lt;&gt;</span> <span class="st">&quot;' (&quot;</span> <span class="op">&lt;&gt;</span> Jira.key card <span class="op">&lt;&gt;</span> <span class="st">&quot;) &quot;</span></span>
<span id="cb1-19"><a href="#cb1-19" aria-hidden="true" tabindex="-1"></a>          <span class="op">&lt;&gt;</span> <span class="st">&quot;has some people in '&quot;</span></span>
<span id="cb1-20"><a href="#cb1-20" aria-hidden="true" tabindex="-1"></a>          <span class="op">&lt;&gt;</span> jiraField</span>
<span id="cb1-21"><a href="#cb1-21" aria-hidden="true" tabindex="-1"></a>          <span class="op">&lt;&gt;</span> <span class="st">&quot;' field not from '&quot;</span></span>
<span id="cb1-22"><a href="#cb1-22" aria-hidden="true" tabindex="-1"></a>          <span class="op">&lt;&gt;</span> <span class="fu">mconcat</span> (intersperse <span class="st">&quot;; &quot;</span> ldapGroups)</span>
<span id="cb1-23"><a href="#cb1-23" aria-hidden="true" tabindex="-1"></a>          <span class="op">&lt;&gt;</span> <span class="st">&quot;' AD group: '&quot;</span></span>
<span id="cb1-24"><a href="#cb1-24" aria-hidden="true" tabindex="-1"></a>          <span class="op">&lt;&gt;</span> <span class="fu">mconcat</span> (intersperse <span class="st">&quot;; &quot;</span> (<span class="fu">map</span> Jira.displayName invalidPeople))</span>
<span id="cb1-25"><a href="#cb1-25" aria-hidden="true" tabindex="-1"></a>          <span class="op">&lt;&gt;</span> <span class="st">&quot;'&quot;</span></span></code></pre></div>
<p>I used the <a href="../../posts/projects/2020-02-07-ldap-bot.html">same</a> ldap-client library for LDAP communication, but this time utilized text-ldap for parsing DNs from ldap into proper data structures instead of treating results like strings. Envy library with some sprinkles of template-haskell magic allowed me to read configuration properties from environment variables. Servant-client again proved to be very handy to “talk” to the external HTTP API. Template haskell was <a href="https://github.com/maksar/coorish/commit/d961d01763ad66c113abf9551315b5f1b5a4f2dd#diff-31b2976c7d81ff33a9d0115c0b39c980023862d7bad0cef4e20fda15fa2bb863R91-R97">used</a> for one more thing – embedding configuration values into <code>FromJSON</code> instances – I didn’t know how to parametrize them in an elegant way.</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">Config</span> <span class="ot">=</span> <span class="dt">Config</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>   {<span class="ot"> jiraField ::</span> <span class="dt">Text</span>,</span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a><span class="ot">     ldapGroups ::</span> [<span class="dt">Text</span>]</span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>   }</span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>   <span class="kw">deriving</span> (<span class="dt">Generic</span>, <span class="dt">Show</span>)</span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a><span class="ot">configValue ::</span> <span class="dt">Lift</span> t <span class="ot">=&gt;</span> (<span class="dt">Config</span> <span class="ot">-&gt;</span> t) <span class="ot">-&gt;</span> <span class="dt">Q</span> <span class="dt">Exp</span></span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a> configValue f <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a>   groups <span class="ot">&lt;-</span> runIO (f <span class="op">&lt;$&gt;</span> readConfig <span class="op">@</span><span class="dt">Config</span>)</span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a>   [e|groups|]</span>
<span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-12"><a href="#cb2-12" aria-hidden="true" tabindex="-1"></a><span class="kw">instance</span> <span class="dt">FromJSON</span> <span class="dt">ProjectCard</span> <span class="kw">where</span></span>
<span id="cb2-13"><a href="#cb2-13" aria-hidden="true" tabindex="-1"></a>   parseJSON <span class="ot">=</span> withObject <span class="st">&quot;card&quot;</span> <span class="op">$</span> \card <span class="ot">-&gt;</span> <span class="kw">do</span></span>
<span id="cb2-14"><a href="#cb2-14" aria-hidden="true" tabindex="-1"></a>     key <span class="ot">&lt;-</span> card <span class="op">.:</span> <span class="st">&quot;key&quot;</span></span>
<span id="cb2-15"><a href="#cb2-15" aria-hidden="true" tabindex="-1"></a>     fields <span class="ot">&lt;-</span> card <span class="op">.:</span> <span class="st">&quot;fields&quot;</span></span>
<span id="cb2-16"><a href="#cb2-16" aria-hidden="true" tabindex="-1"></a>     projectName <span class="ot">&lt;-</span> fields <span class="op">.:</span> <span class="st">&quot;summary&quot;</span></span>
<span id="cb2-17"><a href="#cb2-17" aria-hidden="true" tabindex="-1"></a>     peopleMaybe <span class="ot">&lt;-</span> fields <span class="op">.:?</span> <span class="op">$</span>(configValue jiraField) <span class="op">&lt;|&gt;</span> <span class="fu">fmap</span> (<span class="fu">replicate</span> <span class="dv">1</span>) <span class="op">&lt;$&gt;</span> fields <span class="op">.:?</span> <span class="op">$</span>(configValue jiraField)</span>
<span id="cb2-18"><a href="#cb2-18" aria-hidden="true" tabindex="-1"></a>     <span class="fu">pure</span> <span class="op">$</span> <span class="dt">ProjectCard</span> key projectName <span class="op">$</span> fromMaybe [] peopleMaybe</span></code></pre></div>
<p>Well, now I <a href="https://github.com/maksar/coorish/blob/35fbc99a57c57fae5a8232f9105ed81e6f61e06d/app/Jira.hs#L88-L94">know</a>, the trick is to make <code>FromJSON</code> instance for a function).</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="kw">instance</span> <span class="dt">FromJSON</span> (<span class="dt">Text</span> <span class="ot">-&gt;</span> <span class="dt">ProjectCard</span>) <span class="kw">where</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>  parseJSON <span class="ot">=</span> withObject <span class="st">&quot;card&quot;</span> <span class="op">$</span> \card <span class="ot">-&gt;</span> <span class="kw">do</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>    key <span class="ot">&lt;-</span> card <span class="op">.:</span> <span class="st">&quot;key&quot;</span></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>    fields <span class="ot">&lt;-</span> card <span class="op">.:</span> <span class="st">&quot;fields&quot;</span></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>    projectName <span class="ot">&lt;-</span> fields <span class="op">.:</span> <span class="st">&quot;summary&quot;</span></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a>    allPossiblePeople <span class="ot">&lt;-</span> M.fromList <span class="op">&lt;$&gt;</span> <span class="fu">mapM</span> parser (HM.toList fields)</span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a>    <span class="fu">pure</span> <span class="op">$</span> \feild <span class="ot">-&gt;</span> <span class="dt">ProjectCard</span> key projectName <span class="op">$</span> fromMaybe [] <span class="op">$</span> join <span class="op">$</span> <span class="fu">lookup</span> feild allPossiblePeople</span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a><span class="ot">parser ::</span> <span class="dt">FromJSON</span> a <span class="ot">=&gt;</span> (<span class="dt">Text</span>, <span class="dt">Value</span>) <span class="ot">-&gt;</span> <span class="dt">Parser</span> (<span class="dt">Text</span>, <span class="dt">Maybe</span> [a])</span>
<span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a>parser (x, field) <span class="ot">=</span> (x,) <span class="op">&lt;$&gt;</span> (parseJSON field <span class="op">&lt;|&gt;</span> <span class="fu">fmap</span> (<span class="fu">replicate</span> <span class="dv">1</span>) <span class="op">&lt;$&gt;</span> parseJSON field) <span class="op">&lt;|&gt;</span> <span class="fu">pure</span> (x, <span class="dt">Nothing</span>)</span></code></pre></div>
<p>That (and NIX <a href="https://github.com/maksar/coorish/blob/10c6a3be99ace3fc363613c85caadd256704531a/flake.nix#L23-L46">flakes</a> of course) allowed me to create several binaries for each JIRA field to test against (instead of configuring it with terminal flags or environment variables). Being tired of typing <code>T.pack</code> and <code>T.unpack</code>, I decided to give a <a href="https://github.com/kowainik/relude">relude</a> a try – a custom prelude, which is quite nice to use (but I haven’t yet tried <a href="https://hackage.haskell.org/package/rio">rio</a> or <a href="https://github.com/serokell/universum">universum</a>).</p>
<p>I am also experimenting with generating a haskell data structure (with template-haskell) with fields, which would correspond to a JIRA project card on compile time.</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="ot">createConstant ::</span> <span class="dt">Q</span> [<span class="dt">Dec</span>]</span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>createConstant <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a>  cardTypeName <span class="ot">&lt;-</span> newName <span class="st">&quot;ProjectCard&quot;</span></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>  cardConsName <span class="ot">&lt;-</span> newName <span class="st">&quot;ProjectCard&quot;</span></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a>  declare cardTypeName cardConsName <span class="op">=&lt;&lt;</span> <span class="fu">mapM</span> process <span class="op">=&lt;&lt;</span> runIO fields</span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a>  <span class="kw">where</span></span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a><span class="ot">    process ::</span> <span class="dt">JiraField</span> <span class="ot">-&gt;</span> <span class="dt">Q</span> <span class="dt">VarBangType</span></span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a>    process jf <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a>      jName <span class="ot">&lt;-</span> newName <span class="op">$</span> T.unpack <span class="op">$</span> T.replace <span class="st">&quot; &quot;</span> <span class="st">&quot;&quot;</span> <span class="op">$</span> T.toLower <span class="op">$</span> jiraFieldName jf</span>
<span id="cb4-10"><a href="#cb4-10" aria-hidden="true" tabindex="-1"></a>      jType <span class="ot">&lt;-</span> fromJust <span class="op">&lt;$&gt;</span> lookupTypeName (T.unpack <span class="op">$</span> T.replace <span class="st">&quot;Value&quot;</span> <span class="st">&quot;&quot;</span> <span class="op">$</span> T.replace <span class="st">&quot;Multiple &quot;</span> <span class="st">&quot;&quot;</span> <span class="op">$</span> T.replace <span class="st">&quot;Single &quot;</span> <span class="st">&quot;&quot;</span> <span class="op">$</span> T.pack <span class="op">$</span> <span class="fu">show</span> <span class="op">$</span> jiraFieldType jf)</span>
<span id="cb4-11"><a href="#cb4-11" aria-hidden="true" tabindex="-1"></a>      <span class="fu">pure</span> (jName, <span class="dt">Bang</span> <span class="dt">NoSourceUnpackedness</span> <span class="dt">NoSourceStrictness</span>, <span class="dt">AppT</span> <span class="dt">ListT</span> (<span class="dt">ConT</span> jType))</span>
<span id="cb4-12"><a href="#cb4-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-13"><a href="#cb4-13" aria-hidden="true" tabindex="-1"></a><span class="ot">    declare ::</span> <span class="dt">Name</span> <span class="ot">-&gt;</span> <span class="dt">Name</span> <span class="ot">-&gt;</span> [<span class="dt">VarBangType</span>] <span class="ot">-&gt;</span> <span class="dt">Q</span> [<span class="dt">Dec</span>]</span>
<span id="cb4-14"><a href="#cb4-14" aria-hidden="true" tabindex="-1"></a>    declare cardTypeName cardConsName z <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb4-15"><a href="#cb4-15" aria-hidden="true" tabindex="-1"></a>      <span class="fu">pure</span> [<span class="dt">DataD</span> [] cardTypeName [] <span class="dt">Nothing</span> [<span class="dt">RecC</span> cardConsName z] [<span class="dt">DerivClause</span> <span class="dt">Nothing</span> [<span class="dt">ConT</span> '<span class="dt">'Show</span>, <span class="dt">ConT</span> '<span class="dt">'Generic</span>, <span class="dt">ConT</span> '<span class="dt">'FromJSON</span>]]]</span>
<span id="cb4-16"><a href="#cb4-16" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-17"><a href="#cb4-17" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">FieldTypePlurality</span> <span class="ot">=</span> <span class="dt">IssueKey</span></span>
<span id="cb4-18"><a href="#cb4-18" aria-hidden="true" tabindex="-1"></a>                        <span class="op">|</span> <span class="dt">Single</span> <span class="dt">FieldTypeKind</span></span>
<span id="cb4-19"><a href="#cb4-19" aria-hidden="true" tabindex="-1"></a>                        <span class="op">|</span> <span class="dt">Multiple</span> <span class="dt">FieldTypeKind</span></span>
<span id="cb4-20"><a href="#cb4-20" aria-hidden="true" tabindex="-1"></a>                        <span class="op">|</span> <span class="dt">UnknownField</span> <span class="kw">deriving</span></span>
<span id="cb4-21"><a href="#cb4-21" aria-hidden="true" tabindex="-1"></a>                        (<span class="dt">Generic</span>, <span class="dt">FromJSON</span>, <span class="dt">Show</span>, <span class="dt">Eq</span>)</span>
<span id="cb4-22"><a href="#cb4-22" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-23"><a href="#cb4-23" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">FieldTypeKind</span> <span class="ot">=</span> <span class="dt">UserValue</span></span>
<span id="cb4-24"><a href="#cb4-24" aria-hidden="true" tabindex="-1"></a>                   <span class="op">|</span> <span class="dt">GroupValue</span></span>
<span id="cb4-25"><a href="#cb4-25" aria-hidden="true" tabindex="-1"></a>                   <span class="op">|</span> <span class="dt">StringValue</span></span>
<span id="cb4-26"><a href="#cb4-26" aria-hidden="true" tabindex="-1"></a>                   <span class="op">|</span> <span class="dt">DateValue</span></span>
<span id="cb4-27"><a href="#cb4-27" aria-hidden="true" tabindex="-1"></a>                   <span class="op">|</span> <span class="dt">DateTimeValue</span></span>
<span id="cb4-28"><a href="#cb4-28" aria-hidden="true" tabindex="-1"></a>                   <span class="op">|</span> <span class="dt">OptionValue</span></span>
<span id="cb4-29"><a href="#cb4-29" aria-hidden="true" tabindex="-1"></a>                   <span class="op">|</span> <span class="dt">NumberValue</span></span>
<span id="cb4-30"><a href="#cb4-30" aria-hidden="true" tabindex="-1"></a>                   <span class="op">|</span> <span class="dt">AutocompleteValue</span></span>
<span id="cb4-31"><a href="#cb4-31" aria-hidden="true" tabindex="-1"></a>                   <span class="kw">deriving</span> (<span class="dt">Generic</span>, <span class="dt">FromJSON</span>, <span class="dt">Show</span>, <span class="dt">Eq</span>)</span>
<span id="cb4-32"><a href="#cb4-32" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-33"><a href="#cb4-33" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">JiraField</span> <span class="ot">=</span> <span class="dt">JiraField</span></span>
<span id="cb4-34"><a href="#cb4-34" aria-hidden="true" tabindex="-1"></a>  {<span class="ot"> jiraFieldId ::</span> <span class="dt">Text</span></span>
<span id="cb4-35"><a href="#cb4-35" aria-hidden="true" tabindex="-1"></a>  ,<span class="ot"> jiraFieldName ::</span> <span class="dt">Text</span></span>
<span id="cb4-36"><a href="#cb4-36" aria-hidden="true" tabindex="-1"></a>  ,<span class="ot"> jiraFieldType ::</span> <span class="dt">FieldTypePlurality</span></span>
<span id="cb4-37"><a href="#cb4-37" aria-hidden="true" tabindex="-1"></a>  }</span>
<span id="cb4-38"><a href="#cb4-38" aria-hidden="true" tabindex="-1"></a>  <span class="kw">deriving</span> (<span class="dt">Generic</span>, <span class="dt">Show</span>)</span>
<span id="cb4-39"><a href="#cb4-39" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-40"><a href="#cb4-40" aria-hidden="true" tabindex="-1"></a><span class="kw">instance</span> <span class="dt">FromJSON</span> <span class="dt">JiraField</span> <span class="kw">where</span></span>
<span id="cb4-41"><a href="#cb4-41" aria-hidden="true" tabindex="-1"></a>  parseJSON <span class="ot">=</span> withObject <span class="st">&quot;field&quot;</span> <span class="op">$</span> \field <span class="ot">-&gt;</span> <span class="kw">do</span></span>
<span id="cb4-42"><a href="#cb4-42" aria-hidden="true" tabindex="-1"></a>    <span class="fu">id</span> <span class="ot">&lt;-</span> field <span class="op">.:</span> <span class="st">&quot;id&quot;</span></span>
<span id="cb4-43"><a href="#cb4-43" aria-hidden="true" tabindex="-1"></a>    name <span class="ot">&lt;-</span> field <span class="op">.:</span> <span class="st">&quot;name&quot;</span></span>
<span id="cb4-44"><a href="#cb4-44" aria-hidden="true" tabindex="-1"></a>    config <span class="ot">&lt;-</span></span>
<span id="cb4-45"><a href="#cb4-45" aria-hidden="true" tabindex="-1"></a>      <span class="kw">if</span> <span class="fu">id</span> <span class="op">==</span> <span class="st">&quot;issuekey&quot;</span></span>
<span id="cb4-46"><a href="#cb4-46" aria-hidden="true" tabindex="-1"></a>        <span class="kw">then</span> <span class="fu">pure</span> <span class="dt">IssueKey</span></span>
<span id="cb4-47"><a href="#cb4-47" aria-hidden="true" tabindex="-1"></a>        <span class="kw">else</span> parseSchema <span class="op">=&lt;&lt;</span> field <span class="op">.:?</span> <span class="st">&quot;schema&quot;</span></span>
<span id="cb4-48"><a href="#cb4-48" aria-hidden="true" tabindex="-1"></a>    <span class="fu">pure</span> <span class="op">$</span> <span class="dt">JiraField</span> <span class="fu">id</span> name config</span>
<span id="cb4-49"><a href="#cb4-49" aria-hidden="true" tabindex="-1"></a>   <span class="kw">where</span></span>
<span id="cb4-50"><a href="#cb4-50" aria-hidden="true" tabindex="-1"></a><span class="ot">    parseSchema ::</span> <span class="dt">Maybe</span> <span class="dt">Object</span> <span class="ot">-&gt;</span> <span class="dt">Parser</span> <span class="dt">FieldTypePlurality</span></span>
<span id="cb4-51"><a href="#cb4-51" aria-hidden="true" tabindex="-1"></a>    parseSchema <span class="dt">Nothing</span> <span class="ot">=</span> <span class="fu">pure</span> <span class="dt">UnknownField</span></span>
<span id="cb4-52"><a href="#cb4-52" aria-hidden="true" tabindex="-1"></a>    parseSchema (<span class="dt">Just</span> schema) <span class="ot">=</span> parseType schema <span class="op">=&lt;&lt;</span> schema <span class="op">.:</span> <span class="st">&quot;type&quot;</span></span>
<span id="cb4-53"><a href="#cb4-53" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-54"><a href="#cb4-54" aria-hidden="true" tabindex="-1"></a><span class="ot">    parseType ::</span> <span class="dt">Object</span> <span class="ot">-&gt;</span> <span class="dt">Text</span> <span class="ot">-&gt;</span> <span class="dt">Parser</span> <span class="dt">FieldTypePlurality</span></span>
<span id="cb4-55"><a href="#cb4-55" aria-hidden="true" tabindex="-1"></a>    parseType _ <span class="st">&quot;user&quot;</span> <span class="ot">=</span> <span class="fu">pure</span> <span class="op">$</span> <span class="dt">Single</span> <span class="dt">UserValue</span></span>
<span id="cb4-56"><a href="#cb4-56" aria-hidden="true" tabindex="-1"></a>    parseType _ <span class="st">&quot;number&quot;</span> <span class="ot">=</span> <span class="fu">pure</span> <span class="op">$</span> <span class="dt">Single</span> <span class="dt">NumberValue</span></span>
<span id="cb4-57"><a href="#cb4-57" aria-hidden="true" tabindex="-1"></a>    parseType _ <span class="st">&quot;date&quot;</span> <span class="ot">=</span> <span class="fu">pure</span> <span class="op">$</span> <span class="dt">Single</span> <span class="dt">DateValue</span></span>
<span id="cb4-58"><a href="#cb4-58" aria-hidden="true" tabindex="-1"></a>    parseType _ <span class="st">&quot;datetime&quot;</span> <span class="ot">=</span> <span class="fu">pure</span> <span class="op">$</span> <span class="dt">Single</span> <span class="dt">DateTimeValue</span></span>
<span id="cb4-59"><a href="#cb4-59" aria-hidden="true" tabindex="-1"></a>    parseType _ <span class="st">&quot;option&quot;</span> <span class="ot">=</span> <span class="fu">pure</span> <span class="op">$</span> <span class="dt">Single</span> <span class="dt">OptionValue</span></span>
<span id="cb4-60"><a href="#cb4-60" aria-hidden="true" tabindex="-1"></a>    parseType _ <span class="st">&quot;string&quot;</span> <span class="ot">=</span> <span class="fu">pure</span> <span class="op">$</span> <span class="dt">Single</span> <span class="dt">StringValue</span></span>
<span id="cb4-61"><a href="#cb4-61" aria-hidden="true" tabindex="-1"></a>    parseType schema <span class="st">&quot;array&quot;</span> <span class="ot">=</span> parseArray <span class="op">&lt;$&gt;</span> schema <span class="op">.:</span> <span class="st">&quot;items&quot;</span></span>
<span id="cb4-62"><a href="#cb4-62" aria-hidden="true" tabindex="-1"></a>    parseType schema <span class="st">&quot;any&quot;</span> <span class="ot">=</span> parseCustom <span class="op">&lt;$&gt;</span> schema <span class="op">.:</span> <span class="st">&quot;custom&quot;</span></span>
<span id="cb4-63"><a href="#cb4-63" aria-hidden="true" tabindex="-1"></a>    parseType _ _ <span class="ot">=</span> <span class="fu">pure</span> <span class="dt">UnknownField</span></span>
<span id="cb4-64"><a href="#cb4-64" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-65"><a href="#cb4-65" aria-hidden="true" tabindex="-1"></a><span class="ot">    parseArray ::</span> <span class="dt">Text</span> <span class="ot">-&gt;</span> <span class="dt">FieldTypePlurality</span></span>
<span id="cb4-66"><a href="#cb4-66" aria-hidden="true" tabindex="-1"></a>    parseArray <span class="st">&quot;user&quot;</span> <span class="ot">=</span> <span class="dt">Multiple</span> <span class="dt">UserValue</span></span>
<span id="cb4-67"><a href="#cb4-67" aria-hidden="true" tabindex="-1"></a>    parseArray <span class="st">&quot;group&quot;</span> <span class="ot">=</span> <span class="dt">Multiple</span> <span class="dt">GroupValue</span></span>
<span id="cb4-68"><a href="#cb4-68" aria-hidden="true" tabindex="-1"></a>    parseArray <span class="st">&quot;option&quot;</span> <span class="ot">=</span> <span class="dt">Multiple</span> <span class="dt">OptionValue</span></span>
<span id="cb4-69"><a href="#cb4-69" aria-hidden="true" tabindex="-1"></a>    parseArray <span class="st">&quot;string&quot;</span> <span class="ot">=</span> <span class="dt">Multiple</span> <span class="dt">StringValue</span></span>
<span id="cb4-70"><a href="#cb4-70" aria-hidden="true" tabindex="-1"></a>    parseArray _ <span class="ot">=</span> <span class="dt">UnknownField</span></span>
<span id="cb4-71"><a href="#cb4-71" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-72"><a href="#cb4-72" aria-hidden="true" tabindex="-1"></a><span class="ot">    parseCustom ::</span> <span class="dt">Text</span> <span class="ot">-&gt;</span> <span class="dt">FieldTypePlurality</span></span>
<span id="cb4-73"><a href="#cb4-73" aria-hidden="true" tabindex="-1"></a>    parseCustom <span class="st">&quot;com.itransition.jira.plugin.customfields.jira-custom-fields:singlecomplete&quot;</span> <span class="ot">=</span> <span class="dt">Single</span> <span class="dt">AutocompleteValue</span></span>
<span id="cb4-74"><a href="#cb4-74" aria-hidden="true" tabindex="-1"></a>    parseCustom <span class="st">&quot;com.itransition.jira.plugin.customfields.jira-custom-fields:typeaheadfield&quot;</span> <span class="ot">=</span> <span class="dt">Multiple</span> <span class="dt">AutocompleteValue</span></span>
<span id="cb4-75"><a href="#cb4-75" aria-hidden="true" tabindex="-1"></a>    parseCustom _ <span class="ot">=</span> <span class="dt">UnknownField</span></span></code></pre></div>
<p>That would allow to express programs “around” project cards in “their” language and not hardcode field names or IDs into NIX build configs. But the experiment is far from end…</p>
  </section>
</article>

  </main>

  <footer>
    Site generated by
    <a href="http://jaspervdj.be/hakyll">Hakyll</a>
  </footer>
</body>

</html>]]></description>
    <pubDate>Fri, 11 Jun 2021 00:00:00 UT</pubDate>
    <guid>https://maksar.github.io/posts/projects/2021-06-11-coorish.html</guid>
    <dc:creator>Shestakov Alex</dc:creator>
</item>
<item>
    <title>Telegram bot for managing Bitbucket repositories</title>
    <link>https://maksar.github.io/posts/projects/2021-03-17-gitman.html</link>
    <description><![CDATA[<!doctype html>
<html lang="en">

<head>
  <meta charset="utf-8">
  <meta http-equiv="x-ua-compatible" content="ie=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Shestakov Alex Blog - Telegram bot for managing Bitbucket repositories</title>
  <link rel="stylesheet" href="../../css/default.css" />

  <script type="text/javascript" src="../../vendor/jquery/jquery-3.6.0.min.js"></script>
  <script type="text/javascript" src="../../vendor/fresco/js/fresco.min.js"></script>
  <link rel="stylesheet" type="text/css" href="../../vendor/fresco/css/fresco.css" />

  <link rel="stylesheet" href="../../vendor/highlight/styles/atom-one-dark.min.css">
  <script src="../../vendor/highlight/highlight.min.js"></script>
  <script src="../../vendor/highlight/languages/haskell.min.js"></script>
  <script src="../../vendor/highlight/languages/ruby.min.js"></script>
  <script src="../../vendor/highlight/languages/shell.min.js"></script>
  <script src="../../vendor/highlight/languages/kotlin.min.js"></script>
  <script src="../../vendor/highlight/languages/javascript.min.js"></script>
  <script>hljs.highlightAll();</script>
</head>

<body>
  <header>
    <div class="logo">
      <a href="../../">Shestakov Alex</a>
    </div>
    <nav>
      &amp;<a href="../../languages/english.html">english</a> &amp;<a href="../../languages/russian.html">russian</a>
      @<a href="../../categories/code.html">code</a> @<a href="../../categories/projects.html">projects</a>
      <a href="../../about.html">About</a>
    </nav>
  </header>

  <main role="main">
    <h1>Telegram bot for managing Bitbucket repositories</h1>
    <article>
  <section class="header">
    March 17, 2021  @<a href="../../categories/projects.html">projects</a> #<a href="../../tags/english.html">english</a> #<a href="../../tags/ruby.html">ruby</a> #<a href="../../tags/telegram.html">telegram</a> #<a href="../../tags/fibers.html">fibers</a> #<a href="../../tags/rspec.html">rspec</a>
  </section>
  <section>
    <p>Gitman is a Telegram chat bot. It helps to manage source code repositories in Itransition Bitbucket server. Intead of creating repositories manually, our HelpDesk operators are using this bot. It sets up all merge hooks, commit message checks, default reviwers policy, other things which is tidiuos to do by hands.</p>
<p>Here are some examples of <em>how it looks</em>:</p>
<p><a href="../../images/gitman/1.jpg" class="fresco" data-fresco-group="thumbnail" data-fresco-options="ui: 'inside', thumbnails: false"><img src="../../previews/gitman/1.jpg" /></a> <a href="../../images/gitman/2.jpg" class="fresco" data-fresco-group="thumbnail" data-fresco-options="ui: 'inside', thumbnails: false"><img src="../../previews/gitman/2.jpg" /></a> <a href="../../images/gitman/3.jpg" class="fresco" data-fresco-group="thumbnail" data-fresco-options="ui: 'inside', thumbnails: false"><img src="../../previews/gitman/3.jpg" /></a> <a href="../../images/gitman/4.jpg" class="fresco" data-fresco-group="thumbnail" data-fresco-options="ui: 'inside', thumbnails: false"><img src="../../previews/gitman/4.jpg" /></a></p>
<p>There are number of technical decisions, which makes this piece of software interesting to mention as a ‘ruby pearl’:</p>
<ul>
<li>usage of ruby Fibers feature</li>
<li>usage of pattern matching feature</li>
<li>non standard approach on integration testing</li>
</ul>
<p>It also features a <a href="https://github.com/maksar/gitman/blob/master/flake.nix#L46-L49">trick</a> (one of the first things I did with nix) with making some environment variables visible for a nix shell in order for the bundler (ruby build tool) to be able to build gems (ruby libraries) with native extensions. It even has a <a href="https://github.com/maksar/gitman/blob/master/flake.nix#L68">check phase</a> enabled ;)</p>
<p>Under the hood it uses my fork of <a href="https://github.com/nix-community/bundix/pull/75/files">bundix</a> (allows to nixify ruby dependencies) because the official version is forgotten by maintainers and no longer supports modern bundler.</p>
<p>Being a <a href="https://telegram.org">telegram</a> bot, gitman need to maintain a conversation with a user. Bot is not a stateless command processor, but rather a context-aware conversion member. In order to execute a particular command, it can ask additional question from the user and react to user’s responses.</p>
<p>Doing stateful operations is not an easy task in ruby. Majority of the frameworks only support stateless requests processing, when each new request doesn’t share any information with a previous one. Having a <em>conversation</em>, would require some kind of storage, <code>session</code> object maybe to store current state of a dialog. That complicates the code, forcing developer to save/restore conversation state of each request.</p>
<p>Gitman uses ruby Fibers feature to seamlessly suspend and continue code execution flow whenever user posts his/her response in a chat. Code of such dialog can be expressed as a single continuous method, which makes it easy to every aspect of the particular dialog.</p>
<p>Lets review an example – dialog to create a project inside Itransition’s Bitbucket server:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode ruby"><code class="sourceCode ruby"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="cf">def</span> project</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>  project <span class="kw">=</span> request(<span class="st">&quot;What is Bitbucket PROJECT key?&quot;</span>)</span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>  <span class="cf">if</span> (info <span class="kw">=</span> bitbucket<span class="at">.project_info</span>)</span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>    reply(<span class="st">&quot;Ok, </span><span class="sc">#{</span>project<span class="sc">}</span><span class="st"> project already exist.&quot;</span>)</span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>    print_info(info)</span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>    <span class="ot">@create_repository</span><span class="at">.call</span>(project)</span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a>  <span class="cf">else</span></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a>    reply(<span class="st">&quot;There is no such project.&quot;</span>)</span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a>    ask(<span class="st">&quot;Do you want to create it?&quot;</span>, <span class="kw">&amp;</span>method(<span class="wa">:create</span>))</span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a>  <span class="cf">end</span></span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a><span class="cf">end</span></span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a><span class="cf">def</span> create</span>
<span id="cb1-14"><a href="#cb1-14" aria-hidden="true" tabindex="-1"></a>  name <span class="kw">=</span> request(<span class="st">&quot;Specify project name (human readable):&quot;</span>)</span>
<span id="cb1-15"><a href="#cb1-15" aria-hidden="true" tabindex="-1"></a>  description <span class="kw">=</span> request(<span class="st">&quot;Specify project description:&quot;</span>)</span>
<span id="cb1-16"><a href="#cb1-16" aria-hidden="true" tabindex="-1"></a>  ask(<span class="st">&quot;We are about to create project with name '</span><span class="sc">#{</span>name<span class="sc">}</span><span class="st">', description '</span><span class="sc">#{</span>description<span class="sc">}</span><span class="st">'&quot;</span>) <span class="cf">do</span></span>
<span id="cb1-17"><a href="#cb1-17" aria-hidden="true" tabindex="-1"></a>    print_info(bitbucket<span class="at">.create_project</span>(name, description))</span>
<span id="cb1-18"><a href="#cb1-18" aria-hidden="true" tabindex="-1"></a>    answer(<span class="st">&quot;Project created!&quot;</span>, <span class="wa">link: </span>bitbucket<span class="at">.project_link</span>(<span class="dt">Services</span><span class="kw">::</span><span class="dt">Bitbucket</span><span class="kw">::</span><span class="cn">BROWSER_PREFIX</span>))</span>
<span id="cb1-19"><a href="#cb1-19" aria-hidden="true" tabindex="-1"></a>  <span class="cf">end</span></span>
<span id="cb1-20"><a href="#cb1-20" aria-hidden="true" tabindex="-1"></a><span class="cf">end</span></span></code></pre></div>
<p>Code indeed reads like a conversation, without any callbacks or nasty <code>and_then</code> statements – just a plain old ruby method. Lets review how it is possible for this code to work continuously in a context of several HTTP roundtrips to Telegram API. Base primitives of the dialog are:</p>
<ul>
<li><code>ask</code> to ask some question from the user in chat and expect a binary answer – yes or no</li>
<li><code>request</code> to request some additional text information from the user</li>
<li><code>reply</code> to post an information statement to the chat, which does not require user’s answer</li>
<li><code>answer</code> a method to end the dialog (name is not ideal), when bot resets itself to the default state with no on-going conversation</li>
</ul>
<div class="sourceCode" id="cb2"><pre class="sourceCode ruby"><code class="sourceCode ruby"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="cf">def</span> ask(question, negative <span class="kw">=</span> <span class="kw">-&gt;</span> <span class="kw">{</span> answer(<span class="st">&quot;Ok then.&quot;</span>) <span class="kw">}</span>)</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>  <span class="cf">case</span> request(question, <span class="wa">answers: </span><span class="kw">[[</span><span class="cn">POSITIVE</span>, <span class="cn">NEGATIVE</span><span class="kw">]]</span>)</span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>  <span class="cf">in</span> <span class="cn">POSITIVE</span> <span class="cf">then</span> <span class="cf">yield</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>  <span class="cf">else</span> negative<span class="at">.call</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>  <span class="cf">end</span></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a><span class="cf">end</span></span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a><span class="cf">def</span> option(question, <span class="kw">&amp;</span>block)</span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a>  ask(question, <span class="kw">-&gt;</span> <span class="kw">{}</span>, <span class="kw">&amp;</span>block)</span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a><span class="cf">end</span></span>
<span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-12"><a href="#cb2-12" aria-hidden="true" tabindex="-1"></a><span class="cf">def</span> request(question, params <span class="kw">=</span> <span class="kw">{}</span>)</span>
<span id="cb2-13"><a href="#cb2-13" aria-hidden="true" tabindex="-1"></a>  <span class="dt">Fiber</span><span class="at">.yield</span>(<span class="wa">:question</span>, params<span class="at">.merge</span>(<span class="wa">text: </span>question))</span>
<span id="cb2-14"><a href="#cb2-14" aria-hidden="true" tabindex="-1"></a><span class="cf">end</span></span>
<span id="cb2-15"><a href="#cb2-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-16"><a href="#cb2-16" aria-hidden="true" tabindex="-1"></a><span class="cf">def</span> reply(statement, params <span class="kw">=</span> <span class="kw">{}</span>)</span>
<span id="cb2-17"><a href="#cb2-17" aria-hidden="true" tabindex="-1"></a>  <span class="dt">Fiber</span><span class="at">.yield</span>(<span class="wa">:statement</span>, params<span class="at">.merge</span>(<span class="wa">text: </span>statement))</span>
<span id="cb2-18"><a href="#cb2-18" aria-hidden="true" tabindex="-1"></a><span class="cf">end</span></span>
<span id="cb2-19"><a href="#cb2-19" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-20"><a href="#cb2-20" aria-hidden="true" tabindex="-1"></a><span class="cf">def</span> answer(answer, params <span class="kw">=</span> <span class="kw">{}</span>)</span>
<span id="cb2-21"><a href="#cb2-21" aria-hidden="true" tabindex="-1"></a>  request(answer, params)</span>
<span id="cb2-22"><a href="#cb2-22" aria-hidden="true" tabindex="-1"></a>  <span class="dt">Fiber</span><span class="at">.yield</span>(<span class="wa">:end</span>)</span>
<span id="cb2-23"><a href="#cb2-23" aria-hidden="true" tabindex="-1"></a><span class="cf">end</span></span></code></pre></div>
<p>Bot runs forever in a main loop expecting a message from a user. <code>@dialogs</code> hash is a mapping from chat ID to the dialog object instance with suspended Fiber thread. Whenever message appears, main loop fetches an on-going dialog from a <code>@gialogs</code> hash and tries to continue it.</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode ruby"><code class="sourceCode ruby"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="dt">Telegram</span><span class="kw">::</span><span class="dt">Bot</span><span class="kw">::</span><span class="dt">Client</span><span class="at">.run</span>(<span class="cn">ENV</span><span class="at">.fetch</span>(<span class="st">&quot;GITMAN_TELEGRAM_TOKEN&quot;</span>)) <span class="cf">do</span> <span class="kw">|</span>bot<span class="kw">|</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>  <span class="fu">puts</span> <span class="st">&quot;Gitman on duty!&quot;</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>  bot<span class="at">.listen</span>(<span class="kw">&amp;</span><span class="dt">Runtime</span><span class="at">.new</span>(</span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>    bot, <span class="dt">Dialogs</span><span class="kw">::</span><span class="dt">Default</span><span class="at">.new</span>(</span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>           <span class="st">&quot;/create&quot;</span> <span class="kw">=&gt;</span> <span class="fu">proc</span> <span class="kw">{</span> <span class="dt">Dialogs</span><span class="kw">::</span><span class="dt">CreateProject</span><span class="at">.new.call</span> <span class="kw">}</span>,</span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a>           <span class="st">&quot;/close&quot;</span> <span class="kw">=&gt;</span> <span class="fu">proc</span> <span class="kw">{</span> <span class="dt">Dialogs</span><span class="kw">::</span><span class="dt">CloseProject</span><span class="at">.new.call</span> <span class="kw">}</span>,</span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a>           <span class="st">&quot;/reopen&quot;</span> <span class="kw">=&gt;</span> <span class="fu">proc</span> <span class="kw">{</span> <span class="dt">Dialogs</span><span class="kw">::</span><span class="dt">ReopenProject</span><span class="at">.new.call</span> <span class="kw">}</span></span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a>         )</span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a>  )<span class="at">.method</span>(<span class="wa">:main_loop</span>))</span>
<span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a><span class="cf">end</span></span>
<span id="cb3-11"><a href="#cb3-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-12"><a href="#cb3-12" aria-hidden="true" tabindex="-1"></a><span class="cf">def</span> main_loop(message)</span>
<span id="cb3-13"><a href="#cb3-13" aria-hidden="true" tabindex="-1"></a>  <span class="cf">return</span> <span class="dv">self</span> <span class="cf">unless</span> known_user?(message)</span>
<span id="cb3-14"><a href="#cb3-14" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-15"><a href="#cb3-15" aria-hidden="true" tabindex="-1"></a>  <span class="ot">@dialogs</span><span class="kw">[</span>message<span class="at">.chat.id</span><span class="kw">]</span> <span class="kw">=</span> listen(message<span class="at">.chat.id</span>, message<span class="at">.text</span>, <span class="ot">@dialogs</span><span class="kw">[</span>message<span class="at">.chat.id</span><span class="kw">]</span>)</span>
<span id="cb3-16"><a href="#cb3-16" aria-hidden="true" tabindex="-1"></a>  <span class="dv">self</span></span>
<span id="cb3-17"><a href="#cb3-17" aria-hidden="true" tabindex="-1"></a><span class="cf">end</span></span></code></pre></div>
<p>Continuation happens inside <code>listen</code> method, which <code>resume</code>s a a Fiber inside a dialog, passing a text from a user in it. Dialog has control on what to do next by returning value. Case statement pattern patches on that value</p>
<ul>
<li>if a value <code>is_a</code> Fiber – runtime recursively calls <code>listen</code>, allowing a dialog code to execute next statement</li>
<li>if a value is a payload – runtime decides what to do next (also <code>print</code>ing a message to a chat using Telegram’s API)
<ul>
<li>in case of a question – runtime just continue to wait for an user’s answer, returning a dialog, which will be stored in <code>@dialogs</code> until next request comes in</li>
<li>in case of a statement – recursive <code>listen</code> call is needed, because dialog may contain several consequent <code>reply</code> calls, which all needs to be handled</li>
<li><code>:end</code> forces dialog to <em>become</em> a default one</li>
</ul></li>
</ul>
<div class="sourceCode" id="cb4"><pre class="sourceCode ruby"><code class="sourceCode ruby"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="cf">def</span> listen(chat, text, dialog)</span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>  <span class="cf">return</span> reset(chat, <span class="st">&quot;Ok, then.&quot;</span>) <span class="cf">if</span> text <span class="kw">==</span> <span class="st">&quot;/cancel&quot;</span></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>  <span class="cf">case</span> (result <span class="kw">=</span> dialog<span class="at">.resume</span>(text))</span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a>  <span class="cf">in</span> <span class="dt">Fiber</span> <span class="cf">then</span> listen(chat, text, result)</span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a>  <span class="cf">in</span> <span class="kw">[</span><span class="wa">:question</span> <span class="kw">|</span> <span class="wa">:statement</span>, payload<span class="kw">]</span></span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a>    <span class="fu">print</span>(chat, payload)</span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a>    decide(chat, dialog, result, text)</span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a>  <span class="cf">else</span> decide(chat, dialog, result, text)</span>
<span id="cb4-10"><a href="#cb4-10" aria-hidden="true" tabindex="-1"></a>  <span class="cf">end</span></span>
<span id="cb4-11"><a href="#cb4-11" aria-hidden="true" tabindex="-1"></a><span class="cf">rescue</span> <span class="dt">StandardError</span> <span class="kw">=&gt;</span> e</span>
<span id="cb4-12"><a href="#cb4-12" aria-hidden="true" tabindex="-1"></a>  reset(chat, <span class="st">&quot;Something bad happens: </span><span class="sc">#{</span>e<span class="sc">}</span><span class="st">\n</span><span class="sc">#{</span>e<span class="at">.message</span><span class="sc">}</span><span class="st">\n</span><span class="sc">#{</span>e<span class="at">.backtrace</span><span class="sc">}</span><span class="st">&quot;</span>)</span>
<span id="cb4-13"><a href="#cb4-13" aria-hidden="true" tabindex="-1"></a><span class="cf">end</span></span>
<span id="cb4-14"><a href="#cb4-14" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-15"><a href="#cb4-15" aria-hidden="true" tabindex="-1"></a><span class="cf">def</span> decide(chat, dialog, result, text)</span>
<span id="cb4-16"><a href="#cb4-16" aria-hidden="true" tabindex="-1"></a>  <span class="cf">case</span> result</span>
<span id="cb4-17"><a href="#cb4-17" aria-hidden="true" tabindex="-1"></a>  <span class="cf">in</span> <span class="kw">[</span><span class="wa">:question</span>, <span class="kw">*]</span> <span class="cf">then</span> dialog</span>
<span id="cb4-18"><a href="#cb4-18" aria-hidden="true" tabindex="-1"></a>  <span class="cf">in</span> <span class="kw">[</span><span class="wa">:statement</span>, <span class="kw">*]</span> <span class="cf">then</span> listen(chat, text, dialog)</span>
<span id="cb4-19"><a href="#cb4-19" aria-hidden="true" tabindex="-1"></a>  <span class="cf">in</span> <span class="wa">:end</span> <span class="cf">then</span> listen(chat, text, <span class="ot">@dialogs</span><span class="at">.default</span>(<span class="dv">nil</span>))</span>
<span id="cb4-20"><a href="#cb4-20" aria-hidden="true" tabindex="-1"></a>  <span class="cf">in</span> command <span class="cf">then</span> <span class="fu">print</span>(chat, <span class="wa">text: </span><span class="st">&quot;Unknown internal command: </span><span class="sc">#{</span>command<span class="sc">}</span><span class="st">&quot;</span>)</span>
<span id="cb4-21"><a href="#cb4-21" aria-hidden="true" tabindex="-1"></a>  <span class="cf">end</span></span>
<span id="cb4-22"><a href="#cb4-22" aria-hidden="true" tabindex="-1"></a><span class="cf">end</span></span></code></pre></div>
<p>That great, but <code>how we can test that</code>, you may ask?.. Well, there is a rabbit in a hat for that – one more runtime! Main loop in that dummy runtime does not maintain different dialogs, but rather replays a list of messages from <code>answers</code> input array, injecting them to the conversation.</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode ruby"><code class="sourceCode ruby"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="cf">def</span> chat(answers)</span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a>  (<span class="kw">[</span><span class="cn">START</span><span class="kw">]</span> <span class="kw">+</span> answers)<span class="at">.each</span> <span class="cf">do</span> <span class="kw">|</span>text<span class="kw">|</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a>    main_loop(<span class="dt">Telegram</span><span class="kw">::</span><span class="dt">Bot</span><span class="kw">::</span><span class="dt">Types</span><span class="kw">::</span><span class="dt">Message</span><span class="at">.new</span>(</span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a>      <span class="wa">from: </span><span class="dt">Telegram</span><span class="kw">::</span><span class="dt">Bot</span><span class="kw">::</span><span class="dt">Types</span><span class="kw">::</span><span class="dt">User</span><span class="at">.new</span>(<span class="wa">id: </span><span class="dv">0</span>),</span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a>      <span class="wa">chat: </span><span class="dt">Telegram</span><span class="kw">::</span><span class="dt">Bot</span><span class="kw">::</span><span class="dt">Types</span><span class="kw">::</span><span class="dt">Chat</span><span class="at">.new</span>(<span class="wa">id: </span><span class="dv">0</span>),</span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a>      <span class="wa">text: </span>text</span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a>    ))</span>
<span id="cb5-8"><a href="#cb5-8" aria-hidden="true" tabindex="-1"></a>  <span class="cf">end</span></span>
<span id="cb5-9"><a href="#cb5-9" aria-hidden="true" tabindex="-1"></a>  <span class="ot">@conversation</span><span class="at">.text.join</span>(<span class="st">&quot;\n&quot;</span>)</span>
<span id="cb5-10"><a href="#cb5-10" aria-hidden="true" tabindex="-1"></a><span class="cf">end</span></span>
<span id="cb5-11"><a href="#cb5-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-12"><a href="#cb5-12" aria-hidden="true" tabindex="-1"></a><span class="cf">def</span> main_loop(message)</span>
<span id="cb5-13"><a href="#cb5-13" aria-hidden="true" tabindex="-1"></a>  <span class="ot">@conversation</span><span class="at">.user</span>(message<span class="at">.text</span>) <span class="cf">unless</span> message<span class="at">.text</span> <span class="kw">==</span> <span class="cn">START</span></span>
<span id="cb5-14"><a href="#cb5-14" aria-hidden="true" tabindex="-1"></a>  <span class="dv">super</span></span>
<span id="cb5-15"><a href="#cb5-15" aria-hidden="true" tabindex="-1"></a><span class="cf">end</span></span>
<span id="cb5-16"><a href="#cb5-16" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-17"><a href="#cb5-17" aria-hidden="true" tabindex="-1"></a><span class="at">private</span></span>
<span id="cb5-18"><a href="#cb5-18" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-19"><a href="#cb5-19" aria-hidden="true" tabindex="-1"></a><span class="cf">def</span> decide(chat, dialog, result, text)</span>
<span id="cb5-20"><a href="#cb5-20" aria-hidden="true" tabindex="-1"></a>  <span class="cf">return</span> <span class="cf">if</span> result <span class="kw">==</span> <span class="wa">:end</span></span>
<span id="cb5-21"><a href="#cb5-21" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-22"><a href="#cb5-22" aria-hidden="true" tabindex="-1"></a>  <span class="dv">super</span></span>
<span id="cb5-23"><a href="#cb5-23" aria-hidden="true" tabindex="-1"></a><span class="cf">end</span></span>
<span id="cb5-24"><a href="#cb5-24" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-25"><a href="#cb5-25" aria-hidden="true" tabindex="-1"></a><span class="cf">def</span> <span class="fu">print</span>(_chat, message)</span>
<span id="cb5-26"><a href="#cb5-26" aria-hidden="true" tabindex="-1"></a>  <span class="ot">@conversation</span><span class="at">.bot</span>(message)</span>
<span id="cb5-27"><a href="#cb5-27" aria-hidden="true" tabindex="-1"></a><span class="cf">end</span></span></code></pre></div>
<p>Conversation object, which is another helper for testing a dialog is a pretty simple ruby class. It records everything that user said, bot replied to the user or any service call to the Bitbucket API which was made by a bot.</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode ruby"><code class="sourceCode ruby"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="cf">class</span> <span class="dt">Conversation</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a>  <span class="cn">BOT</span> <span class="kw">=</span> <span class="st">&quot;BOT&quot;</span></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a>  <span class="cn">USER</span> <span class="kw">=</span> <span class="st">&quot;USR&quot;</span></span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a>  <span class="cn">SERVICE</span> <span class="kw">=</span> <span class="st">&quot;SRV&quot;</span></span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true" tabindex="-1"></a>  <span class="ot">attr_reader</span> <span class="wa">:text</span></span>
<span id="cb6-7"><a href="#cb6-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-8"><a href="#cb6-8" aria-hidden="true" tabindex="-1"></a>  <span class="cf">def</span> initialize</span>
<span id="cb6-9"><a href="#cb6-9" aria-hidden="true" tabindex="-1"></a>    <span class="ot">@text</span> <span class="kw">=</span> <span class="kw">[]</span></span>
<span id="cb6-10"><a href="#cb6-10" aria-hidden="true" tabindex="-1"></a>  <span class="cf">end</span></span>
<span id="cb6-11"><a href="#cb6-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-12"><a href="#cb6-12" aria-hidden="true" tabindex="-1"></a>  <span class="cf">def</span> bot(message)</span>
<span id="cb6-13"><a href="#cb6-13" aria-hidden="true" tabindex="-1"></a>    add(<span class="cn">BOT</span>, <span class="kw">[</span>message<span class="kw">[</span><span class="wa">:text</span><span class="kw">]</span>, answers(message<span class="kw">[</span><span class="wa">:answers</span><span class="kw">]</span>), link(message<span class="kw">[</span><span class="wa">:link</span><span class="kw">]</span>)<span class="kw">]</span><span class="at">.compact.join</span>(<span class="st">&quot; &quot;</span>))</span>
<span id="cb6-14"><a href="#cb6-14" aria-hidden="true" tabindex="-1"></a>  <span class="cf">end</span></span>
<span id="cb6-15"><a href="#cb6-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-16"><a href="#cb6-16" aria-hidden="true" tabindex="-1"></a>  <span class="cf">def</span> user(message)</span>
<span id="cb6-17"><a href="#cb6-17" aria-hidden="true" tabindex="-1"></a>    add(<span class="cn">USER</span>, message)</span>
<span id="cb6-18"><a href="#cb6-18" aria-hidden="true" tabindex="-1"></a>  <span class="cf">end</span></span>
<span id="cb6-19"><a href="#cb6-19" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-20"><a href="#cb6-20" aria-hidden="true" tabindex="-1"></a>  <span class="cf">def</span> service(trace)</span>
<span id="cb6-21"><a href="#cb6-21" aria-hidden="true" tabindex="-1"></a>    add(<span class="cn">SERVICE</span>, trace)</span>
<span id="cb6-22"><a href="#cb6-22" aria-hidden="true" tabindex="-1"></a>  <span class="cf">end</span></span>
<span id="cb6-23"><a href="#cb6-23" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-24"><a href="#cb6-24" aria-hidden="true" tabindex="-1"></a>  <span class="at">private</span></span>
<span id="cb6-25"><a href="#cb6-25" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-26"><a href="#cb6-26" aria-hidden="true" tabindex="-1"></a>  <span class="cf">def</span> answers(answers)</span>
<span id="cb6-27"><a href="#cb6-27" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> <span class="cf">unless</span> answers</span>
<span id="cb6-28"><a href="#cb6-28" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-29"><a href="#cb6-29" aria-hidden="true" tabindex="-1"></a>    <span class="st">&quot;KBD: </span><span class="sc">#{</span>answers<span class="at">.join</span>(<span class="vs">', '</span>)<span class="sc">}</span><span class="st">&quot;</span></span>
<span id="cb6-30"><a href="#cb6-30" aria-hidden="true" tabindex="-1"></a>  <span class="cf">end</span></span>
<span id="cb6-31"><a href="#cb6-31" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-32"><a href="#cb6-32" aria-hidden="true" tabindex="-1"></a>  <span class="cf">def</span> link(link)</span>
<span id="cb6-33"><a href="#cb6-33" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> <span class="cf">unless</span> link</span>
<span id="cb6-34"><a href="#cb6-34" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-35"><a href="#cb6-35" aria-hidden="true" tabindex="-1"></a>    <span class="st">&quot;LNK: </span><span class="sc">#{</span>link<span class="sc">}</span><span class="st">&quot;</span></span>
<span id="cb6-36"><a href="#cb6-36" aria-hidden="true" tabindex="-1"></a>  <span class="cf">end</span></span>
<span id="cb6-37"><a href="#cb6-37" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-38"><a href="#cb6-38" aria-hidden="true" tabindex="-1"></a>  <span class="cf">def</span> add(actor, message)</span>
<span id="cb6-39"><a href="#cb6-39" aria-hidden="true" tabindex="-1"></a>    <span class="ot">@text</span> <span class="kw">&lt;&lt;</span> <span class="kw">[</span>actor, message<span class="kw">]</span><span class="at">.join</span>(<span class="st">&quot;: &quot;</span>)</span>
<span id="cb6-40"><a href="#cb6-40" aria-hidden="true" tabindex="-1"></a>  <span class="cf">end</span></span>
<span id="cb6-41"><a href="#cb6-41" aria-hidden="true" tabindex="-1"></a><span class="cf">end</span></span></code></pre></div>
<p>Having all that, it is now possible to test a dialog by simulating conversation between user and a bot. By providing list of user’s answers, we <code>expect</code> a full dialog to look like it should. By injecting a dummy implementation of the Bitbucket service to the dialog as a dependency, it is even possible to unsure, that certain service calls were made with proper arguments.</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode ruby"><code class="sourceCode ruby"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="dt">RSpec</span><span class="at">.describe</span> <span class="dt">Dialogs</span><span class="kw">::</span><span class="dt">CreateProject</span> <span class="cf">do</span></span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a>  let(<span class="wa">:dialog</span>) <span class="kw">{</span> <span class="fu">proc</span> <span class="kw">{</span> described_class<span class="at">.new</span>(<span class="dt">DummyBitbucketFactory</span><span class="at">.new</span>(bitbucket), termination)<span class="at">.call</span> <span class="kw">}</span> <span class="kw">}</span></span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a>  let(<span class="wa">:project</span>) <span class="kw">{</span> <span class="dt">ProjectInfo</span><span class="at">.new</span>(<span class="st">&quot;TEST&quot;</span>, <span class="wa">name: </span><span class="st">&quot;Test Project&quot;</span>, <span class="wa">description: </span><span class="st">&quot;Test Project description&quot;</span>, <span class="wa">type: </span><span class="st">&quot;normal&quot;</span>) <span class="kw">}</span></span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a>  context <span class="st">&quot;when project does not exist&quot;</span> <span class="cf">do</span></span>
<span id="cb7-6"><a href="#cb7-6" aria-hidden="true" tabindex="-1"></a>    let(<span class="wa">:bitbucket</span>) <span class="kw">{</span> <span class="dt">DummyBitbucket</span><span class="at">.new</span>(conversation, <span class="dv">nil</span>, <span class="dv">nil</span>) <span class="kw">}</span></span>
<span id="cb7-7"><a href="#cb7-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-8"><a href="#cb7-8" aria-hidden="true" tabindex="-1"></a>    it <span class="st">&quot;user does not want to create project&quot;</span> <span class="cf">do</span></span>
<span id="cb7-9"><a href="#cb7-9" aria-hidden="true" tabindex="-1"></a>      expect(runtime<span class="at">.chat</span>(payload <span class="kw">=</span> <span class="kw">[</span>project<span class="at">.key</span>, no<span class="kw">]</span>))<span class="at">.to</span> chat_match(<span class="kw">&lt;&lt;~</span><span class="cf">TEXT</span><span class="do">)</span></span>
<span id="cb7-10"><a href="#cb7-10" aria-hidden="true" tabindex="-1"></a><span class="do">        BOT: What is Bitbucket PROJECT key?</span></span>
<span id="cb7-11"><a href="#cb7-11" aria-hidden="true" tabindex="-1"></a><span class="do">        USR: </span><span class="sc">#{</span>payload<span class="at">.shift</span><span class="sc">}</span></span>
<span id="cb7-12"><a href="#cb7-12" aria-hidden="true" tabindex="-1"></a><span class="do">        BOT: There is no such project.</span></span>
<span id="cb7-13"><a href="#cb7-13" aria-hidden="true" tabindex="-1"></a><span class="do">        BOT: Do you want to create it? KBD: </span><span class="sc">#{</span>yes<span class="sc">}</span><span class="do">, </span><span class="sc">#{</span>no<span class="sc">}</span></span>
<span id="cb7-14"><a href="#cb7-14" aria-hidden="true" tabindex="-1"></a><span class="do">        USR: </span><span class="sc">#{</span>payload<span class="at">.shift</span><span class="sc">}</span></span>
<span id="cb7-15"><a href="#cb7-15" aria-hidden="true" tabindex="-1"></a><span class="do">        BOT: Ok then.</span></span>
<span id="cb7-16"><a href="#cb7-16" aria-hidden="true" tabindex="-1"></a><span class="do">      TEXT</span></span>
<span id="cb7-17"><a href="#cb7-17" aria-hidden="true" tabindex="-1"></a><span class="do">    end</span></span>
<span id="cb7-18"><a href="#cb7-18" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-19"><a href="#cb7-19" aria-hidden="true" tabindex="-1"></a><span class="do">    it &quot;user wants to create a project&quot; do</span></span>
<span id="cb7-20"><a href="#cb7-20" aria-hidden="true" tabindex="-1"></a><span class="do">      expect(runtime.chat(payload = [project.key, yes, project.name, project.description, yes])).to chat_match(&lt;&lt;~TEXT)</span></span>
<span id="cb7-21"><a href="#cb7-21" aria-hidden="true" tabindex="-1"></a><span class="do">        BOT: What is Bitbucket PROJECT key?</span></span>
<span id="cb7-22"><a href="#cb7-22" aria-hidden="true" tabindex="-1"></a><span class="do">        USR: </span><span class="sc">#{</span>payload<span class="at">.shift</span><span class="sc">}</span></span>
<span id="cb7-23"><a href="#cb7-23" aria-hidden="true" tabindex="-1"></a><span class="do">        BOT: There is no such project.</span></span>
<span id="cb7-24"><a href="#cb7-24" aria-hidden="true" tabindex="-1"></a><span class="do">        BOT: Do you want to create it? KBD: </span><span class="sc">#{</span>yes<span class="sc">}</span><span class="do">, </span><span class="sc">#{</span>no<span class="sc">}</span></span>
<span id="cb7-25"><a href="#cb7-25" aria-hidden="true" tabindex="-1"></a><span class="do">        USR: </span><span class="sc">#{</span>payload<span class="at">.shift</span><span class="sc">}</span></span>
<span id="cb7-26"><a href="#cb7-26" aria-hidden="true" tabindex="-1"></a><span class="do">        BOT: Specify project name (human readable):</span></span>
<span id="cb7-27"><a href="#cb7-27" aria-hidden="true" tabindex="-1"></a><span class="do">        USR: </span><span class="sc">#{</span>payload<span class="at">.shift</span><span class="sc">}</span></span>
<span id="cb7-28"><a href="#cb7-28" aria-hidden="true" tabindex="-1"></a><span class="do">        BOT: Specify project description:</span></span>
<span id="cb7-29"><a href="#cb7-29" aria-hidden="true" tabindex="-1"></a><span class="do">        USR: </span><span class="sc">#{</span>payload<span class="at">.shift</span><span class="sc">}</span></span>
<span id="cb7-30"><a href="#cb7-30" aria-hidden="true" tabindex="-1"></a><span class="do">        BOT: We are about to create project with name '</span><span class="sc">#{</span>project<span class="at">.name</span><span class="sc">}</span><span class="do">', key '</span><span class="sc">#{</span>project<span class="at">.key</span><span class="sc">}</span><span class="do">', description '</span><span class="sc">#{</span>project<span class="at">.description</span><span class="sc">}</span><span class="do">' KBD: </span><span class="sc">#{</span>yes<span class="sc">}</span><span class="do">, </span><span class="sc">#{</span>no<span class="sc">}</span></span>
<span id="cb7-31"><a href="#cb7-31" aria-hidden="true" tabindex="-1"></a><span class="do">        USR: </span><span class="sc">#{</span>payload<span class="at">.shift</span><span class="sc">}</span></span>
<span id="cb7-32"><a href="#cb7-32" aria-hidden="true" tabindex="-1"></a><span class="do">        SRV: create_project(</span><span class="sc">#{</span>project<span class="at">.name</span><span class="sc">}</span><span class="do">, </span><span class="sc">#{</span>project<span class="at">.description</span><span class="sc">}</span><span class="do">)</span></span>
<span id="cb7-33"><a href="#cb7-33" aria-hidden="true" tabindex="-1"></a><span class="do">        BOT: Name: </span><span class="sc">#{</span>project<span class="at">.name</span><span class="sc">}</span></span>
<span id="cb7-34"><a href="#cb7-34" aria-hidden="true" tabindex="-1"></a><span class="do">        BOT: Type: </span><span class="sc">#{</span>project<span class="at">.type</span><span class="sc">}</span></span>
<span id="cb7-35"><a href="#cb7-35" aria-hidden="true" tabindex="-1"></a><span class="do">        BOT: Description: </span><span class="sc">#{</span>project<span class="at">.description</span><span class="sc">}</span></span>
<span id="cb7-36"><a href="#cb7-36" aria-hidden="true" tabindex="-1"></a><span class="do">        BOT: Project created! LNK: </span><span class="sc">#{</span>bitbucket<span class="at">.projects_link</span>(<span class="dt">Services</span><span class="kw">::</span><span class="dt">Bitbucket</span><span class="kw">::</span><span class="cn">BROWSER_PREFIX</span>)<span class="sc">}</span><span class="do">/</span><span class="sc">#{</span>project<span class="at">.key</span><span class="sc">}</span></span>
<span id="cb7-37"><a href="#cb7-37" aria-hidden="true" tabindex="-1"></a><span class="do">      TEXT</span></span>
<span id="cb7-38"><a href="#cb7-38" aria-hidden="true" tabindex="-1"></a><span class="do">    end</span></span>
<span id="cb7-39"><a href="#cb7-39" aria-hidden="true" tabindex="-1"></a><span class="do">  end</span></span>
<span id="cb7-40"><a href="#cb7-40" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-41"><a href="#cb7-41" aria-hidden="true" tabindex="-1"></a><span class="do">  context &quot;when project does exist&quot; do</span></span>
<span id="cb7-42"><a href="#cb7-42" aria-hidden="true" tabindex="-1"></a><span class="do">    let(:bitbucket) { DummyBitbucket.new(conversation, project, nil) }</span></span>
<span id="cb7-43"><a href="#cb7-43" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-44"><a href="#cb7-44" aria-hidden="true" tabindex="-1"></a><span class="do">    it &quot;shows project details&quot; do</span></span>
<span id="cb7-45"><a href="#cb7-45" aria-hidden="true" tabindex="-1"></a><span class="do">      expect(runtime.chat(payload = [project.key])).to chat_match(&lt;&lt;~TEXT)</span></span>
<span id="cb7-46"><a href="#cb7-46" aria-hidden="true" tabindex="-1"></a><span class="do">        BOT: What is Bitbucket PROJECT key?</span></span>
<span id="cb7-47"><a href="#cb7-47" aria-hidden="true" tabindex="-1"></a><span class="do">        USR: </span><span class="sc">#{</span>payload<span class="at">.shift</span><span class="sc">}</span></span>
<span id="cb7-48"><a href="#cb7-48" aria-hidden="true" tabindex="-1"></a><span class="do">        BOT: Ok, </span><span class="sc">#{</span>project<span class="at">.key</span><span class="sc">}</span><span class="do"> project already exist.</span></span>
<span id="cb7-49"><a href="#cb7-49" aria-hidden="true" tabindex="-1"></a><span class="do">        BOT: Name: </span><span class="sc">#{</span>project<span class="at">.name</span><span class="sc">}</span></span>
<span id="cb7-50"><a href="#cb7-50" aria-hidden="true" tabindex="-1"></a><span class="do">        BOT: Type: </span><span class="sc">#{</span>project<span class="at">.type</span><span class="sc">}</span></span>
<span id="cb7-51"><a href="#cb7-51" aria-hidden="true" tabindex="-1"></a><span class="do">        BOT: Description: </span><span class="sc">#{</span>project<span class="at">.description</span><span class="sc">}</span></span>
<span id="cb7-52"><a href="#cb7-52" aria-hidden="true" tabindex="-1"></a><span class="do">      TEXT</span></span>
<span id="cb7-53"><a href="#cb7-53" aria-hidden="true" tabindex="-1"></a><span class="do">    end</span></span>
<span id="cb7-54"><a href="#cb7-54" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-55"><a href="#cb7-55" aria-hidden="true" tabindex="-1"></a><span class="do">    context &quot;when does not have a description&quot; do</span></span>
<span id="cb7-56"><a href="#cb7-56" aria-hidden="true" tabindex="-1"></a><span class="do">      before { project[:description] = nil }</span></span>
<span id="cb7-57"><a href="#cb7-57" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-58"><a href="#cb7-58" aria-hidden="true" tabindex="-1"></a><span class="do">      it &quot;shows project details with no description&quot; do</span></span>
<span id="cb7-59"><a href="#cb7-59" aria-hidden="true" tabindex="-1"></a><span class="do">        expect(runtime.chat(payload = [project.key])).to chat_match(&lt;&lt;~TEXT)</span></span>
<span id="cb7-60"><a href="#cb7-60" aria-hidden="true" tabindex="-1"></a><span class="do">          BOT: What is Bitbucket PROJECT key?</span></span>
<span id="cb7-61"><a href="#cb7-61" aria-hidden="true" tabindex="-1"></a><span class="do">          USR: </span><span class="sc">#{</span>payload<span class="at">.shift</span><span class="sc">}</span></span>
<span id="cb7-62"><a href="#cb7-62" aria-hidden="true" tabindex="-1"></a><span class="do">          BOT: Ok, </span><span class="sc">#{</span>project<span class="at">.key</span><span class="sc">}</span><span class="do"> project already exist.</span></span>
<span id="cb7-63"><a href="#cb7-63" aria-hidden="true" tabindex="-1"></a><span class="do">          BOT: Name: </span><span class="sc">#{</span>project<span class="at">.name</span><span class="sc">}</span></span>
<span id="cb7-64"><a href="#cb7-64" aria-hidden="true" tabindex="-1"></a><span class="do">          BOT: Type: </span><span class="sc">#{</span>project<span class="at">.type</span><span class="sc">}</span></span>
<span id="cb7-65"><a href="#cb7-65" aria-hidden="true" tabindex="-1"></a><span class="do">        TEXT</span></span>
<span id="cb7-66"><a href="#cb7-66" aria-hidden="true" tabindex="-1"></a><span class="do">      end</span></span>
<span id="cb7-67"><a href="#cb7-67" aria-hidden="true" tabindex="-1"></a><span class="do">    end</span></span>
<span id="cb7-68"><a href="#cb7-68" aria-hidden="true" tabindex="-1"></a><span class="do">  end</span></span>
<span id="cb7-69"><a href="#cb7-69" aria-hidden="true" tabindex="-1"></a><span class="do">end</span></span></code></pre></div>
<p>Unlike classic approach with integration testing, this one does not require any network communication with external world and is executed extremely fast:</p>
<pre class="console"><code>$ rspec
.......................................

Finished in 0.08125 seconds (files took 0.45979 seconds to load)
39 examples, 0 failures</code></pre>
  </section>
</article>

  </main>

  <footer>
    Site generated by
    <a href="http://jaspervdj.be/hakyll">Hakyll</a>
  </footer>
</body>

</html>]]></description>
    <pubDate>Wed, 17 Mar 2021 00:00:00 UT</pubDate>
    <guid>https://maksar.github.io/posts/projects/2021-03-17-gitman.html</guid>
    <dc:creator>Shestakov Alex</dc:creator>
</item>
<item>
    <title>JIRA bot to automatically update fields values</title>
    <link>https://maksar.github.io/posts/projects/2021-03-13-personer.html</link>
    <description><![CDATA[<!doctype html>
<html lang="en">

<head>
  <meta charset="utf-8">
  <meta http-equiv="x-ua-compatible" content="ie=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Shestakov Alex Blog - JIRA bot to automatically update fields values</title>
  <link rel="stylesheet" href="../../css/default.css" />

  <script type="text/javascript" src="../../vendor/jquery/jquery-3.6.0.min.js"></script>
  <script type="text/javascript" src="../../vendor/fresco/js/fresco.min.js"></script>
  <link rel="stylesheet" type="text/css" href="../../vendor/fresco/css/fresco.css" />

  <link rel="stylesheet" href="../../vendor/highlight/styles/atom-one-dark.min.css">
  <script src="../../vendor/highlight/highlight.min.js"></script>
  <script src="../../vendor/highlight/languages/haskell.min.js"></script>
  <script src="../../vendor/highlight/languages/ruby.min.js"></script>
  <script src="../../vendor/highlight/languages/shell.min.js"></script>
  <script src="../../vendor/highlight/languages/kotlin.min.js"></script>
  <script src="../../vendor/highlight/languages/javascript.min.js"></script>
  <script>hljs.highlightAll();</script>
</head>

<body>
  <header>
    <div class="logo">
      <a href="../../">Shestakov Alex</a>
    </div>
    <nav>
      &amp;<a href="../../languages/english.html">english</a> &amp;<a href="../../languages/russian.html">russian</a>
      @<a href="../../categories/code.html">code</a> @<a href="../../categories/projects.html">projects</a>
      <a href="../../about.html">About</a>
    </nav>
  </header>

  <main role="main">
    <h1>JIRA bot to automatically update fields values</h1>
    <article>
  <section class="header">
    March 13, 2021  @<a href="../../categories/projects.html">projects</a> #<a href="../../tags/english.html">english</a> #<a href="../../tags/kotlin.html">kotlin</a> #<a href="../../tags/JIRA.html">JIRA</a>
  </section>
  <section>
    <p>Personer is a small Kotlin bot, which is started by systemd timer (thanks nixos) and performs a read-update cycle over our project cards (custom JIRA issues). It features modern Kotlin’s Flow framework</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode kotlin"><code class="sourceCode kotlin"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="at">@FlowPreview</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>suspend <span class="kw">fun</span> <span class="fu">projectCards</span><span class="op">(</span><span class="va">fields</span><span class="op">:</span> <span class="dt">Set</span>&lt;<span class="va">String</span>&gt;<span class="op">)</span> <span class="op">=</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>    search<span class="op">(</span><span class="dv">0</span><span class="op">,</span> <span class="dv">1</span><span class="op">).</span>total<span class="op">.</span>let <span class="op">{</span> total <span class="op">-&gt;</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>        rangeUntil<span class="op">(</span><span class="dv">0</span><span class="op">,</span> total<span class="op">,</span> env<span class="op">[</span>PERSONER_PAGE_SIZE<span class="op">]).</span>asFlow<span class="op">()</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>            <span class="op">.</span>concurrentFlatMap <span class="op">{</span> start <span class="op">-&gt;</span> search<span class="op">(</span>start<span class="op">,</span> env<span class="op">[</span>PERSONER_PAGE_SIZE<span class="op">],</span> fields<span class="op">).</span>issues <span class="op">}</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>            <span class="op">.</span>toList<span class="op">()</span></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span></code></pre></div>
<p>which allows concurrently <code>flatMap</code>-ing a flow (fancy name of the lazy stream) with retrying abilities on errors.</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode kotlin"><code class="sourceCode kotlin"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="at">@FlowPreview</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="kw">fun</span> <span class="op">&lt;</span><span class="dt">T</span>, <span class="dt">R</span><span class="op">&gt;</span> <span class="fu">Flow</span><span class="op">&lt;</span><span class="dt">T</span><span class="op">&gt;.</span><span class="fu">concurrentFlatMap</span><span class="op">(</span><span class="va">transform</span><span class="op">:</span> <span class="dt">suspend</span> (<span class="va">T</span><span class="op">)</span> -&gt; <span class="fu">Iterable</span><span class="op">&lt;</span><span class="dt">R</span><span class="op">&gt;</span>) <span class="op">=</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>    flatMapMerge <span class="op">{</span> value <span class="op">-&gt;</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>        flow <span class="op">{</span> emitAll<span class="op">(</span>transform<span class="op">(</span>value<span class="op">).</span>asFlow<span class="op">())</span> <span class="op">}</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>    <span class="op">}.</span>retryOnTimeouts<span class="op">()</span></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a><span class="kw">fun</span> <span class="op">&lt;</span><span class="dt">T</span><span class="op">&gt;</span> <span class="fu">Flow</span><span class="op">&lt;</span><span class="dt">T</span><span class="op">&gt;.</span><span class="fu">retryOnTimeouts</span><span class="op">()</span> <span class="op">=</span></span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a>    <span class="kw">this</span><span class="op">.</span>flowOn<span class="op">(</span>Dispatchers<span class="op">.</span>IO<span class="op">)</span></span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a>        <span class="op">.</span>retry <span class="op">{</span> cause <span class="op">-&gt;</span> generateSequence<span class="op">(</span>cause<span class="op">,</span> Throwable<span class="op">::</span>cause<span class="op">).</span>any <span class="op">{</span> it <span class="kw">is</span> SocketTimeoutException <span class="op">}</span> <span class="op">}</span></span></code></pre></div>
<p>Tons of boilerplate code above that – is just the consequence of having to inject a <a href="https://github.com/maksar/personer/blob/master/src/main/kotlin/com/itransition/personer/Jira.kt#L114">custom parser</a> inside the library, which doesn’t allow that natively.</p>
  </section>
</article>

  </main>

  <footer>
    Site generated by
    <a href="http://jaspervdj.be/hakyll">Hakyll</a>
  </footer>
</body>

</html>]]></description>
    <pubDate>Sat, 13 Mar 2021 00:00:00 UT</pubDate>
    <guid>https://maksar.github.io/posts/projects/2021-03-13-personer.html</guid>
    <dc:creator>Shestakov Alex</dc:creator>
</item>
<item>
    <title>Power Automate for low-code services</title>
    <link>https://maksar.github.io/posts/projects/2021-03-09-milestones.html</link>
    <description><![CDATA[<!doctype html>
<html lang="en">

<head>
  <meta charset="utf-8">
  <meta http-equiv="x-ua-compatible" content="ie=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Shestakov Alex Blog - Power Automate for low-code services</title>
  <link rel="stylesheet" href="../../css/default.css" />

  <script type="text/javascript" src="../../vendor/jquery/jquery-3.6.0.min.js"></script>
  <script type="text/javascript" src="../../vendor/fresco/js/fresco.min.js"></script>
  <link rel="stylesheet" type="text/css" href="../../vendor/fresco/css/fresco.css" />

  <link rel="stylesheet" href="../../vendor/highlight/styles/atom-one-dark.min.css">
  <script src="../../vendor/highlight/highlight.min.js"></script>
  <script src="../../vendor/highlight/languages/haskell.min.js"></script>
  <script src="../../vendor/highlight/languages/ruby.min.js"></script>
  <script src="../../vendor/highlight/languages/shell.min.js"></script>
  <script src="../../vendor/highlight/languages/kotlin.min.js"></script>
  <script src="../../vendor/highlight/languages/javascript.min.js"></script>
  <script>hljs.highlightAll();</script>
</head>

<body>
  <header>
    <div class="logo">
      <a href="../../">Shestakov Alex</a>
    </div>
    <nav>
      &amp;<a href="../../languages/english.html">english</a> &amp;<a href="../../languages/russian.html">russian</a>
      @<a href="../../categories/code.html">code</a> @<a href="../../categories/projects.html">projects</a>
      <a href="../../about.html">About</a>
    </nav>
  </header>

  <main role="main">
    <h1>Power Automate for low-code services</h1>
    <article>
  <section class="header">
    March  9, 2021  @<a href="../../categories/projects.html">projects</a> #<a href="../../tags/russian.html">russian</a> #<a href="../../tags/Office%20365.html">Office 365</a> #<a href="../../tags/kotlin.html">kotlin</a>
  </section>
  <section>
    <p>Хочу рассказать о Low Code Platform, которой пришлось воспользоваться буквально на днях – Power Automate от Microsoft. Мне, как разработчику ПО, никогда не нравились подобные системы для “программирования мышкой”. Казалось, что с их помощью сложно добиться хоть сколько-нибудь приемлемого результата. Причин несколько:</p>
<ul>
<li>бесишься из-за неудобности и глючности “интефрейса” – хочется бросить и переключиться в любимый текстовый редактор и написать там “пару строчек кода” вместо накликивания условий и выбора элементов из списка</li>
<li>сетуешь на ограничения платформы, из-за невозможности смоделировать простейшие операции: нельзя “обновить” значение переменной используя текущее значение, такая вот борьба с рекурсией</li>
<li>удивляешься тому как тебе придется поддреживать настроенный “бизнес процесс” – буквально смотря на его блок-схему, отвыкли от такого программисты еще со школьных времен.</li>
</ul>
<p>Прорвавшись через начальную пелену отрицания, удалось посмотреть на все с другой стороны – постойте-ка, это же Low Code Platform – она и не предназначена для использования программистами… Все вдруг становится на свои места, если представить себя бизнес-аналитиком или менеджером. Суть алгоритмов отраженных в визуализированном виде – проста и понятна, знаний программирования для моделирования бизнес процессов не требуется, везде подсказки и автодополнение – красота!</p>
<p>Рассмотрим три случая использования – один без кода совсем, два остальных – с небольшим его количеством.</p>
<h2 id="автоматизация-создания-проектных-карт">Автоматизация создания проектных карт</h2>
<p>Решение “без кода” автоматизирует процесс сбора данных для создания новой проектной карты. Для этого в Microsoft Forms создан <a href="https://forms.office.com/Pages/ResponsePage.aspx?id=y5lyFjrnCEylee896o1YNaHtV6z8fXhPi05De-ZazKFUMUNROUU5TUdFWDFUQ0k1VlQzWlE1MTlPOCQlQCN0PWcu">опросник</a>, подобный тому что используется в ежегодном корпоративном опросе. Power Automate реагирует на заполнение формы и запускает первый сценарий, в процессе которого из полей формы формируется <a href="../../images/milestones/12.jpg" class="fresco" data-fresco-options="ui: 'inside', thumbnails: false">письмо</a>. Power Automate услужливо подсказывает, что есть переменные “Responders’ email” (так как в форме мы указали, что заполнять ее могут тоьлко сотрудники организации), позволяет <a href="../../images/milestones/13.jpg" class="fresco" data-fresco-options="ui: 'inside', thumbnails: false">накликивать</a> другие поля из формы (причем редактирование полей в форме не ломает сценарий – на самом деле используются GUID-ы). Если сильно хочется – можно и <a href="../../images/milestones/6.jpg" class="fresco" data-fresco-options="ui: 'inside', thumbnails: false">выраженьице</a> составить несложное – с таким справится человек и без навыков программирования.</p>
<p>Следующий <a href="../../images/milestones/4.jpg" class="fresco" data-fresco-options="ui: 'inside', thumbnails: false">сценарий</a> реагирует на отосланное письмо и <a href="../../images/milestones/11.jpg" class="fresco" data-fresco-options="ui: 'inside', thumbnails: false">создает</a> задачи со встречами. Решение не концентрировать все шаги в одном сценарии осознанное - хочется, чтобы бизнес процесс мог начаться не только с заполнения формы, но и с получения письма от живого человека. Людям без навыков программирования обязательно понравятся возможности отладки – на каждом шаге <a href="../../images/milestones/18.jpg" class="fresco" data-fresco-options="ui: 'inside', thumbnails: false">видно</a> данные на входе и выходе, время работы и даже циклы удобно <a href="../../images/milestones/3.jpg" class="fresco" data-fresco-options="ui: 'inside', thumbnails: false">пролистывать</a>.</p>
<h2 id="обновление-размеров-проектов">Обновление размеров проектов</h2>
<p>Второе и третье использование Power Automate тоже касается проектных карт.</p>
<p>В ходе работы CTO/PMO Office, мы мониторим состояние проектов. Хочется концентрировать больше внимания на стартующих, ранжируя проекты на основании даты старта и количества трудозатрат. Существует <a href="../../images/milestones/9.jpg" class="fresco" data-fresco-options="ui: 'inside', thumbnails: false">табличка</a> в Office 365, где мы ведем список дел, строим планы и т.д. В ней отмечено количество трудозатрат по данным проектной карты. Но время-то идет, проекты растут и развиваются, каждый раз сверяться с данными из JIRA – устанет рука. Мы создали Power Automate flow, который может реагировать на получение HTTP запроса извне. Сам endpoint создается автоматически, вам остается задать json schema входящих данных и настроить их использование. На <a href="../../images/milestones/15.jpg" class="fresco" data-fresco-options="ui: 'inside', thumbnails: false">скриншоте</a> видно, что на входе – список названий проектов с их трудозатратами, которые используются для <a href="../../images/milestones/7.jpg" class="fresco" data-fresco-options="ui: 'inside', thumbnails: false">обновления</a> строк таблицы. Endpoint есть, дело за малым – настроить еще один flow, запускающийся по <a href="../../images/milestones/17.jpg" class="fresco" data-fresco-options="ui: 'inside', thumbnails: false">расписанию</a> (можно стартовать и вручную), который <a href="../../images/milestones/1.jpg" class="fresco" data-fresco-options="ui: 'inside', thumbnails: false">собирает</a> все названия проектов из Excel таблицы и <a href="../../images/milestones/16.jpg" class="fresco" data-fresco-options="ui: 'inside', thumbnails: false">дергает</a> простенький микросервис на kotlin.</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode kotlin"><code class="sourceCode kotlin"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a>projectCards<span class="op">(</span>env<span class="op">[</span>TOTAL_EFFORTS_FIELD<span class="op">]).</span>associateBy <span class="op">{</span> it<span class="op">.</span>summary <span class="op">}.</span>let <span class="op">{</span> mapping <span class="op">-&gt;</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>  HttpClient<span class="op">(</span>ClientCIO<span class="op">)</span> <span class="op">{</span> install<span class="op">(</span>JsonFeature<span class="op">)</span> <span class="op">}</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>    <span class="op">.</span>post<span class="op">&lt;</span>Any<span class="op">&gt;(</span>env<span class="op">[</span>CALLBACK_URL<span class="op">])</span> <span class="op">{</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>    body <span class="op">=</span> call<span class="op">.</span>receive<span class="op">&lt;</span>Array<span class="op">&lt;</span>Summary<span class="op">&gt;&gt;()</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>      <span class="op">.</span>sortedBy <span class="op">{</span> it<span class="op">.</span>summary <span class="op">}.</span>mapNotNull <span class="op">{</span> project <span class="op">-&gt;</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>        mapping<span class="op">[</span>project<span class="op">.</span>summary<span class="op">]?.</span>getField<span class="op">(</span>env<span class="op">[</span>TOTAL_EFFORTS_FIELD<span class="op">])?.</span>value<span class="op">?.</span>let <span class="op">{</span> efforts <span class="op">-&gt;</span></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a>          Effort<span class="op">(</span>project<span class="op">.</span>summary<span class="op">,</span> <span class="op">(</span>efforts <span class="kw">as</span> <span class="kw">Double</span> <span class="op">/</span> <span class="dv">168</span><span class="op">).</span>roundTo<span class="op">(</span><span class="dv">2</span><span class="op">))</span></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a>      <span class="op">}</span></span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span></span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>Таким образом, каждый день в Excel файле будут свежие данные о “размере” проекта.</p>
<h2 id="работа-с-качеством-данных-в-проектных-картах">Работа с качеством данных в проектных картах</h2>
<p>В проектных картах сменился формат поля Customer region. Теперь оно с автодополнением, стандартизированного формата. Но всего не предусмотришь, кто-то может и адрес в него вписать. Как же блюсти качество данных, реагировать чтоли на почтовые нотификации об изменении значения этого поля от джиры?.. Решением стал <a href="../../images/milestones/2.jpg" class="fresco" data-fresco-options="ui: 'inside', thumbnails: false">скрипт</a> автоматизации в Excel 365, который “ходит” за данными, добавляет их в <a href="../../images/milestones/8.jpg" class="fresco" data-fresco-options="ui: 'inside', thumbnails: false">таблицу</a>, строит <a href="../../images/milestones/14.jpg" class="fresco" data-fresco-options="ui: 'inside', thumbnails: false">Pivot table</a> и даже добавляет <a href="../../images/milestones/10.jpg" class="fresco" data-fresco-options="ui: 'inside', thumbnails: false">Pie chart</a>. Даже тут Microsoft делает все возможное для того, чтобы такой автоматизацией могли пользоваться не только программисты – крутой <a href="../../images/milestones/5.jpg" class="fresco" data-fresco-options="ui: 'inside', thumbnails: false">intelli-sense</a>, возможность записи макросов и просмотр получившегося кода, консоль отладки. За данными скрипт ходит в небольшой микросервис на kotlin.</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode kotlin"><code class="sourceCode kotlin"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a>projectCards<span class="op">(</span>env<span class="op">[</span>CUSTOMER_REGION_FIELD<span class="op">]).</span>let <span class="op">{</span> cards <span class="op">-&gt;</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>  <span class="kw">val</span> <span class="va">regions</span> <span class="op">=</span> cards<span class="op">.</span>mapNotNull <span class="op">{</span> it<span class="op">.</span>getField<span class="op">(</span>env<span class="op">[</span>CUSTOMER_REGION_FIELD<span class="op">])?.</span>value<span class="op">?.</span>toString<span class="op">()</span> <span class="op">}</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>  <span class="kw">val</span> <span class="va">map</span> <span class="op">=</span> regions<span class="op">.</span>groupingBy <span class="op">{</span> it <span class="op">}.</span>eachCount<span class="op">()</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>  <span class="kw">val</span> <span class="va">size</span> <span class="op">=</span> regions<span class="op">.</span>maxOf <span class="op">{</span> it<span class="op">.</span>split<span class="op">(</span><span class="st">&quot;, &quot;</span><span class="op">).</span>size <span class="op">}</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>  call<span class="op">.</span>respond<span class="op">(</span>Statistics<span class="op">(</span>size<span class="op">,</span> regions<span class="op">.</span>distinct<span class="op">().</span>map <span class="op">{</span> region <span class="op">-&gt;</span></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>      Region<span class="op">(</span>region<span class="op">.</span>split<span class="op">(</span><span class="st">&quot;, &quot;</span><span class="op">).</span>plus<span class="op">(</span>generateSequence <span class="op">{</span> <span class="st">&quot;&quot;</span> <span class="op">}.</span>take<span class="op">(</span><span class="dv">10</span><span class="op">)).</span>take<span class="op">(</span>size<span class="op">),</span> map<span class="op">.</span>getValue<span class="op">(</span>region<span class="op">))</span></span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a>  <span class="op">}))</span></span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>Да, решение “наколеночное”, масшабировать его будет затруднительно. Однако прелесть в том, что для быстрой автоматизации для “проверки идеи” Power BI не нужен, достаточно и такого “наколенника”.</p>
<h2 id="выводы">Выводы</h2>
<p>Смело могу советовать Power Automate как средство для автоматизации мелких процессов как внутри проекта, так и на уровне компании. Vendor-lock максимальный, но мы же не программную систему на нем строим, а только решаем мелкие прикладные задачи. Возможности всей <a href="https://powerplatform.microsoft.com/en-us/">Power Platform</a> сильно шире скриншотов из этой заметки. Вот классная <a href="https://habr.com/ru/post/520926/">статья</a> на эту тему.</p>
  </section>
</article>

  </main>

  <footer>
    Site generated by
    <a href="http://jaspervdj.be/hakyll">Hakyll</a>
  </footer>
</body>

</html>]]></description>
    <pubDate>Tue, 09 Mar 2021 00:00:00 UT</pubDate>
    <guid>https://maksar.github.io/posts/projects/2021-03-09-milestones.html</guid>
    <dc:creator>Shestakov Alex</dc:creator>
</item>
<item>
    <title>FP effects systems vs OOP interfaces</title>
    <link>https://maksar.github.io/posts/code/2021-02-04-effect-systems.html</link>
    <description><![CDATA[<!doctype html>
<html lang="en">

<head>
  <meta charset="utf-8">
  <meta http-equiv="x-ua-compatible" content="ie=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Shestakov Alex Blog - FP effects systems vs OOP interfaces</title>
  <link rel="stylesheet" href="../../css/default.css" />

  <script type="text/javascript" src="../../vendor/jquery/jquery-3.6.0.min.js"></script>
  <script type="text/javascript" src="../../vendor/fresco/js/fresco.min.js"></script>
  <link rel="stylesheet" type="text/css" href="../../vendor/fresco/css/fresco.css" />

  <link rel="stylesheet" href="../../vendor/highlight/styles/atom-one-dark.min.css">
  <script src="../../vendor/highlight/highlight.min.js"></script>
  <script src="../../vendor/highlight/languages/haskell.min.js"></script>
  <script src="../../vendor/highlight/languages/ruby.min.js"></script>
  <script src="../../vendor/highlight/languages/shell.min.js"></script>
  <script src="../../vendor/highlight/languages/kotlin.min.js"></script>
  <script src="../../vendor/highlight/languages/javascript.min.js"></script>
  <script>hljs.highlightAll();</script>
</head>

<body>
  <header>
    <div class="logo">
      <a href="../../">Shestakov Alex</a>
    </div>
    <nav>
      &amp;<a href="../../languages/english.html">english</a> &amp;<a href="../../languages/russian.html">russian</a>
      @<a href="../../categories/code.html">code</a> @<a href="../../categories/projects.html">projects</a>
      <a href="../../about.html">About</a>
    </nav>
  </header>

  <main role="main">
    <h1>FP effects systems vs OOP interfaces</h1>
    <article>
  <section class="header">
    February  4, 2021  @<a href="../../categories/code.html">code</a> #<a href="../../tags/russian.html">russian</a> #<a href="../../tags/haskell.html">haskell</a> #<a href="../../tags/polysemy.html">polysemy</a>
  </section>
  <section>
    <p>С большим опозданием, продолжаю цикл статей про <a href="https://itransition.workplace.com/chat/t/105678357661487">WP бота</a>. Ссылки на предыдущие части: <a href="https://itransition.workplace.com/groups/143641062970056/permalink/484712628862896/">1</a>, <a href="https://itransition.workplace.com/groups/143641062970056/permalink/486660242001468/">2</a> <a href="https://itransition.workplace.com/groups/143641062970056/permalink/491875731479919/">3</a> и <a href="https://itransition.workplace.com/groups/1394518670594144/permalink/3170796096299717/">4</a>. Сегодня, впрочем как обычно, речь пойдет про очедную функциональную дичь ;).</p>
<p>Столпом ООП является инкапсуляция (каждый раз тянет по английски это слово с i начать), которая про “сокрытие реализации”. Даже самому начинающему программисту известно, что достигается инкапсуляция в mainstream языках программирования при помощи interface-ов. Я постараюсь показать совершенно иной способ инкапсуляции – экзистенциальные эффекты.</p>
<p>Что за абстракция такая – “эффект” и для чего нужна? Для понимания, давайте рассмотрим примитивную функцию для сложения двух чисел:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="kw">function</span> <span class="fu">add</span>(a<span class="op">:</span> Int<span class="op">,</span> b<span class="op">:</span> Int)<span class="op">:</span> Int {</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>  Logger<span class="op">.</span><span class="fu">debug</span>(<span class="st">&quot;${Time.current} - Adding numbers $a and $b.&quot;</span>)</span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>  <span class="cf">return</span> a <span class="op">+</span> b<span class="op">;</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>}</span></code></pre></div>
<p>Обычная функция – делает что и должна, да еще и записи в лог добавляет. Красота? С обывательской точки зрения с функцией все в порядке (возможные переполнения <code>Int</code> оставим за кадром). А вот с точки зрения компилятора – сплошное расстройство: вызов <code>add(2, 2)</code> невозможно вычислить и заменить на <code>4</code> на этапе сборки. Примерно так же на эту функцию смотрит и разработчик на Haskell – она просто “не может быть функцией”. Точнее для него – это и не функция вовсе (в математическом смысле) – она не просто возвращает результат, совершая операции над аргументами. Она еще записывает сообщение в лог, должна откуда-то взять текущее время. Вызывая ее в разное время она хоть и вернет один и тот же результат, но в логи будет записаны разные строки. Обычно в таких случаях говорят, что у функции есть “побочный эффект” (side effect).</p>
<p>Наличие side effect-ов в императивных ЯП – обычное дело. Ими удобно пользоваться не только чтобы логи писать, но и для других, не менее Эффектных вещей – <code>Thread.current</code>, <code>Time.now</code>, <code>println</code> в конце концов. Проблема в том, что за удобство приходится расплачиваться. Высока ли цена? В этом примере – не очень. Подумаешь, в логи будут сыпаться сообщения при запуске unit тестов, а сама функция будет выполняться в 1000 раз медленнее чем могла бы… Если это и станет проблемой – мы либо вставим проверку <code>if (debug)</code> либо подменим <code>Logger</code> на “ничего не делающую заглушку” при запуске тестов. Один вопрос – а как мы узнаем о том, что это нужно сделать, глядя на сигнатуру функции? В том-то и дело что “никак”… Наличие side effect-а никак не отражено в сигнатуре типа, но тем не менее добавляет в код несколько неявных зависимостей – работу с логами и чтение времени.</p>
<p>В ООП с проблемой принято бороться только одним способом (хоть он и может выглядеть по-разному на первый взгляд) – при помощи техники Dependency Injection.</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="kw">class</span> Calculator {</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>  @Autowired</span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>  val <span class="dt">logger</span><span class="op">:</span> Logger<span class="op">;</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>  <span class="kw">function</span> <span class="fu">add</span>(<span class="dt">a</span><span class="op">:</span> Int<span class="op">,</span> <span class="dt">b</span><span class="op">:</span> Int<span class="op">,</span> <span class="dt">calendar</span><span class="op">:</span> Calendar <span class="op">=</span> Time)<span class="op">:</span> Int {</span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>    logger<span class="op">.</span><span class="fu">debug</span>(<span class="st">&quot;${calendar.current} - Adding numbers $a and $b.&quot;</span>)</span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> a <span class="op">+</span> b<span class="op">;</span></span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a>  }</span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a>}</span></code></pre></div>
<p>В такую функцию действительно можно передать и “пустой” логгер и “константный, замороженный во времени календарь” и даже протестировать поведение side effect-а, ожидая что у логгера вызовется функция <code>debug</code> с аргументом-строкой, начинающейся на то, что вернет <code>current</code> из переданного календаря. Это ведь был всего-лишь примитивный пример, в реальных системах количество таких неявных зависимостей явно больше пальцев на прямых руках. Да и если подходить скурпулезно, то и до <a href="https://github.com/EnterpriseQualityCoding/FizzBuzzEnterpriseEdition">FizzBuzzEnterpriseEdition</a> недалеко…</p>
<p>Впрочем, в функциональном Haskell тоже можно писать примерно так:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="ot">add ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> <span class="dt">Int</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>add a b <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>  getCurrentTime <span class="op">&gt;&gt;=</span> \time <span class="ot">-&gt;</span> <span class="fu">putStrLn</span>(time <span class="op">&lt;&gt;</span> <span class="st">&quot; - Adding numbers&quot;</span> <span class="op">&lt;&gt;</span> intercalate <span class="st">&quot; and &quot;</span> [a, b])</span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>  <span class="fu">return</span> <span class="op">$</span> a <span class="op">+</span> b</span></code></pre></div>
<p>Обратите внимание, возвращаемый тип теперь не <code>Int</code>, а <code>IO Int</code>. Это “позволяет” внутри функции делать <em>что угодно</em> – хоть с лог писать, хоть по HTTP запросы слать. Работать с такой функцией все еще можно, но только из кода, который тоже “помечен” <code>IO</code>. Позволяя делать что угодно, <code>IO</code> как вирус заражает части программы, мешая пользоваться всеми преимуществами функционального подхода. Хотелось бы явно указывать – <code>add</code>, в качестве side effect-ов делает не <em>что угодно</em>, а только логгирование и работу со временем. Суть “эффектов” в этом и заключается – определить явно какие-то операции (влияющие или зависящие от “внешнего мира”) – обозвать их эффектами и использовать в сигнатуре функций. В этом случае можно будет совершенно четко видеть с какими именно эффектами функция работает (и ничего другого ей позволено не будет).</p>
<p>Тело функции никак не меняется, другой становится сигнатура типа:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="ot">add ::</span> (<span class="dt">Member</span> <span class="dt">TimeEffect</span> eff, <span class="dt">Member</span> <span class="dt">ConsoleEffect</span> eff) <span class="ot">=&gt;</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Effect</span> eff <span class="dt">Int</span></span></code></pre></div>
<p>Читать ее можно так: допустим в композитном эффекте <code>eff</code> содержатся два эффекта – <code>TimeEffect</code> и <code>ConsoleEffect</code>, тогда функция <code>add</code> – принимая два <code>Int</code>-а возвращает <code>Int</code>, но при этом может выполнять “работу со временем” и “печатать на консоль”. Посылать HTTP запросы ей не позволено, так как ни <code>TimeEffect</code> ни <code>ConsoleEffect</code> этого не позволяют. Их тоже определяет сам программист, например так:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">TimeEffect</span> m a <span class="kw">where</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a>  С<span class="ot">urrentTime ::</span> <span class="dt">TimeEffect</span> m <span class="dt">String</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a>makeEffect '<span class="dt">'TimeEffect</span></span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">ConsoleEffect</span> m a <span class="kw">where</span></span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a>  <span class="dt">PrintLn</span><span class="ot"> ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">ConsoleEffect</span> m ()</span>
<span id="cb5-8"><a href="#cb5-8" aria-hidden="true" tabindex="-1"></a>  <span class="dt">ReadLn</span><span class="ot"> ::</span> <span class="dt">ConsoleEffect</span> m <span class="dt">String</span></span>
<span id="cb5-9"><a href="#cb5-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-10"><a href="#cb5-10" aria-hidden="true" tabindex="-1"></a>makeEffect '<span class="dt">'ConsoleEffect</span></span></code></pre></div>
<p>Ну хорошо, вместо всепозволяющего <code>Int -&gt; Int -&gt; IO Int</code> мы теперь имеем более конкретизированное <code>(Member TimeEffect eff, Member ConsoleEffect eff) =&gt; Int -&gt; Int -&gt; Effect eff Int</code> (обратите внимание на сходство с возможной математической нотацией: <code>add :: Int -&gt; Int -&gt; Effect eff Int</code>, где <code>eff</code> такое, что истинны оба утверждения: <code>Member TimeEffect eff</code> и <code>Member ConsoleEffect eff</code>).</p>
<p>Комбинируя функции с явно определенными эффектами в одной программе (функции) – эффекты тоже объединяются:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="ot">greeting ::</span> <span class="dt">Member</span> <span class="dt">ConsoleEffect</span> eff <span class="ot">=&gt;</span> <span class="dt">Effect</span> eff ()</span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a>greeting <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a>  printLn(<span class="st">&quot;What is your name?&quot;</span>)</span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a>  name <span class="ot">&lt;-</span> <span class="fu">readLn</span></span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a>  printLn(<span class="st">&quot;Hello&quot;</span> <span class="op">&lt;&gt;</span> name)</span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-7"><a href="#cb6-7" aria-hidden="true" tabindex="-1"></a><span class="ot">measure ::</span> (<span class="dt">Memeber</span> <span class="dt">ConsoleEffect</span> actionEff, <span class="dt">Memeber</span> <span class="dt">TimeEffect</span> measureEff) <span class="ot">=&gt;</span> <span class="dt">Effect</span> actionEff a <span class="ot">-&gt;</span> <span class="dt">Effect</span> (measureEff <span class="op">:</span> actionEff) a</span>
<span id="cb6-8"><a href="#cb6-8" aria-hidden="true" tabindex="-1"></a>measure action <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb6-9"><a href="#cb6-9" aria-hidden="true" tabindex="-1"></a>  startTime <span class="ot">&lt;-</span> currentTime</span>
<span id="cb6-10"><a href="#cb6-10" aria-hidden="true" tabindex="-1"></a>  result <span class="ot">&lt;-</span> action</span>
<span id="cb6-11"><a href="#cb6-11" aria-hidden="true" tabindex="-1"></a>  endTime <span class="ot">&lt;-</span> currentTime</span>
<span id="cb6-12"><a href="#cb6-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-13"><a href="#cb6-13" aria-hidden="true" tabindex="-1"></a>  printLn <span class="op">$</span> <span class="st">&quot;Action took: &quot;</span> <span class="op">&lt;&gt;</span> endTime <span class="op">-</span> startTime <span class="op">&lt;&gt;</span> <span class="st">&quot; seconds&quot;</span></span>
<span id="cb6-14"><a href="#cb6-14" aria-hidden="true" tabindex="-1"></a>  <span class="fu">return</span> result</span>
<span id="cb6-15"><a href="#cb6-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-16"><a href="#cb6-16" aria-hidden="true" tabindex="-1"></a>measure<span class="ot"> greeting ::</span> (<span class="dt">Memeber</span> <span class="dt">ConsoleEffect</span> eff, <span class="dt">Memeber</span> <span class="dt">TimeEffect</span> eff) <span class="ot">=&gt;</span> <span class="dt">Effect</span> eff ()</span></code></pre></div>
<p>По сути, мы создаем не последовательность инструкций, а сложную структуру данных – дерево последовательности вызовов и callback-ов. Дело за малым – интерпретировать (схлопнуть, вычислить) это дерево до получения единственного значения. Прелесть подхода с эффектами в том, что самостоятельно интерпретатор для дерева писать не приходится. Нужно всего-лишь “объяснить” что делать с тем или иным эффектом.</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="ot">runConsole ::</span> <span class="dt">Member</span> (<span class="dt">Embed</span> <span class="dt">IO</span>) r <span class="ot">=&gt;</span> <span class="dt">InterpreterFor</span> <span class="dt">ConsoleEffect</span> r</span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a>runConsole <span class="ot">=</span> interpret <span class="op">$</span> \<span class="kw">case</span></span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a>  <span class="dt">PrintLn</span> string <span class="ot">-&gt;</span> System.IO.putStrLn string</span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a>  <span class="dt">ReadLn</span> <span class="ot">-&gt;</span> System.IO.getLine</span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-6"><a href="#cb7-6" aria-hidden="true" tabindex="-1"></a><span class="ot">runTime ::</span> <span class="dt">Member</span> (<span class="dt">Embed</span> <span class="dt">IO</span>) r <span class="ot">=&gt;</span> <span class="dt">InterpreterFor</span> <span class="dt">TimeEffect</span> r</span>
<span id="cb7-7"><a href="#cb7-7" aria-hidden="true" tabindex="-1"></a>runTime <span class="ot">=</span> interpret <span class="op">$</span> \<span class="kw">case</span></span>
<span id="cb7-8"><a href="#cb7-8" aria-hidden="true" tabindex="-1"></a>  СurrentTime <span class="ot">-&gt;</span> Data.Time.Clock.getCurrentTime</span></code></pre></div>
<p>Итоговый интерпретатор, которым можно выполнить всю программу (именно он будет использоваться в main), комбинируют из индивидуальных:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a>interpreter <span class="ot">=</span> runIO <span class="op">.</span> runTime <span class="op">.</span> runConsole</span></code></pre></div>
<p>Применив получившийся интерпретатор <code>interpreter</code> к программе <code>measure greeting</code>, получим:</p>
<pre class="console"><code>=&gt; What is your name?
&lt;= Alex
=&gt; Hello Alex
=&gt; Action took: 5 seconds</code></pre>
<p>Для целей тестирования функции <code>greeting</code> можно написать специальный интерпретатор, который по <code>readLn</code> всегда возвращает нужную нам строку, а <code>printLn</code> постоянно добавляет к аккумулятору переданную ему строку. Но создавать такие интерпретаторы – на наш путь. Мы воспользуемся готовеньким и реализуем эффект <code>ConsoleEffect</code> в терминах двух других библиотечных эффектов – <code>Reader</code> и <code>Writer</code>. В этом случае можно будет воспользоваться уже готовыми интерпретаторами для них:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a><span class="ot">fakeInterpreter ::</span> <span class="dt">Effect</span> <span class="dt">ConsoleEffect</span> a <span class="ot">-&gt;</span> <span class="dt">Effect</span> (<span class="dt">Writer</span> <span class="dt">String</span> <span class="op">:</span> <span class="dt">Reader</span> <span class="dt">String</span>) a</span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a>fakeInterpreter <span class="ot">=</span> reinterpret \<span class="kw">case</span></span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true" tabindex="-1"></a>  <span class="dt">PrintLn</span> string <span class="ot">-&gt;</span> write string</span>
<span id="cb10-4"><a href="#cb10-4" aria-hidden="true" tabindex="-1"></a>  <span class="dt">ReadLn</span> <span class="ot">-&gt;</span> ask</span></code></pre></div>
<p>Была программа с side effect-ом <code>ConsoleEffect</code>, а стала программой для работы с эффектами <code>Reader String</code> и <code>Writer String</code> (про то почему reader и writer эффекты – можно и отдельную статью сделать). Выполнить ее можно получившимся “чистым” (без всяких <code>IO</code> и <code>Effect</code>) интерпретатором:</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a><span class="ot">pureGreeter ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> [<span class="dt">String</span>]</span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true" tabindex="-1"></a>pureGreeter name <span class="ot">=</span> intepret greeter</span>
<span id="cb11-3"><a href="#cb11-3" aria-hidden="true" tabindex="-1"></a>  <span class="kw">where</span></span>
<span id="cb11-4"><a href="#cb11-4" aria-hidden="true" tabindex="-1"></a>    intepret <span class="ot">=</span> run <span class="op">.</span> runWriter <span class="op">.</span> runReader name <span class="op">.</span> fakeInterpreter</span></code></pre></div>
<p>Тестировать такую функцию элементарно – передаешь имя на вход, получаешь массив строк на выходе – сравниваешь с ожидаемым.</p>
<p>Программирование “на эффектах” – во многом схоже с программированием “на интерфейсах” из объектно-ориентированного программирования. Выделяются абстракции, которые можно в последствии подменить (в целях тестирования или другого полиморфизма). В обоих случаях ядро программы представляет собой ответ на “что делать”, а на “как делать” отвечает самая внешняя часть – чем ближе к main, тем <a href="https://www.destroyallsoftware.com/screencasts/catalog/functional-core-imperative-shell">лучше</a>. В случае ООП этим занимается DI фреймворк – регистрирует при старте программы все реализации интерфейсов, внедряет зависимости туда, где они требуются и запускает исполнение основной программы.</p>
<p>Вроде все “так же”, зачем тогда весь этот функциональные приседания? Да, на первый взгляд отличий не так много. Но задумайтесь – ваша программа перестала быть просто программой, она стала данными, выстроенным в памяти деревом вызовов, сформулированным в терминах выбранных вами эффектов. Это ведь можно как-то использовать…</p>
<p>Например для интроспекции – можно пройтись по по этой структуре и чего-нибудь туда добавить – трассировку, скажем:</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true" tabindex="-1"></a><span class="ot">logConsole ::</span> <span class="dt">Member</span> <span class="dt">ConsoleEffect</span> eff <span class="ot">=&gt;</span> <span class="dt">Effect</span> eff a <span class="ot">-&gt;</span> <span class="dt">Effect</span> (eff <span class="op">:</span> <span class="dt">Trace</span>) a</span>
<span id="cb12-2"><a href="#cb12-2" aria-hidden="true" tabindex="-1"></a>logConsole <span class="ot">=</span> intercept <span class="op">$</span> \<span class="kw">case</span></span>
<span id="cb12-3"><a href="#cb12-3" aria-hidden="true" tabindex="-1"></a>  <span class="dt">PrintLn</span> string <span class="ot">-&gt;</span> <span class="kw">do</span></span>
<span id="cb12-4"><a href="#cb12-4" aria-hidden="true" tabindex="-1"></a>    trace <span class="op">$</span> <span class="fu">unwords</span> [<span class="st">&quot;Going to print&quot;</span>, <span class="fu">length</span> string, <span class="st">&quot;characters&quot;</span>]</span>
<span id="cb12-5"><a href="#cb12-5" aria-hidden="true" tabindex="-1"></a>    printLn string</span>
<span id="cb12-6"><a href="#cb12-6" aria-hidden="true" tabindex="-1"></a>  <span class="dt">ReadLn</span> <span class="ot">-&gt;</span> <span class="kw">do</span></span>
<span id="cb12-7"><a href="#cb12-7" aria-hidden="true" tabindex="-1"></a>    trace <span class="op">$</span> <span class="fu">unwords</span> [<span class="st">&quot;Going to read from a console&quot;</span>]</span>
<span id="cb12-8"><a href="#cb12-8" aria-hidden="true" tabindex="-1"></a>    result <span class="ot">&lt;-</span> <span class="fu">readLn</span></span>
<span id="cb12-9"><a href="#cb12-9" aria-hidden="true" tabindex="-1"></a>    trace <span class="op">$</span> <span class="fu">unwords</span> [<span class="st">&quot;Successfully read&quot;</span>, <span class="fu">length</span> result, <span class="st">&quot;from a console&quot;</span>]</span>
<span id="cb12-10"><a href="#cb12-10" aria-hidden="true" tabindex="-1"></a>    <span class="fu">return</span> result</span></code></pre></div>
<p>Или время заморозить, как в мультике:</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true" tabindex="-1"></a><span class="ot">fronzen ::</span> <span class="dt">Member</span> <span class="dt">TimeEffect</span> eff <span class="ot">=&gt;</span> <span class="dt">Time</span> <span class="ot">-&gt;</span> <span class="dt">Effect</span> eff a <span class="ot">-&gt;</span> <span class="dt">Effect</span> (eff <span class="op">:</span> <span class="dt">Trace</span>) a</span>
<span id="cb13-2"><a href="#cb13-2" aria-hidden="true" tabindex="-1"></a>fronzen instant <span class="ot">=</span> intercept <span class="op">$</span> <span class="fu">const</span> <span class="op">$</span> <span class="fu">pure</span> instant</span></code></pre></div>
<p>Кстати, а вы заметили в примерах множество полей с навешанными на них Autowired аннотациями или может быть десятки аргументов в конструкторах классов? Прелесть в том, что они оказываются не нужны – роль DI framework-а играет простая <a href="https://git.itransition.com/projects/IA/repos/ldap-bot/browse/src/Server/Hook.hs#32">композиция функций</a>. Чуть не забыл про <a href>тесты</a> упомянуть – благодаря тому, что все тестовые интерпретаторы не работают с <code>IO</code> – <a href="https://asciinema.org/a/389000">выполняются</a> они довольно быстро:</p>
<pre class="console"><code>Running 1 test suites...
Test suite ldap-bot-test: RUNNING...

Finished in 0.0266 seconds
66 examples, 0 failures</code></pre>
  </section>
</article>

  </main>

  <footer>
    Site generated by
    <a href="http://jaspervdj.be/hakyll">Hakyll</a>
  </footer>
</body>

</html>]]></description>
    <pubDate>Thu, 04 Feb 2021 00:00:00 UT</pubDate>
    <guid>https://maksar.github.io/posts/code/2021-02-04-effect-systems.html</guid>
    <dc:creator>Shestakov Alex</dc:creator>
</item>
<item>
    <title>Developers&#39; complaints</title>
    <link>https://maksar.github.io/posts/code/2021-01-20-developers-complaints.html</link>
    <description><![CDATA[<!doctype html>
<html lang="en">

<head>
  <meta charset="utf-8">
  <meta http-equiv="x-ua-compatible" content="ie=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Shestakov Alex Blog - Developers' complaints</title>
  <link rel="stylesheet" href="../../css/default.css" />

  <script type="text/javascript" src="../../vendor/jquery/jquery-3.6.0.min.js"></script>
  <script type="text/javascript" src="../../vendor/fresco/js/fresco.min.js"></script>
  <link rel="stylesheet" type="text/css" href="../../vendor/fresco/css/fresco.css" />

  <link rel="stylesheet" href="../../vendor/highlight/styles/atom-one-dark.min.css">
  <script src="../../vendor/highlight/highlight.min.js"></script>
  <script src="../../vendor/highlight/languages/haskell.min.js"></script>
  <script src="../../vendor/highlight/languages/ruby.min.js"></script>
  <script src="../../vendor/highlight/languages/shell.min.js"></script>
  <script src="../../vendor/highlight/languages/kotlin.min.js"></script>
  <script src="../../vendor/highlight/languages/javascript.min.js"></script>
  <script>hljs.highlightAll();</script>
</head>

<body>
  <header>
    <div class="logo">
      <a href="../../">Shestakov Alex</a>
    </div>
    <nav>
      &amp;<a href="../../languages/english.html">english</a> &amp;<a href="../../languages/russian.html">russian</a>
      @<a href="../../categories/code.html">code</a> @<a href="../../categories/projects.html">projects</a>
      <a href="../../about.html">About</a>
    </nav>
  </header>

  <main role="main">
    <h1>Developers' complaints</h1>
    <article>
  <section class="header">
    January 20, 2021  @<a href="../../categories/code.html">code</a> #<a href="../../tags/russian.html">russian</a>
  </section>
  <section>
    <p>Про недовольства разработчиков Совсем недавно мы работали над списком улучшений для одного из проектов, которые собирались “предлагать” заказчику. В качестве предпосылки, имелся список замечаний от команды разработчиков. Есть мнение, что чистого “недовольства” проектом не бывает – это скорее кумулятивное понятие, которое либо озвучивают “только вслух” либо оформляют в виде “улучшений”. Попробуем разобраться в истинных причинах недовольства, рассмотрев список улучшений “от разработчиков”. Постараемся взглянуть на “недовольства” с двух сторон – со стороны разработчиков и со стороны менеджмента и/или заказчика. Ведь часто случается так, что одно и тоже выглядит совершенно по-разному. Первая группа замечаний - ведут разработку на AWS dev серверах - нет локально настроенного окружения и не планируют его делать касается “удобства” и “чувства продуктивности”. Инженерам критически важно иметь “быстрый отклик” или “короткий feedback cycle” в процессе работы. При необходимости “ждать” (либо из-за медленного соединения c сетью, либо из-за необходимости синхронизации файлов и/или данных) растет раздражение и формируется недовольство. Теряется чувство “я продуктивен”, нарастает недовольство собой как инженером, эффективно решающим задачу. Исходя из этого, разработчики часто отказываются работать на “удаленных” машинах, с подключением по RDP или TeamViewer. Хотя с точки зрения менеджмента – проблемы нет. Для управленца такой способ работы неотличим от “подумаешь, чуть более медленный компьютер, ничего страшного”. Постоянные задержки приводят к отвлечению/переключению внимания инженера, что влияет не только на скорость выполнения задач (исправления багов, доработки функционала), но и на количество допускаемых в процессе ошибок. Причем совершенно непропорционально: необходимость работы “через RDP”, который с точки зрения менеджмента медленнее локального окружения на 30% вполне может приводить к 3-х кратному увеличению сроков выполнения задач. Понимая это, менеджмент должен прилагать все возможные усилия к тому, чтобы снизить количество отвлечений инженеров, в том числе из-за отсутствия локального окружения, недостаточной производительности рабочего оборудования или скорости сетевого соединения. Вторая группа замечаний - неподдерживаемая версия языка - неподдерживаемый/устаревший фрeймворк - дублирующийся, закоментированный код - отсутствие единого стиля кодирования говорит о другом виде недовольства – необходимости работы с большим количеством legacy кода, устаревшими подходами и технологиями. Инженерам по разработке программного обеспечения свойственна тяга к постоянному обучению, обновлению собственных знаний и умений. И это отнюдь не следствие “склада ума”, а банальная необходимость. Если постоянно не стараться быть “на острие” технологий, версий компиляторов и языков – знания быстро устаревают и, как следствие, стоимость “на рынке” падает. Инженерам вовсе не хочется стать “неприменимым” на очередном собеседований из-за того, что последние несколько лет он/она трудились на проекте с не совсем современным технологическим стэком. С точки заказчика, несвоевременное обновление/поддержание с современном состоянии технологического стека может привести ко все более тяжелому и долгому поиску инженеров для работы над проектом. Более того, качество нанимаемых инженеров, согласных работать над таким проектом окажется ниже (количество предложений на рынке труда, пусть даже в рамках одной компании, велико). Таким образом, “модернизация” прежде всего выгодна заказчику и менеджменту, хоть на первый взгляд и кажется, что продиктована она лишь “недовольством” инженерного состава проекта. Третья группа замечаний - не используют менеджер пакетов - JS зависимости в репозитории - только часть стилей/изображений расположена в git-репозитории - другая часть подключается как mounted-раздел с другого серверах относится к трудностям в области “управления зависимостями”. Эти трудности схожи как с недовольством legacy кодом (отсутствует очевидный и быстрый способ “обновить” зависимость) так и непредвиденными задержками в разработке (вместо того, чтобы “обновить”, приходится заниматься “IT археологией” и пытаться встроить fix в старую версию зависимости, тем самым еще более затрудняя ее будущее обновление). Постоянное ощущение “латания дыр” отрицательно сказывается на мотивации инженеров, не позволяет им сфокусироваться на важных задачах, спотыкаясь на “используемая у нас старая версия библиотеки этого не поддерживает”. Причина, по которой своевременное обновление версий библиотек (языков, фреймворком, движков баз данных) “нужно” менеджменту и владельцу продукта отнюдь не в том, чтобы инженеры “чувствовали новизну”. Причина в том, чтобы пользоваться возможностями новых версий, не тратя драгоценное время на back-port-инг функций или латание уязвимостей безопасности. Правильное управление зависимостями позволяет пользоваться наработками других, значительно сокращая время на разработку и поддержку продукта; снижать количество ошибок, возникающих из-за несовместимости версий и т.д. Опасения Логичной реакцией заказчика (владельца продукта/системы) на предложения вида “давайте обновим, модернизируем, поменяем” являются опасения. Опасения того, изменение сложившегося status quo приведет к ошибкам в ПО, частичной неработоспособности, необходимости менять устоявшиеся процессы. Бизнес стремится быть консервативным (для противодействия этому эффекту даже существует отдельная должность – “директор по развитию бизнеса”) – с точки зрения business continuity – совершенно логичное решение. Однако долгий период стабильности в IT сфере – отнюдь не тоже самое что в, скажем, мебельном бизнесе. Модернизация для сохранения темпа работ необходима на постоянной основе, а не в виде закупки нового деревообрабатывающего оборудования раз в 10 лет. К сожалению, скорость “устаревания” в IT много выше, необходимо отыскивать компромисс между стремлением инженерного состава к инновациям и требованиям бизнеса по сохранению стабильности. Разумным считается выработка плана действий, который бы принимал во внимание опасения бизнеса, особенно в том случае, когда программный продукт уже является несколько устаревшим или разрабатывается при помощи/на базе устаревших технологий/библиотек/фреймворков. Ключевых рекомендаций для сохранения стабильности несколько: - строгое отделение “улучшательств” от “поступательного развития” - наличие плана Б в любой ситуации - итеративный, эволюционный подход к изменениям К примеру, естественным желанием технического лидера проекта на “неконсистентность форматирования” является действие “а давайте все унифицируем”. Суть в том, чтобы не поддаваться соблазну “натравить linter на всю кодовую базу и вкомитить”, пусть даже и кажется что это наименее инвазивным подходом (других разработчиков такое резкое изменение затронет в меньшей степени, ввиду его однократности) – это затруднит поиск авторов и причин написания того или иного участка кода (при поиске и решении каких-либо проблем). Ошибкой будет и внедрение политики “каждый применяет <em>правильное</em> форматирование к файлам, которых касается” – это приведет к тому, что будет невозможно отличить изменения кода “по сути” задачи от изменений “из-за форматирования”. Разумным компромиссом будет как раз гибридный подход, когда в рамках работы над задачей инженер все же делает изменения по “унификации форматирования”, но намеренно отделяет их от основных изменений, связанных с решаемой в данный момент задачей. В дополнение к этому, стоит помечать коммиты с linting-ом особым образом, чтобы любому члену команды при просмотре истории было очевидно – этот коммит не содержит никаких изменений поведения. Другим примером может служить обновление версии платформы (обновление версии языка и компилятора или платформы). Так как обычно проект не изобилует unit и интеграционными тестами, проверить работоспособность и корректность поведения после обновления – практически сложно. Ни программисты ни инженеры по контролю качества не способны дать гарантию того, что поведение системы не изменится. Соблюсти баланс между стремлением бизнеса к стабильности и необходимости модернизации в этом случае можно применив комбинацию эволюционного подхода и наличию запасного плана. Можно создать копию production окружения, провести обновление на нем и направить на него лишь небольшую часть траффика пользователей. Отслеживание возникающих ошибок (точнее их отсутсвие) за разумный промежуток времени послужит для бизнеса реальным свидетельством безопасности обновления. В случае же возникновения проблем, последствия окажутся во первых не велики (с новой версией работала небольшая часть пользователей), а во вторых – контролируемыми и предсказуемыми (инженеры могут заранее предопределить круг пользователей, направляемых на обновленную версию). Решение Каждое конкретное изменение, предлагаемое инженерами, следует рассматривать через призму определенного “недовольства”, которая может находить (или не находить) отражение в потребностях бизнеса. Конкретный план по улучшению определенного аспекта системы всегда должен формироваться в том числе исходя из потребности бизнеса в стабильности. Именно исходя из некоторого противоречия в стремлениях инженеров и бизнесменов рождается “здоровые” программные системы, которые программистам приятно поддерживать и развивать, а бизнесу – прогнозировать развитие и быть уверенным в надежности. Однобокость в принятии решений как раз и приводит к перекосу: потакание желанию инженеров бездумно “использовать все новое и современное” легко может привести к тому, что продукт так и не выйдет на рынок и никогда не начнет приносить коммерческой выгоды. Равно как и стремление “оставить все как есть” неизбежно приведет к застою и устаревания, что, в свою очередь, сильно затруднит как talent aquisition так и технологичность продукта в целом. Исходя из всего вышеизложенного, рекомендация заключается в том, чтобы по каждому из пунктов списка улучшений предлагаемых разработчиками иметь: - формальную оценку важности (с точки зрения impact-а на систему) - оценку сложности внедрения изменения (не в виде часов, а в виде возможных рисков с их перечислением) - перечень “выгод” для системы, инженеров и бизнеса - разработанный план итеративного внедрения и возможностей по “тестированию” и откату изменений Оформленные в таком виде proposal-ы никогда не стоит отвергать полностью, а лишь приоритизировать на основании мнения владельцев продукта (сформированного не только на основании “суждения” инженера, но на базе измеримых критериев и рисков, описанных в proposal-е). Работу над внедрением изменений можно планировать в либо в периоды “малой активности” либо другим подходящим к темпу проекта способом (не больше одного изменения в sprint-е). Совокупность всех описанных шагов можно назвать работой с техническим долгом (который на самом деле является техническим кредитом или займом, сложные проценты дают о себе знать…), необходимость которой индустрия давно не подвергает сомнению.</p>
  </section>
</article>

  </main>

  <footer>
    Site generated by
    <a href="http://jaspervdj.be/hakyll">Hakyll</a>
  </footer>
</body>

</html>]]></description>
    <pubDate>Wed, 20 Jan 2021 00:00:00 UT</pubDate>
    <guid>https://maksar.github.io/posts/code/2021-01-20-developers-complaints.html</guid>
    <dc:creator>Shestakov Alex</dc:creator>
</item>
<item>
    <title>Nixops deployment of all the bots and services</title>
    <link>https://maksar.github.io/posts/projects/2020-12-04-nitrax.html</link>
    <description><![CDATA[<!doctype html>
<html lang="en">

<head>
  <meta charset="utf-8">
  <meta http-equiv="x-ua-compatible" content="ie=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Shestakov Alex Blog - Nixops deployment of all the bots and services</title>
  <link rel="stylesheet" href="../../css/default.css" />

  <script type="text/javascript" src="../../vendor/jquery/jquery-3.6.0.min.js"></script>
  <script type="text/javascript" src="../../vendor/fresco/js/fresco.min.js"></script>
  <link rel="stylesheet" type="text/css" href="../../vendor/fresco/css/fresco.css" />

  <link rel="stylesheet" href="../../vendor/highlight/styles/atom-one-dark.min.css">
  <script src="../../vendor/highlight/highlight.min.js"></script>
  <script src="../../vendor/highlight/languages/haskell.min.js"></script>
  <script src="../../vendor/highlight/languages/ruby.min.js"></script>
  <script src="../../vendor/highlight/languages/shell.min.js"></script>
  <script src="../../vendor/highlight/languages/kotlin.min.js"></script>
  <script src="../../vendor/highlight/languages/javascript.min.js"></script>
  <script>hljs.highlightAll();</script>
</head>

<body>
  <header>
    <div class="logo">
      <a href="../../">Shestakov Alex</a>
    </div>
    <nav>
      &amp;<a href="../../languages/english.html">english</a> &amp;<a href="../../languages/russian.html">russian</a>
      @<a href="../../categories/code.html">code</a> @<a href="../../categories/projects.html">projects</a>
      <a href="../../about.html">About</a>
    </nav>
  </header>

  <main role="main">
    <h1>Nixops deployment of all the bots and services</h1>
    <article>
  <section class="header">
    December  4, 2020  @<a href="../../categories/projects.html">projects</a> #<a href="../../tags/english.html">english</a> #<a href="../../tags/NIX.html">NIX</a> #<a href="../../tags/nixops.html">nixops</a>
  </section>
  <section>
    <p>Nitrax (NIX + ITRAnsition, I suck at naming) is my <a href="https://github.com/maksar/nitrax/blob/master/fleet.nix">nixops configuration</a> to deploy bots and helpers. With this <a href="https://github.com/maksar/nitrax/blob/master/modules/certiplace.nix">service</a> I struggled the most, because of the way unixODBC drivers are working on MacOS and Linux. That is a python bot, which connects to MSSQL database (what a pain to use) to fetch data about recently earned certifications in a company, renders it in a picture and uploads to the intranet. Despite the fact python is well supported by nix2poetry, some tricks (disabling LTO) were needed to build mathplotlib library.</p>
  </section>
</article>

  </main>

  <footer>
    Site generated by
    <a href="http://jaspervdj.be/hakyll">Hakyll</a>
  </footer>
</body>

</html>]]></description>
    <pubDate>Fri, 04 Dec 2020 00:00:00 UT</pubDate>
    <guid>https://maksar.github.io/posts/projects/2020-12-04-nitrax.html</guid>
    <dc:creator>Shestakov Alex</dc:creator>
</item>
<item>
    <title>About passwords</title>
    <link>https://maksar.github.io/posts/code/2020-05-15-passwords.html</link>
    <description><![CDATA[<!doctype html>
<html lang="en">

<head>
  <meta charset="utf-8">
  <meta http-equiv="x-ua-compatible" content="ie=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Shestakov Alex Blog - About passwords</title>
  <link rel="stylesheet" href="../../css/default.css" />

  <script type="text/javascript" src="../../vendor/jquery/jquery-3.6.0.min.js"></script>
  <script type="text/javascript" src="../../vendor/fresco/js/fresco.min.js"></script>
  <link rel="stylesheet" type="text/css" href="../../vendor/fresco/css/fresco.css" />

  <link rel="stylesheet" href="../../vendor/highlight/styles/atom-one-dark.min.css">
  <script src="../../vendor/highlight/highlight.min.js"></script>
  <script src="../../vendor/highlight/languages/haskell.min.js"></script>
  <script src="../../vendor/highlight/languages/ruby.min.js"></script>
  <script src="../../vendor/highlight/languages/shell.min.js"></script>
  <script src="../../vendor/highlight/languages/kotlin.min.js"></script>
  <script src="../../vendor/highlight/languages/javascript.min.js"></script>
  <script>hljs.highlightAll();</script>
</head>

<body>
  <header>
    <div class="logo">
      <a href="../../">Shestakov Alex</a>
    </div>
    <nav>
      &amp;<a href="../../languages/english.html">english</a> &amp;<a href="../../languages/russian.html">russian</a>
      @<a href="../../categories/code.html">code</a> @<a href="../../categories/projects.html">projects</a>
      <a href="../../about.html">About</a>
    </nav>
  </header>

  <main role="main">
    <h1>About passwords</h1>
    <article>
  <section class="header">
    May 15, 2020  @<a href="../../categories/code.html">code</a> #<a href="../../tags/russian.html">russian</a>
  </section>
  <section>
    <p><img src="../../images/passwords/logo.jpg" class="center" /></p>
<p>Хранение паролей/токенов любого характера и толка в репозитории – плохая и опасная практика. Несмотря даже на то, что это информация может относиться к изолированному staging или даже локальному окружению. Даже если они “потом будут встроены в итоговый html”. Даже если пароль “явно выглядит как заглушка”. Наличие паролей “от staging-а” может легко привести к компрометации настроек “от prod-а”.</p>
<blockquote>
<p>– Как значения “для разработки” могут скомпрометировать значения “от prod-а”?</p>
</blockquote>
<p>– Да очень просто – коллега случайно запушит. Так что лучше вообще не показывать такой пример. Не нужно оправдывать свои действия фразами “но ведь эти значения только для локальной разработки”, аудиторам будет все равно при проверке исходников – поставят низкую оценку и будут правы. К тому же, средствам автоматической проверки тоже не объяснишь – они обнаруживаются и “ругаются” вне зависимости от того пароль от staging-а или нет, простой пароль/токен или сложный. Для автоматического сканера что <code>123456</code>, что <code>changeme</code> и даже <code>''</code> – непустое значение. Не стоит игнорировать такой сигнал от анализатора – лучше поступить как он советует и избавиться от хранения таких хардкодов в коде/конфигах.</p>
<p>Вместо этого – хранить настройки окружения на самом окружении (сервере в рамках внутренних переменных или настроек сессии) и/или недоступном для основной проектной команды месте (CI, Wiki, password manager, etc.) Отличной стратегией является хранение названий конфигурационных ключей в <code>.env.example</code> файле в репозитории, но без каких либо значений. Приложение при старте может/должно проверять целостность и полноту конфигурации (значения ключей) и “падать” при обнаружении проблем.</p>
<p>Я не считаю “правильным”, когда из конфигурационного (<code>app.config</code> например) файла убирают только те значения, которые “кажутся” относящимися к секретным – это не решает проблему. Разработчику для нормальной работы нужно все равно иметь их заполненными. И вероятность случайно вкомитить эти значения вместе с другим изменением конфига – весьма высока.</p>
<blockquote>
<p>– Что делать?</p>
</blockquote>
<p>– Применять старую проверенную стратегию “разделяй и властвуй”. Необходимо вынести значения, которые нежелательно иметь в основном конфигурационном файле из него в отдельное место. К примеру в .NET для этого предусмотрен специальный механизм. С помощью <a href="https://docs.microsoft.com/en-us/dotnet/api/microsoft.extensions.configuration.configurationbuilder?view=dotnet-plat-ext-3.1&amp;viewFallbackFrom=aspnetcore-2.0">ConfigurationBuilder</a> можно использовать параметры из переменных окружения, либо из внешних файлов, добавляемых к приложению на этапе доставки инструментами Continuous Integration.</p>
<blockquote>
<p>– А мы используем git crypt? Это норм?</p>
</blockquote>
<p>– Эта мера защитит вас от случая, когда исходники “украли” или кто-то посторонний получил к ним доступ. Но концептуально это проблему не решило. Используя шифрование конфигов вы постулируете – “нам есть что прятать”. Готов спорить, что если используете git crypt – значит и конфиги от production у вас в репозитории хранятся. Это требует доверия ко всем членам команды разработки. Может быть вы, как команда, готовы на это пойти. Однако не думаю, что заказчик (если бы его спросили об этом явно) будет с такой позицией согласен. Как минимум он будет против смены всех кредов после каждой ротации разработчика в его команде.</p>
<blockquote>
<p>– Но это было тут вкомичено еще до меня, и лишь только поменял/отформатировал…</p>
</blockquote>
<p>– Помните про формулировку из правовых документов – “любое действие или <strong>бездействие</strong> расценивается…” Увидели крамолу – не проходите мимо, оставьте после себя “лучше чем было”.</p>
<blockquote>
<p>– Но если в репозитории не будет значений, то новому разработчику будет сложнее “завести” систему</p>
</blockquote>
<p>– Противоречие тут только кажущееся, проблема не в том, что новому члену команды будет сложно, а в том, что процесс не понятен. Причем сделать его “понятным” можно даже без подробного README файла с описанием всех конфигурационных опций (это как комментарии в коде, которые быстро устаревают). Представьте, запускаете вы приложение, а оно вам сообщает – не найден такой-то конфигурационный файл. Понятно же ведь что необходимо сделать – создать его. Какой он должен быть? Попробую либо пустой, либо, если замечу рядом с ним .example файл – скопирую из .example файла содержимое. Запускаю еще раз – система все еще отказывается стартовать, сообщая что параметр <code>STRIPE_API_KEY</code> не может быть пустым. Опять – совершенно ясно что делать. Такой подход (когда приложение отказывается стартовать) сэкономит вам часы debug-а в случаях, когда после git pull окажется, что добавилось новое конфигурационное значение и система не может правильно работать, когда оно пустое. Можно, конечно, возразить “вооот, а если бы <code>.env</code> файл был в репозитории, проблемы бы не возникло”. Так-то оно так, только откуда автору знать – планируете ли вы использовать тот же <code>STRIPE_API_KEY</code> или у вас есть свой, а может быть я, для тестирования, использую ключ со staging-а и потом его вкомичу…</p>
<p>Подводя итог – не храните пароли/токены/ключи/сертификаты в репозитории.</p>
  </section>
</article>

  </main>

  <footer>
    Site generated by
    <a href="http://jaspervdj.be/hakyll">Hakyll</a>
  </footer>
</body>

</html>]]></description>
    <pubDate>Fri, 15 May 2020 00:00:00 UT</pubDate>
    <guid>https://maksar.github.io/posts/code/2020-05-15-passwords.html</guid>
    <dc:creator>Shestakov Alex</dc:creator>
</item>
<item>
    <title>About pull requests</title>
    <link>https://maksar.github.io/posts/code/2020-05-14-pull-requests.html</link>
    <description><![CDATA[<!doctype html>
<html lang="en">

<head>
  <meta charset="utf-8">
  <meta http-equiv="x-ua-compatible" content="ie=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Shestakov Alex Blog - About pull requests</title>
  <link rel="stylesheet" href="../../css/default.css" />

  <script type="text/javascript" src="../../vendor/jquery/jquery-3.6.0.min.js"></script>
  <script type="text/javascript" src="../../vendor/fresco/js/fresco.min.js"></script>
  <link rel="stylesheet" type="text/css" href="../../vendor/fresco/css/fresco.css" />

  <link rel="stylesheet" href="../../vendor/highlight/styles/atom-one-dark.min.css">
  <script src="../../vendor/highlight/highlight.min.js"></script>
  <script src="../../vendor/highlight/languages/haskell.min.js"></script>
  <script src="../../vendor/highlight/languages/ruby.min.js"></script>
  <script src="../../vendor/highlight/languages/shell.min.js"></script>
  <script src="../../vendor/highlight/languages/kotlin.min.js"></script>
  <script src="../../vendor/highlight/languages/javascript.min.js"></script>
  <script>hljs.highlightAll();</script>
</head>

<body>
  <header>
    <div class="logo">
      <a href="../../">Shestakov Alex</a>
    </div>
    <nav>
      &amp;<a href="../../languages/english.html">english</a> &amp;<a href="../../languages/russian.html">russian</a>
      @<a href="../../categories/code.html">code</a> @<a href="../../categories/projects.html">projects</a>
      <a href="../../about.html">About</a>
    </nav>
  </header>

  <main role="main">
    <h1>About pull requests</h1>
    <article>
  <section class="header">
    May 14, 2020  @<a href="../../categories/code.html">code</a> #<a href="../../tags/russian.html">russian</a>
  </section>
  <section>
    <p>Методика разработки через feature branches или pull requests позволяет организовать максимально независимую работу разработчиков – без необходимости частой синхронизации между ними. Большим плюсом этой методики является простота участия всех членов проектной команды в процессе code review, так как каждая новая feature, исправленный дефект, или доставка версии представлены отдельными ветками в репозитории исходного кода. Желательно, чтобы любое вносимое в ПО изменение происходило через создание отдельной ветки и включение ее (после code review) в основной стрим (обычно, ветка master). Если на проекте используется trunk-based workflow (при котором разработчики работают с одной и той же веткой), то для организация эффективного code review процесса нетривиальна. Отсутствие запрета на прямое внесение изменений (push) в основные ветки разработки (develop, master) приводит к злоупотреблению “hot-fix”-ами для срочного решения проблем и, следовательно, не позволяет выстроить правильную deploy-rollback стратегию.</p>
<blockquote>
<p>– Стоит ли использовать pull request-ы даже если “работаю на проекте один”?</p>
</blockquote>
<p>– Однозначно, да. Это позволяет: * привлекать людей “не с проекта” для code review. Программист понимает – одна голова хорошо, а две головы <del>мутант</del>лучше. Требуйте у своего менеджера напарника для review; * группировать изменения по “фичам” или дефектам. Да, все слышали про ветки, но работать с ними не так удобно как с pull request-ами; * получать преимущества от интеграции с CI сервером, который будет помечать pull request-ы статусом сборки; * даже если кажется, что pull request-ы никто не смотрит, на самом деле это не так, только не надо “мержить сразу после создания” – так иногда делают и это действительно cargo cult.</p>
<p>Процесс code review направлен не только на улучшение качества кода проекта, но и на развитие коммуникации внутри команды, повышение технического уровня команды разработки. Если в процессе code review один из членов команды высказал замечание либо задал вопрос – он обязательно должен быть рассмотрен. В противном случае мотивация человека задающего вопросы быстро угаснет и польза от такого code review сойдет на нет. Если по какому-либо замечанию в процессе ревью возник спор/дискуссия – стоит убедиться, что команда пришла к единому конечному мнению.</p>
<blockquote>
<p>– А мы привыкли обсуждать замечания к коду устно, нам “так удобнее”.</p>
</blockquote>
<p>– Отвыкайте пожалуйста… Навыки письменной коммуникации, особенно на английском языке, ничуть не менее важны для разработчика, чем его техническая “крутость”. Только общаясь, преодолевая трудности “как же это ему объяснить без тыкания в код” можно прокачать письменный soft skill. Что касается взгляда со стороны (аудиторы частенько смотрят) – что можно сказать о проекте, где на 1000 pull request-ов было в среднем 0.13 комментариев per pull? Не думаю, что “там идеальный код и комментировать было решительно нечего”.</p>
<p>Важно, чтобы все разработчики из команды принимали участие в процессе code review. Это важно, так как code review предназначен не только для нахождения проблем в коде, но и для повышения квалификации разработчиков, которые принимают в нем участие, для поддержания общей ответственности за код (чтобы каждый разработчик из команды был знаком со всей кодовой базой, а не только со “своим модулем”), для развития внутри командного общения и повышения культуры разработки. Таким образом – мнение каждого члена команды, вне зависимости от его квалификации должно трактоваться с одинаковой важностью.</p>
<p>Применяемое в настоящий момент для всех новых репозиториев правило такое – все члены проектной группы, имеющие доступ в bitbucket, добавляются в default reviewer-ы. Они будут автоматически добавлены в pull при создании, без необходимости их выбирать вручную. Для merge-а необходимо наличие половины approve-ов (если команда состоит из 6 человек, то потребуется 3 апрува) и ни одного needs work-а. Если на вашем проекте не так – обратитесь к техническому координатору, ко мне, да хоть к CTO – мы обязательно поможем.</p>
  </section>
</article>

  </main>

  <footer>
    Site generated by
    <a href="http://jaspervdj.be/hakyll">Hakyll</a>
  </footer>
</body>

</html>]]></description>
    <pubDate>Thu, 14 May 2020 00:00:00 UT</pubDate>
    <guid>https://maksar.github.io/posts/code/2020-05-14-pull-requests.html</guid>
    <dc:creator>Shestakov Alex</dc:creator>
</item>
<item>
    <title>Size does matter</title>
    <link>https://maksar.github.io/posts/code/2020-05-11-size-matters.html</link>
    <description><![CDATA[<!doctype html>
<html lang="en">

<head>
  <meta charset="utf-8">
  <meta http-equiv="x-ua-compatible" content="ie=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Shestakov Alex Blog - Size does matter</title>
  <link rel="stylesheet" href="../../css/default.css" />

  <script type="text/javascript" src="../../vendor/jquery/jquery-3.6.0.min.js"></script>
  <script type="text/javascript" src="../../vendor/fresco/js/fresco.min.js"></script>
  <link rel="stylesheet" type="text/css" href="../../vendor/fresco/css/fresco.css" />

  <link rel="stylesheet" href="../../vendor/highlight/styles/atom-one-dark.min.css">
  <script src="../../vendor/highlight/highlight.min.js"></script>
  <script src="../../vendor/highlight/languages/haskell.min.js"></script>
  <script src="../../vendor/highlight/languages/ruby.min.js"></script>
  <script src="../../vendor/highlight/languages/shell.min.js"></script>
  <script src="../../vendor/highlight/languages/kotlin.min.js"></script>
  <script src="../../vendor/highlight/languages/javascript.min.js"></script>
  <script>hljs.highlightAll();</script>
</head>

<body>
  <header>
    <div class="logo">
      <a href="../../">Shestakov Alex</a>
    </div>
    <nav>
      &amp;<a href="../../languages/english.html">english</a> &amp;<a href="../../languages/russian.html">russian</a>
      @<a href="../../categories/code.html">code</a> @<a href="../../categories/projects.html">projects</a>
      <a href="../../about.html">About</a>
    </nav>
  </header>

  <main role="main">
    <h1>Size does matter</h1>
    <article>
  <section class="header">
    May 11, 2020  @<a href="../../categories/code.html">code</a> #<a href="../../tags/russian.html">russian</a>
  </section>
  <section>
    <p><img src="../../images/size-matters/logo.jpg" class="center" /></p>
<p>Возможно я в этом не одинок, но меня сильно разочаровывают размеры современных приложений. Сейчас считается нормой создавать сайты, скачивающие десятки мегабайт при первой загрузке, иметь приложения для телефонов размером в несколько сотен мегабайт, базовые образы <code>docker</code> контейнеров занимают гигабайты… Ситуация парадоксальная – “дешевле” не заботиться о размере, так как усилия, потраченные в этом направлении будут стоить компании-разработчику дороже. Возможно это действительно так, проверить достаточно сложно. А может быть все как раз наоборот, просто не представляется возможным точно подсчитать сколько на <strong>самом деле</strong> средств тратится на трафик и “ожидания” с “простоями”. А уж как большой размер скачиваемых артефактов влияет на customer и/или developer satisfaction и говорить нечего. “Современный подход” во мне пробуждает неоднозначные чувства и заставляет, в меру сил, <em>бороться</em> с ситуацией.</p>
<h2 id="минутка-истории">Минутка истории</h2>
<p>Компилируемые в бинарный код языки существовали еще до <a href="https://ru.wikipedia.org/wiki/Unix-время">начала времен</a>. В эпоху контейнеризации преимущества “бинарников” раскрылись с новой, неожиданной стороны. Для чего вообще нужна контейнеризация? Изоляция, воспроизводимость, удобство развертывания и безопасность. Программа, представляющая собой один единственный исполняемый файл – что может быть удобнее для развертывания? Изоляцию, в какой-то мере, может предоставить операционная система. А воспроизводимость (с точки зрения сборки) и вовсе решается без использования контейнеров. Что с безопасностью? Необходимо отметить, тут есть “проблемы”. Возможно вы не застали времена <a href="https://ru.wikipedia.org/wiki/CGI">CGI</a> скриптов, но в начале развития интернета, серверные приложения были обычными бинарниками, которые запускались web серверами через CGI интерфейс. И если в такой программе была ошибка/уязвимость – атакующий мог получить доступ ко всему серверу – ведь бинарник исполнялся, как правило, от пользователя под которым работал web сервер. А с учетом того, что сервера раньше виртуальными были редко – на одном и том же хосте располагались данные (почта, файлы и т.д.) многих пользователей – компрометации подвергалось все.</p>
<p>Сейчас CGI используется крайне редко, все чаще программы сами предоставляют <code>http</code> интерфейс для взаимодействия с собой, а web сервер выступает в роли <code>proxy</code>. Да и компилируемые в бинарный код языки для web используются все реже. Засилье виртуальных машин да интерпретаторов. Почему это не очень хорошо с точки зрения безопасности? Исполняемый файл можно назначить “точкой входа” <code>docker</code> контейнера, убрав из файловой системы все лишнее (кроме необходимых для работы приложения библиотек). В этом случае, даже если злоумышленник и обнаружит <a href="https://www.exploit-db.com/docs/english/42593-command-injection---shell-injection.pdf">shell injection</a> в программе, ничего страшного не случится – никакого командного интерпретатора внутри контейнера нет, “внедрять” вредоносный код попросту некуда.</p>
<h2 id="ruby">Ruby</h2>
<p>Если задуматься, такой трюк можно провернуть не только с системами, представляющими собой бинарный файл, но и со скриптовыми языками. Это несколько сложнее, но все-же возможно. Давайте попробуем разобраться на примере приложения, написанного на <code>ruby</code>.</p>
<p>В начале все более-менее стандартно – берем за основу официальный образ для <code>ruby</code> и устанавливаем зависимости из <code>Gemfile.lock</code> при помощи <code>bundler</code>-а. Библиотеки в <code>ruby</code> поставляются в виде исходников, складываем их в <code>/app/vendor/bundle</code> папку, рядом с самим приложением.</p>
<pre class="docker"><code>FROM ruby:2.7.0 as ruby

WORKDIR /app
COPY Gemfile* /app/
RUN bundle config --local deployment 'true'
RUN bundle config --local frozen 'true'
RUN bundle config --local no-cache 'true'
RUN bundle config --local clean 'true'
RUN bundle config --local without 'development'
RUN bundle config --local path 'vendor/bundle'
RUN bundle install
RUN mkdir .bundle &amp;&amp; cp /usr/local/bundle/config .bundle/config
RUN rm -rf vendor/bundle/ruby/2.7.0/cache vendor/bundle/ruby/2.7.0/bin</code></pre>
<p>Далее, в этом же много-<code>stage</code>-евом <code>Dockerfile</code> берем за основу <code>distroless</code> образ (без командного интерпретатора) и копируем из предыдущего шага библиотеки, необходимые для работы интерпретатора <code>ruby</code>. Как понять какие именно библиотеки нужны? Спрашивать у <code>ldd</code> (или <code>otool -L</code> в случае <code>llvm</code>) особого смысла нет – интерпретатор все равно кое-что загружает динамически. При помощи серии экспериментов, удается выявить, что для работы нашей программы, достаточно <code>libz</code>, <code>libyaml</code> и <code>libgmp</code>. Копируем библиотеки и сам интерпретатор в <code>distroless</code> образ.</p>
<pre class="docker"><code>FROM gcr.io/distroless/base-debian10 as distroless

COPY --from=ruby /lib/x86_64-linux-gnu/libz.so.* /lib/x86_64-linux-gnu/
COPY --from=ruby /usr/lib/x86_64-linux-gnu/libyaml* /usr/lib/x86_64-linux-gnu/
COPY --from=ruby /usr/lib/x86_64-linux-gnu/libgmp* /usr/lib/x86_64-linux-gnu/
COPY --from=ruby /usr/local/lib /usr/local/lib
COPY --from=ruby /usr/local/bin/ruby /usr/local/bin/ruby
COPY --from=ruby /usr/local/bin/bundle /usr/local/bin/bundle</code></pre>
<p>Цель достигнута, образ не содержит командного интерпретатора и другой шелухи (<code>man</code> страниц, файлов настроек операционной системы и т.д.). Но мы на этом на остановимся и следующим шагом соберем образ буквально <code>FROM scratch</code>. <code>scratch</code> – это образ “без ничего”, он пуст. Так что мы смеем надеяться, что ничего лишнего (не жизненно необходимого для работы приложения) в итоговом образе не будет. Кроме самого приложения (набора <code>*.rb</code> файлов) понадобиться еще файл с корневыми сертификатами, без которого не обойтись при общении с внешними сервисами по <code>https</code>.</p>
<pre class="docker"><code>FROM scratch

COPY --from=ruby /app /app

COPY --from=distroless /lib /lib
COPY --from=distroless /lib64 /lib64
COPY --from=distroless /usr/local /usr/local
COPY --from=distroless /usr/lib/ssl /usr/lib/ssl
COPY --from=distroless /usr/lib/x86_64-linux-gnu/lib* /usr/lib/x86_64-linux-gnu/
COPY --from=distroless /etc/ssl /etc/ssl
COPY --from=distroless /home /home

WORKDIR /app
COPY dialogs /app/dialogs/
COPY services /app/services/
COPY *.rb /app/

ENV SSL_CERT_FILE /etc/ssl/certs/ca-certificates.crt
ENV RUBYOPT -W:no-deprecated -W:no-experimental

CMD [&quot;bundle&quot;, &quot;exec&quot;, &quot;ruby&quot;, &quot;server.rb&quot;]</code></pre>
<p>Итоговый размер образа – <strong>61 мегабайт</strong>. Уверен, можно было бы еще десяток сбросить при помощи утилиты <a href="https://github.com/wagoodman/dive">dive</a> (крайне рекомендую к использованию), удалив неиспользуемые части стандартной библиотеки языка и зависимостей <code>ruby</code> программы. Но вот эту часть, уже можно считать экономически нецелесообразной…</p>
<p>Если бы мы ставили перед собой цель максимально уменьшить размер приложения, то, скорее всего, воспользовались бы <a href="https://alpinelinux.org">alpine linux</a> образом, который славится малым начальным размером а так же схлопнули бы все слои <code>docker</code> образа в один (чтобы избавиться от удаленных файлов в нижних слоях). В этом случае, размер получившего образа мог быть даже меньше, однако преимуществ безопасности мы бы не достигли.</p>
<p>Кроме преимуществ, у такого подхода есть и недостатки. К примеру, больше нельзя подключиться к работающему контейнеру и “посмотреть” логи, их просто нечем выводить, да и некуда – ни <code>bash</code> ни <code>cat</code> в образе нет. Вот он, микро-сервис во всей красе – пишет логи в <code>stdout</code>.</p>
<h2 id="kotlin">Kotlin</h2>
<p>Буквально на днях познакомился с <a href="https://www.graalvm.org">GraalVM</a> и он меня покорил. Одной из функций <code>GraalVM</code> является сборка <code>native</code> бинарников из <code>jar</code> файлов. Да, именно так: вы можете взять свое приложение, собрать его в обычный <code>fat jar</code> (с зависимостями), а затем “скомпилировать” в исполняемый бинарь.</p>
<p>У меня есть маленькая поделка для “причесывания” названий ресурсных и проектных карт. Дело в том. что в процессе создания, иногда в начале или в конце <code>title</code>-а оставляют пробелы, что мешает потом эффективно работать с такими картами. Очень давно я написал программу, чтобы автоматизировать процесс <code>trim</code>-а. Целью было, конечно, не это, а исследование возможностей библиотеки <code>("com.github.rcarz", "jira-client", "master")</code> для доступа к <code>JIRA</code> через <em>приятный</em> <code>DSL</code>.</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode kotlin"><code class="sourceCode kotlin"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a>const <span class="kw">val</span> <span class="va">RESOURCE_CARDS</span> <span class="op">=</span> <span class="st">&quot;RESCARD&quot;</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>const <span class="kw">val</span> <span class="va">PROJECT_CARDS</span> <span class="op">=</span> <span class="st">&quot;PROJCARD&quot;</span></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>const <span class="kw">val</span> <span class="va">PAGINATION_SIZE</span> <span class="op">=</span> <span class="dv">999</span></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a><span class="kw">val</span> <span class="va">dotenv</span> <span class="op">=</span> DotEnv<span class="op">.</span>load<span class="op">()</span></span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a><span class="kw">val</span> <span class="va">jira</span> <span class="op">=</span> JiraClient<span class="op">(</span>dotenv<span class="op">[</span><span class="st">&quot;JIRA_URL&quot;</span><span class="op">],</span> BasicCredentials<span class="op">(</span>dotenv<span class="op">[</span><span class="st">&quot;JIRA_USERNAME&quot;</span><span class="op">],</span> dotenv<span class="op">[</span><span class="st">&quot;JIRA_PASSWORD&quot;</span><span class="op">]))</span></span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a><span class="kw">fun</span> <span class="fu">makeQuery</span><span class="op">(</span><span class="va">block</span><span class="op">:</span> <span class="dt">JqlQueryBuilder</span>.(<span class="op">)</span> -&gt; <span class="fu">Unit</span>) <span class="op">:</span> <span class="dt">String</span> <span class="op">=</span></span>
<span id="cb4-10"><a href="#cb4-10" aria-hidden="true" tabindex="-1"></a>        JqlStringSupportImpl<span class="op">(</span>DefaultJqlQueryParser<span class="op">()).</span>generateJqlString<span class="op">(</span>newBuilder<span class="op">().</span>also <span class="op">{</span> block<span class="op">(</span>it<span class="op">)</span> <span class="op">}.</span>buildQuery<span class="op">())</span></span>
<span id="cb4-11"><a href="#cb4-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-12"><a href="#cb4-12" aria-hidden="true" tabindex="-1"></a><span class="kw">fun</span> <span class="fu">trim</span><span class="op">(</span><span class="va">project</span> <span class="op">:</span> <span class="dt">String</span><span class="op">)</span> <span class="op">{</span></span>
<span id="cb4-13"><a href="#cb4-13" aria-hidden="true" tabindex="-1"></a>    println<span class="op">(</span><span class="st">&quot;Searching for issues in </span><span class="ss">${</span>project<span class="ss">}</span><span class="st">.&quot;</span><span class="op">)</span></span>
<span id="cb4-14"><a href="#cb4-14" aria-hidden="true" tabindex="-1"></a>    jira<span class="op">.</span>searchIssues<span class="op">(</span>makeQuery <span class="op">{</span></span>
<span id="cb4-15"><a href="#cb4-15" aria-hidden="true" tabindex="-1"></a>        <span class="kw">where</span><span class="op">().</span>project<span class="op">(</span>project<span class="op">)</span></span>
<span id="cb4-16"><a href="#cb4-16" aria-hidden="true" tabindex="-1"></a>        orderBy<span class="op">().</span>createdDate<span class="op">(</span>ASC<span class="op">)</span></span>
<span id="cb4-17"><a href="#cb4-17" aria-hidden="true" tabindex="-1"></a>    <span class="op">},</span> SUMMARY<span class="op">,</span> PAGINATION_SIZE<span class="op">).</span>iterator<span class="op">().</span>asSequence<span class="op">().</span>toList<span class="op">().</span>filter <span class="op">{</span></span>
<span id="cb4-18"><a href="#cb4-18" aria-hidden="true" tabindex="-1"></a>        it<span class="op">.</span>summary<span class="op">.</span>trim<span class="op">()</span> <span class="op">!=</span> it<span class="op">.</span>summary</span>
<span id="cb4-19"><a href="#cb4-19" aria-hidden="true" tabindex="-1"></a>    <span class="op">}.</span>also <span class="op">{</span></span>
<span id="cb4-20"><a href="#cb4-20" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(</span>it<span class="op">.</span>count<span class="op">()</span> <span class="op">==</span> <span class="dv">0</span><span class="op">)</span> <span class="op">{</span></span>
<span id="cb4-21"><a href="#cb4-21" aria-hidden="true" tabindex="-1"></a>            println<span class="op">(</span><span class="st">&quot;No issues in </span><span class="ss">${</span>project<span class="ss">}</span><span class="st">, that needs to be trimmed was found.&quot;</span><span class="op">)</span></span>
<span id="cb4-22"><a href="#cb4-22" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span> <span class="cf">else</span> <span class="op">{</span></span>
<span id="cb4-23"><a href="#cb4-23" aria-hidden="true" tabindex="-1"></a>            println<span class="op">(</span><span class="st">&quot;Found </span><span class="ss">${</span>it<span class="op">.</span>count<span class="op">()</span><span class="ss">}</span><span class="st"> issues in </span><span class="ss">${</span>project<span class="ss">}</span><span class="st">, that needs to be trimmed.&quot;</span><span class="op">)</span></span>
<span id="cb4-24"><a href="#cb4-24" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span>
<span id="cb4-25"><a href="#cb4-25" aria-hidden="true" tabindex="-1"></a>    <span class="op">}.</span>forEach <span class="op">{</span></span>
<span id="cb4-26"><a href="#cb4-26" aria-hidden="true" tabindex="-1"></a>        println<span class="op">(</span><span class="st">&quot;Trimming </span><span class="ss">${</span>it<span class="op">.</span>key<span class="ss">}</span><span class="st"> with summary '</span><span class="ss">${</span>it<span class="op">.</span>summary<span class="ss">}</span><span class="st">'.&quot;</span><span class="op">)</span></span>
<span id="cb4-27"><a href="#cb4-27" aria-hidden="true" tabindex="-1"></a>        it<span class="op">.</span>update<span class="op">().</span>field<span class="op">(</span>SUMMARY<span class="op">,</span> it<span class="op">.</span>summary<span class="op">.</span>trim<span class="op">()).</span>execute<span class="op">()</span></span>
<span id="cb4-28"><a href="#cb4-28" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb4-29"><a href="#cb4-29" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb4-30"><a href="#cb4-30" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-31"><a href="#cb4-31" aria-hidden="true" tabindex="-1"></a><span class="kw">fun</span> <span class="fu">main</span><span class="op">(</span><span class="va">args</span><span class="op">:</span> <span class="dt">Array</span>&lt;<span class="va">String</span>&gt;<span class="op">)</span> <span class="op">{</span></span>
<span id="cb4-32"><a href="#cb4-32" aria-hidden="true" tabindex="-1"></a>    MockComponentWorker<span class="op">().</span>init<span class="op">()</span></span>
<span id="cb4-33"><a href="#cb4-33" aria-hidden="true" tabindex="-1"></a>    listOf<span class="op">(</span>RESOURCE_CARDS<span class="op">,</span> PROJECT_CARDS<span class="op">).</span>forEach<span class="op">(::</span>trim<span class="op">)</span></span>
<span id="cb4-34"><a href="#cb4-34" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>Для построения <code>JQL</code> запроса (не строкой, а при помощи <code>DSL</code>) к <code>JIRA</code> я использовал библиотеки самого <code>Atlassian</code>-а (библиотека для тестов необходима для инициализации <code>core</code>, в тестовом режиме, в противном случае <code>core</code> остается очень недоволен тем, что запущен вне контекста <code>JIRA</code>):</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode kotlin"><code class="sourceCode kotlin"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a>  implementation<span class="op">(</span><span class="st">&quot;com.atlassian.jira&quot;</span><span class="op">,</span> <span class="st">&quot;jira-core&quot;</span><span class="op">,</span> <span class="st">&quot;8.8.1&quot;</span><span class="op">)</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a>  implementation<span class="op">(</span><span class="st">&quot;com.atlassian.jira&quot;</span><span class="op">,</span> <span class="st">&quot;jira-tests&quot;</span><span class="op">,</span> <span class="st">&quot;8.8.1&quot;</span><span class="op">)</span></span></code></pre></div>
<p>Собрав <code>fat jar</code> с этими и еще некоторыми прямыми (сам <code>kotlin</code>, библиотека для работы с переменными окружения, etc.) и косвенными зависимостями (только представьте сколько зависимостей за собой “тянет” <code>jira-core</code>) получаем <code>trimmer-1.0-all.jar</code> размером в <strong>112 мегабайт</strong> – такова цена за <code>code-reuse</code>. Настало время для <code>GraalVM</code> – попробуем преобразовать <code>jar</code> файл в обычный исполняемый файл, в надежде избавиться от главной зависимости – виртуальной <code>java</code> машины.</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="ex">native-image</span> <span class="at">-cp</span> ./build/libs/trimmer-1.0-all.jar <span class="at">-H:Name</span><span class="op">=</span>trimer-exe <span class="at">-H:Class</span><span class="op">=</span>TrimmerKt <span class="at">-H:+ReportUnsupportedElementsAtRuntime</span> <span class="at">--allow-incomplete-classpath</span></span></code></pre></div>
<p>Попытка “в лоб” заканчивается неудачей, логи полны сообщений вида:</p>
<pre class="log"><code>Error: Classes that should be initialized at run time got initialized during image building:
org.apache.log4j.spi.LoggingEvent was unintentionally initialized at build time.
org.apache.http.HttpEntity was unintentionally initialized at build time.
...
Error: Image build request failed with exit status 1</code></pre>
<p>Не отчаиваемся и просим <code>GraalVM</code> пытаться инициализировать это все на этапе сборки образа:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="ex">native-image</span> <span class="at">--no-server</span> <span class="at">--enable-https</span> <span class="at">--allow-incomplete-classpath</span> <span class="at">-cp</span> ./build/libs/trimmer-1.0-all.jar <span class="at">-H:Name</span><span class="op">=</span>trimer-exe <span class="at">-H:Class</span><span class="op">=</span>TrimmerKt <span class="at">--initialize-at-build-time</span><span class="op">=</span>org.apache.http,org.slf4j,org.apache.log4j,org.apache.commons.codec,org.apache.commons.logging</span></code></pre></div>
<p>Успех, на выходе имеем <code>trimer-exe</code> файл, размером всего в <strong>6.5 мегабайт</strong>. Упакуем его дополнительно замечательной утилитой <a href="https://upx.github.io">upx</a>, которая знакома всем еще со времен <code>DOS</code> и недостатка места на диске. Результат изумителен – <strong>1.8 мегабайт</strong>! Да только вот нас немного обманули… <code>GraalVM</code>, по умолчанию, строит образы, которые хоть и являются исполняемыми, но они не в состоянии работать без установленной на компьютере <code>java</code> виртуальной машины. При попытке построить “настоящий” независимый образ (опция <code>--no-fallback</code>), сталкиваемся с рядом сложностей.</p>
<p>Во-первых – <code>Warning: Aborting stand-alone image build. Detected a FileDescriptor in the image heap</code> появляющийся из-за статической инициализации поля <code>org.apache.log4j.LogManager.repositorySelector</code>. Дело в том, что в глубинах зависимостей нашего приложения есть части, инициализирующиеся на этапе загрузки классов – а именно – это код в блоках <code>static</code> и статические члены классов в <code>java</code>. В основном – это <code>logging framework</code>-и (их по дереву зависимостей наберется несколько штук), которые требуют указания <code>class</code>-а для создания logger объекта. Они обладают возможностью ленивой инициализации при первом использовании, при помощи <code>reflection</code> загружая подходящую реализацию, от чего <code>GraalVM</code> становится дурно (действительно, сохранить открытый <code>FileDescriptor</code> в дампе памяти – невыполнимая задача), он отчаянно требует помощи. Попробуем заглушить инициализацию <code>log4j</code>, мы ведь им и не пользуемся даже: добавляем в начале <code>main</code> строку <code>LogManager.setRepositorySelector(DefaultRepositorySelector(NOPLoggerRepository()), null)</code>, а в момент сборки образа добавляем опцию <code>-Dlog4j.defaultInitOverride=true</code>. Как до этого “дойти”? Исключительно чтением исходных текстов библиотеки. Сложно недооценить количество знаний и понимания внутреннего устройства систем, получаемых таким образом – не бойтесь заглядывать под капот используемым библиотекам!</p>
<p>К слову, еще до использования <code>GraalVM</code> я замечал, что при запуске приложения создается папка <code>target</code> (хоть я и использую <code>gradle</code>, который все <em>кладет</em> в папку <code>build</code>) с пустым файлом <code>unit-tests.log</code> в ней. Подозрения пали на <code>com.atlassian.jira:jira-tests</code> зависимость, в недрах которой обнаружился <code>log4j.properties</code> файл с незатейливым содержимым:</p>
<pre class="properties"><code>log4j.appender.console=org.apache.log4j.FileAppender
log4j.appender.console.File=target/unit-tests.log</code></pre>
<p>Разработчики из <code>Atlassian</code> подумали, что это отличная идея – перенаправить все что должно выводиться на консоль – в файл. Хорошая это идея или кошмарная – каждый решает за себя, но вот делать это “втихую”, просто из-за наличия зависимости – верх эгоизма.</p>
<p>За одно отключим еще один <code>logging framework</code> – <code>slf4j</code>. Для этого добавим в начало <code>main</code> <del>грязный хак</del>строку:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode kotlin"><code class="sourceCode kotlin"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a>LoggerFactory<span class="op">::</span><span class="kw">class</span>.java.getDeclaredField<span class="op">(</span>&quot;<span class="va">INITIALIZATION_STATE</span>&quot;<span class="op">)</span>.also <span class="op">{</span> it<span class="op">.</span>isAccessible <span class="op">=</span> <span class="kw">true</span> <span class="op">}.</span><span class="kw">set</span><span class="op">(</span>LoggerFactory<span class="op">::</span><span class="kw">class</span>, LoggerFactory<span class="op">:</span>:<span class="kw">class</span>.java.getDeclaredField<span class="op">(</span>&quot;<span class="va">NOP_FALLBACK_INITIALIZATION</span>&quot;<span class="op">)</span>.also <span class="op">{</span> it<span class="op">.</span>isAccessible <span class="op">=</span> <span class="kw">true</span> <span class="op">}.</span><span class="kw">get</span><span class="op">(</span>LoggerFactory<span class="op">::</span><span class="kw">class</span>))</span></code></pre></div>
<p>Она заставит <code>slf4j</code> пропустить инициализацию и не заниматься <code>reflection</code>-ом во время старта приложения. А статическую инициализацию одного из наших полей, сделаем отложенной (чтобы “трюк” из <code>main</code> успел выполниться вовремя):</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode kotlin"><code class="sourceCode kotlin"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a><span class="kw">val</span> <span class="va">jira</span> <span class="op">=</span> lazy <span class="op">{</span> JiraClient<span class="op">(</span>dotenv<span class="op">[</span><span class="st">&quot;JIRA_URL&quot;</span><span class="op">],</span> BasicCredentials<span class="op">(</span>dotenv<span class="op">[</span><span class="st">&quot;JIRA_USERNAME&quot;</span><span class="op">],</span> dotenv<span class="op">[</span><span class="st">&quot;JIRA_PASSWORD&quot;</span><span class="op">]))</span> <span class="op">}</span></span></code></pre></div>
<p>Кстати, именно из-за статической инициализации приложения на <code>java</code> так медленно стартуют, а при старте иногда можно видеть в консоли строки:</p>
<pre class="log"><code>log4j:WARN No appenders could be found for logger (org.apache.http.impl.conn.PoolingClientConnectionManager).
log4j:WARN Please initialize the log4j system properly.
log4j:WARN See http://logging.apache.org/log4j/1.2/faq.html#noconfig for more info.</code></pre>
<p><code>GraalVM</code> как раз и славится тем, что позволяет сократить время запуска приложений, так как вся статическая инициализация происходит на этапе “сборки”, в готовый исполняемый файл, вместе со встраиваемой виртуальной машиной, попадают “замороженные” версии классов, с уже выполненным шагом статической инициализации.</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true" tabindex="-1"></a><span class="ex">native-image</span> <span class="at">--no-fallback</span> <span class="at">--allow-incomplete-classpath</span> <span class="at">--enable-https</span> <span class="at">--no-server</span> <span class="at">-cp</span> ./build/libs/trimmer-1.0-all.jar <span class="at">-H:Name</span><span class="op">=</span>trimer-exe <span class="at">-H:Class</span><span class="op">=</span>TrimmerKt <span class="at">--initialize-at-build-time</span><span class="op">=</span>org.apache.http,org.apache.log4j,org.slf4j,org.apache.commons.logging,org.apache.commons.collections.map,net.sf.json,net.sf.ezmorph,org.apache.oro.text.regex,org.apache.commons.codec <span class="at">-Dlog4j.defaultInitOverride</span><span class="op">=</span>true</span></code></pre></div>
<p>Следующая беда “вылазит” уже не на этапе сборки, а после запуска собранного приложения:</p>
<pre class="log"><code>Exception in thread &quot;main&quot; java.lang.NoClassDefFoundError: java.lang.Class
  at net.sf.json.AbstractJSON.class$(AbstractJSON.java:53)
  ...
  at net.rcarz.jiraclient.RestClient.request(RestClient.java:165)
  ...</code></pre>
<p>Общение с <code>JIRA</code> происходит при помощи <code>JSON</code>-а, а его разбор в <code>java</code> большинством библиотек происходит через <code>reflection</code>, возможности которого в <code>GraalVM</code> несколько ограничены. <code>GraalVM</code> понимает, что необходимо “встроить” нужные вызовы к <code>reflection</code> <code>API</code> в итоговый образ, если они происходят на этапе статической инициализации, но вот к вызовам <code>reflection</code> во время исполнения его “никто не готовил”. Создадим файл <code>config.json</code> с таким содержимым:</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode json"><code class="sourceCode json"><span id="cb15-1"><a href="#cb15-1" aria-hidden="true" tabindex="-1"></a><span class="ot">[</span></span>
<span id="cb15-2"><a href="#cb15-2" aria-hidden="true" tabindex="-1"></a>  <span class="fu">{</span></span>
<span id="cb15-3"><a href="#cb15-3" aria-hidden="true" tabindex="-1"></a>    <span class="dt">&quot;name&quot;</span> <span class="fu">:</span> <span class="st">&quot;java.lang.String&quot;</span></span>
<span id="cb15-4"><a href="#cb15-4" aria-hidden="true" tabindex="-1"></a>  <span class="fu">}</span><span class="ot">,</span></span>
<span id="cb15-5"><a href="#cb15-5" aria-hidden="true" tabindex="-1"></a>  <span class="fu">{</span></span>
<span id="cb15-6"><a href="#cb15-6" aria-hidden="true" tabindex="-1"></a>    <span class="dt">&quot;name&quot;</span> <span class="fu">:</span> <span class="st">&quot;java.lang.Class&quot;</span></span>
<span id="cb15-7"><a href="#cb15-7" aria-hidden="true" tabindex="-1"></a>  <span class="fu">}</span></span>
<span id="cb15-8"><a href="#cb15-8" aria-hidden="true" tabindex="-1"></a><span class="ot">]</span></span></code></pre></div>
<p>Заставим <code>GraalVM</code> обратить на него внимание:</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb16-1"><a href="#cb16-1" aria-hidden="true" tabindex="-1"></a><span class="ex">native-image</span> <span class="at">--no-fallback</span> <span class="at">--allow-incomplete-classpath</span> <span class="at">--enable-https</span> <span class="at">--no-server</span> <span class="at">-cp</span> ./build/libs/trimmer-1.0-all.jar <span class="at">-H:Name</span><span class="op">=</span>trimer-exe <span class="at">-H:Class</span><span class="op">=</span>TrimmerKt <span class="at">--initialize-at-build-time</span><span class="op">=</span>org.apache.http,org.apache.log4j,org.slf4j,org.apache.commons.logging,org.apache.commons.collections.map,net.sf.json,net.sf.ezmorph,org.apache.oro.text.regex,org.apache.commons.codec <span class="at">-Dlog4j.defaultInitOverride</span><span class="op">=</span>true <span class="at">-H:ReflectionConfigurationFiles</span><span class="op">=</span>./config.json</span></code></pre></div>
<p>В итоге, собранная программа работает как положено. Итоговый размер – <strong>28 мегабайт</strong>, а будучи упакованным при помощи <code>upx</code> – <strong>7.1 мегабайт</strong>. Не удивительно, ведь <code>GraalVM</code> пришлось включить в исполняемый файл <code>Substrate VM</code> виртуальную машину для того, чтобы бинарный файл стал независим от системного <code>JRE</code>. Обещания, которые давал <code>GraalVM</code> он выполнил – один исполняемый файл, независимость от системного <code>JRE</code>. К слову, время старта приложения значительно сократилось – разница заметна даже невооруженным взглядом:</p>
<div class="sourceCode" id="cb17"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb17-1"><a href="#cb17-1" aria-hidden="true" tabindex="-1"></a><span class="ex">➜</span> time java <span class="at">-jar</span> build/libs/trimmer-1.0-all.jar <span class="at">--dry-run</span></span>
<span id="cb17-2"><a href="#cb17-2" aria-hidden="true" tabindex="-1"></a><span class="ex">0.30s</span> user 0.05s system 181% cpu 0.195 total</span>
<span id="cb17-3"><a href="#cb17-3" aria-hidden="true" tabindex="-1"></a><span class="ex">➜</span> time ./trimer-exe <span class="at">--dry-run</span></span>
<span id="cb17-4"><a href="#cb17-4" aria-hidden="true" tabindex="-1"></a><span class="ex">0.00s</span> user 0.00s system 70% cpu 0.010 total</span></code></pre></div>
<h2 id="haskell">Haskell</h2>
<p>Напоследок, попробуем получить преимущества от статической линковки программы на <code>Haskell</code>, бота <a href="https://itransition.workplace.com/Group-Manager-105678357661487">Group Manager</a>. Сборка программ на <code>Haskell</code> внутри <code>docker</code>-а происходит примерно так же как и на <code>golang</code>. В первом <code>stage</code>-е устанавливаются все необходимые зависимости, собирается бинарный исполняемый файл. Затем он из этого <code>stage</code>-а копируется в “чистовой” контейнер, не содержащий компилятора и других <code>development</code> зависимостей.</p>
<p>Самая первая версия бота так и собиралась, итоговый бинарный файл имел размер <strong>26 мегабайт</strong>, а <code>docker</code> образ (на основе того же <code>distroless</code>) – <strong>46 мегабайт</strong>.</p>
<pre class="docker"><code>FROM haskell:8.6.5 as haskell

RUN mkdir /app
WORKDIR /app

ADD stack.yaml .
ADD stack.yaml.lock .
ADD package.yaml .

RUN mkdir src
RUN mkdir app
RUN mkdir test

RUN stack setup
RUN stack build || true

ADD . .

RUN stack install

FROM gcr.io/distroless/base
COPY --from=haskell /lib/x86_64-linux-gnu/libz* /lib/x86_64-linux-gnu/
COPY --from=haskell /usr/lib/x86_64-linux-gnu/libgmp* /usr/lib/x86_64-linux-gnu/

COPY --from=haskell /root/.local/bin/ldabot-exe /app

ENTRYPOINT [&quot;/app&quot;]</code></pre>
<p>В принципе, не так и плохо, но можно лучше! Если добавить опции для статической сборки и использовать <code>scratch</code> в качестве базового образа (никакие библиотеки ведь теперь не нужны), получается исполняемый файл размером <strong>28 мегабайт</strong> и такого же размера <code>docker</code> образ (состоит он, по сути, из одного единственного файла).</p>
<pre class="docker"><code>FROM haskell:8.6.5 as haskell

RUN mkdir /app
WORKDIR /app

ADD stack.yaml .
ADD stack.yaml.lock .
ADD package.yaml .

RUN mkdir src
RUN mkdir app
RUN mkdir test

RUN stack setup
RUN stack build || true

ADD . .

RUN sed -i &quot;s/    ghc-options:/    cc-options: -static\n    ld-options: -static -pthread\n    ghc-options:\n    - -O2\n    - -static/g&quot; package.yaml

RUN stack install --executable-stripping
RUN strip /root/.local/bin/ldabot-exe

FROM scratch

COPY --from=haskell /root/.local/bin/ldabot-exe /app

ENTRYPOINT [&quot;/app&quot;]</code></pre>
<p>Стоит ли останавливаться на достигнутом? Конечно же нет! Существует такая штука как <code>musl</code> – альтернативная реализация <code>libc</code> библиотеки, которая славится малым размером (кроме других своих достоинств). Именно благодаря ей <code>alpine linux</code> имеет такой скромный размер. Мир полон добрых людей, существуют сборка компилятора <code>GHC 8.6.5</code> “под” <code>musl</code> – <code>utdemir/ghc-musl:v4-libgmp-ghc865</code>, ей мы и воспользуемся.</p>
<pre class="docker"><code>FROM utdemir/ghc-musl:v4-libgmp-ghc865 as haskell

RUN mkdir /app
WORKDIR /app

RUN cabal update
ADD ldabot.cabal .
RUN cabal build || true

ADD . .
RUN cabal new-install
RUN strip --strip-all /root/.cabal/bin/ldabot-prod

FROM alpine as upx

RUN apk add -u upx

COPY --from=haskell /root/.cabal/bin/ldabot-prod /app
RUN upx --best /app

FROM scratch

COPY --from=gcr.io/distroless/base /etc/ssl /etc/ssl
COPY --from=upx /app /app

ENTRYPOINT [&quot;/app&quot;]</code></pre>
<p>Благодаря <code>musl</code> (и, конечно, <code>upx</code>) удалось добиться бинарника размером <strong>5.9 мегабайт</strong>. <code>docker</code> образ, при этом, стал чуть больше – <strong>6.1 мегабайт</strong>, так как дополнительно пришлось копировать <code>SSL</code> сертификаты для работы (исходный код к этому времени стал обращаться к внешним сервисам по <code>https</code>).</p>
<p>Текущая версия бота собирается чуть иначе. Причина этому – использование более новой версии компилятора <code>GHC 8.8.3</code>. Того требует одна из зависимостей <code>polysemy</code> – is a library for writing high-power, low-boilerplate, zero-cost, domain specific languages, о которой я постараюсь вскоре рассказать. Для <code>GHC 8.8.3</code>, на момент создания бота, поддержки <code>musl</code> еще “на завезли”. Сборка работает при помощи <code>stack</code> (это как <code>gradle</code> для <code>java</code>), который “из коробки” умеет исполнять команды сборки внутри контейнера. Необходимо только указать базовый образ и запустить сборку при помощи команды <code>stack build --docker</code></p>
<div class="sourceCode" id="cb21"><pre class="sourceCode yaml"><code class="sourceCode yaml"><span id="cb21-1"><a href="#cb21-1" aria-hidden="true" tabindex="-1"></a><span class="fu">docker</span><span class="kw">:</span></span>
<span id="cb21-2"><a href="#cb21-2" aria-hidden="true" tabindex="-1"></a><span class="at">  </span><span class="fu">image</span><span class="kw">:</span><span class="at"> </span><span class="st">&quot;fpco/stack-build-small:latest&quot;</span></span></code></pre></div>
<p><code>Dockerfile</code> при этом выглядит необычно – внутри не происходит никакой сборки, только сжатие <code>upx</code>-ом и копирование библиотек.</p>
<pre class="docker"><code>FROM alpine as upx

COPY .stack-work/docker/_home/.local/bin/ldabot-prod /app
RUN apk add -u upx
RUN upx --best --ultra-brute /app

FROM scratch

COPY --from=gcr.io/distroless/base /etc/ssl /etc/ssl
COPY --from=upx /app /app
COPY --from=fpco/stack-build:lts-14.25 /lib/x86_64-linux-gnu/ld-linux* /lib/x86_64-linux-gnu/libc.* /lib/x86_64-linux-gnu/libnss_dns.* /lib/x86_64-linux-gnu/libresolv.* /lib/

ENTRYPOINT [&quot;/app&quot;]</code></pre>
<p>Постойте, какие библиотеки, речь же шла о статической линковке… Дело в том, что <code>libc</code>, в отличие от <code>musl</code> не может быть полностью “влинкован” в приложение. Причин несколько, но для обывателя их можно сформулировать как “так получилось”. Обратите внимание на то, какие именно библиотеки мы копируем – <code>libnss_dns</code> и <code>libresolv</code> (ну и еще <code>ld-linux</code> для возможности динамической загрузки последних). Это библиотеки для работы с <code>DNS</code>, а инфраструктура <a href="https://en.wikipedia.org/wiki/Name_Service_Switch">NSS</a> предоставляет много backend-ов для работы с <code>DNS</code> (вплоть до чтения из файла). Так как нет возможности на этапе сборки указать какой именно backend использовать, <code>libc</code> всегда загружает их динамически, заставляя “тянуть” еще и себя, кроме необходимых <code>NSS</code> плагинов. С таким положением дел все до сих пор мирятся (убеждая окружающих, что статическая линковка “не нужна”, ведь все равно придется “тянуть” с собой <code>libc</code>), периодически “сбегая” в лагерь <code>musl</code>, если нужна “действительно” статическая линковка.</p>
<p>В итоге, вышел компромиссный вариант (из-за невозможности использовать <code>musl</code>) – статическая линковка (размер исполняемого файла <strong>4.6 мегатайта</strong>), вместе с <code>libc</code> и библиотеками для <code>DNS</code>, сделали размер образа не таким большим – всего <strong>7.2 мегабайта</strong>. Цель по уменьшению размера итогово образа и обеспечению дополнительной безопасности можно считать достигнутой. Особенно греет душу мысль о том, что бот в состоянии покоя занимает в оперативной памяти всего <strong>812 килобайт</strong>!</p>
<pre class="console"><code>Cmp   Size  Command
4.6 MB  ├── app
246 kB  ├── etc
246 kB  │   └── ssl
235 kB  │       ├── certs
235 kB  │       │   └── ca-certificates.crt
 11 kB  │       └── openssl.cnf
2.3 MB  └── lib
171 kB      ├── ld-linux-x86-64.so.2
2.0 MB      ├── libc.so.6
 27 kB      ├── libnss_dns.so.2
101 kB      └── libresolv.so.2

Total Image size: 7.2 MB
Potential wasted space: 0 B
Image efficiency score: 100 %</code></pre>
  </section>
</article>

  </main>

  <footer>
    Site generated by
    <a href="http://jaspervdj.be/hakyll">Hakyll</a>
  </footer>
</body>

</html>]]></description>
    <pubDate>Mon, 11 May 2020 00:00:00 UT</pubDate>
    <guid>https://maksar.github.io/posts/code/2020-05-11-size-matters.html</guid>
    <dc:creator>Shestakov Alex</dc:creator>
</item>
<item>
    <title>Parsing environment variables with reverse tests</title>
    <link>https://maksar.github.io/posts/code/2020-03-23-env-parsing.html</link>
    <description><![CDATA[<!doctype html>
<html lang="en">

<head>
  <meta charset="utf-8">
  <meta http-equiv="x-ua-compatible" content="ie=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Shestakov Alex Blog - Parsing environment variables with reverse tests</title>
  <link rel="stylesheet" href="../../css/default.css" />

  <script type="text/javascript" src="../../vendor/jquery/jquery-3.6.0.min.js"></script>
  <script type="text/javascript" src="../../vendor/fresco/js/fresco.min.js"></script>
  <link rel="stylesheet" type="text/css" href="../../vendor/fresco/css/fresco.css" />

  <link rel="stylesheet" href="../../vendor/highlight/styles/atom-one-dark.min.css">
  <script src="../../vendor/highlight/highlight.min.js"></script>
  <script src="../../vendor/highlight/languages/haskell.min.js"></script>
  <script src="../../vendor/highlight/languages/ruby.min.js"></script>
  <script src="../../vendor/highlight/languages/shell.min.js"></script>
  <script src="../../vendor/highlight/languages/kotlin.min.js"></script>
  <script src="../../vendor/highlight/languages/javascript.min.js"></script>
  <script>hljs.highlightAll();</script>
</head>

<body>
  <header>
    <div class="logo">
      <a href="../../">Shestakov Alex</a>
    </div>
    <nav>
      &amp;<a href="../../languages/english.html">english</a> &amp;<a href="../../languages/russian.html">russian</a>
      @<a href="../../categories/code.html">code</a> @<a href="../../categories/projects.html">projects</a>
      <a href="../../about.html">About</a>
    </nav>
  </header>

  <main role="main">
    <h1>Parsing environment variables with reverse tests</h1>
    <article>
  <section class="header">
    March 23, 2020  @<a href="../../categories/code.html">code</a> #<a href="../../tags/russian.html">russian</a> #<a href="../../tags/haskell.html">haskell</a> #<a href="../../tags/lens.html">lens</a> #<a href="../../tags/polysemy.html">polysemy</a> #<a href="../../tags/QuickCheck.html">QuickCheck</a>
  </section>
  <section>
    <p><img src="../../images/env-parsing/logo.jpg" class="center" /></p>
<p>Тема сегодняшней статьи – чтение конфигурационных значений из переменных окружения и связанные с этим процессом трудности. В небольших системах, где нет необходимости в полноценном конфигурационном файле, принято брать настройки из переменных окружения, это один из ключевых моментов <a href="https://12factor.net/config">12 factor app</a> манифеста. Это надежный и относительно безопасный способ конфигурации, он отлично поддерживается всеми операционными системами, облачными платформами и средствами контейнеризации.</p>
<p>“Так а что сложного-то?” спросите вы, “в любом языке программирования есть для этого встроенные средства, сдобренные ни одним десятком библиотек, упрощающих этот процесс. Действительно, проблем с тем, чтобы прочитать значение переменной окружения нет. Но если подходить к задаче не системно, запрашивая значения переменных окружения там и тут в коде, трудности все-же начнутся. Такую программу будет сложно сопровождать, так как существует множество мест в коде системы, где идет обращение к одной и той же переменной окружения. Но самое важное – такую систему будет сложно тестировать – необходимо использовать дополнительные ухищрения для подмены значений переменных окружения в тестовом режиме работы. Трудностей, со временем, будет становиться все больше, так как с добавлением нового функционала вырастет и количество настроек.</p>
<p>Способ преодоления таких трудностей эволюционно-естественен – необходимо сконцентрировать работу с конфигурацией в одном месте, сделать процесс добавления новой настройки понятным, упростить доступ к настройкам в коде бизнес-логики.</p>
<h2 id="постановка-задачи">Постановка задачи</h2>
<p>В <code>Haskell</code>, несмотря на всю его “строгость” и приверженность к математически чистым функциям, тоже можно обращаться к переменным окружения откуда угодно, но “тут так не принято”… Язык подталкивает программиста отказаться от идеи так делать, заставляя явно отказываться от “чистоты” функций и терять все связанные с этим свойством преимущества. В мире строго-типизированных языков “удобно” не читать “настройки” посреди кода с логикой, а читать их в начале исполнения программы, преобразовать во внутреннюю структуру данных (с адекватными типами вместо строк) и использовать явно передавая такую структуру или ее части в остальные “вычисления” оставляя их свободными от side-effect-ов.</p>
<p>Довольно философствований, show me the code, как говорится.</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">Config</span> <span class="ot">=</span> <span class="dt">Config</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>  {<span class="ot"> _ldapHost               ::</span> <span class="dt">Text</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>  ,<span class="ot"> _ldapPort               ::</span> <span class="dt">PortNumber</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>  ,<span class="ot"> _port                   ::</span> <span class="dt">Int</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>  ,<span class="ot"> _verifyToken            ::</span> <span class="dt">Text</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>  ,<span class="ot"> _pageToken              ::</span> <span class="dt">Text</span></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a>  ,<span class="ot"> _user                   ::</span> <span class="dt">Text</span></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a>  ,<span class="ot"> _password               ::</span> <span class="dt">Text</span></span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a>  ,<span class="ot"> _activeUsersContainer   ::</span> <span class="dt">Dn</span></span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a>  ,<span class="ot"> _projectGroupsContainer ::</span> <span class="dt">Dn</span></span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a>  ,<span class="ot"> _projectGroupsOrgunits  ::</span> <span class="dt">NonEmpty</span> <span class="dt">Text</span></span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a>  }</span>
<span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a>  <span class="kw">deriving</span> (<span class="dt">Eq</span>, <span class="dt">Show</span>, <span class="dt">Generic</span>, <span class="dt">Default</span>)</span></code></pre></div>
<p><code>Config</code> – та самая структура данных с настройками, необходимыми для работы <a href="https://itransition.workplace.com/chat/t/105678357661487">Group Manager</a> бота. В начале работы системы, эта структура заполняется значениями из переменных окружения.</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="ot">readConfig ::</span> (<span class="dt">Member</span> <span class="dt">Environment</span> r, <span class="dt">Member</span> (<span class="dt">Error</span> <span class="dt">Text</span>) r) <span class="ot">=&gt;</span> <span class="dt">Sem</span> r <span class="dt">Config</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>readConfig <span class="ot">=</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>  <span class="dt">Config</span> <span class="op">&lt;$&gt;</span> lookupText <span class="st">&quot;LDABOT_LDAP_HOST&quot;</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>         <span class="op">&lt;*&gt;</span> lookupNumber <span class="st">&quot;LDABOT_LDAP_PORT&quot;</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>         <span class="op">&lt;*&gt;</span> lookupNumber <span class="st">&quot;LDABOT_PORT&quot;</span></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>         <span class="op">&lt;*&gt;</span> lookupText <span class="st">&quot;LDABOT_VERIFY_TOKEN&quot;</span></span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a>         <span class="op">&lt;*&gt;</span> lookupText <span class="st">&quot;LDABOT_PAGE_TOKEN&quot;</span></span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a>         <span class="op">&lt;*&gt;</span> lookupText <span class="st">&quot;LDABOT_USERNAME&quot;</span></span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a>         <span class="op">&lt;*&gt;</span> lookupText <span class="st">&quot;LDABOT_PASSWORD&quot;</span></span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a>         <span class="op">&lt;*&gt;</span> (<span class="dt">Dn</span> <span class="op">&lt;$&gt;</span> lookupText <span class="st">&quot;LDABOT_USERS_CONTAINER&quot;</span>)</span>
<span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a>         <span class="op">&lt;*&gt;</span> (<span class="dt">Dn</span> <span class="op">&lt;$&gt;</span> lookupText <span class="st">&quot;LDABOT_GROUPS_CONTAINER&quot;</span>)</span>
<span id="cb2-12"><a href="#cb2-12" aria-hidden="true" tabindex="-1"></a>         <span class="op">&lt;*&gt;</span> (fromList <span class="op">.</span> splitOn <span class="st">&quot;,&quot;</span> <span class="op">&lt;$&gt;</span> lookupText <span class="st">&quot;LDABOT_GROUPS_ORGUNITS&quot;</span>)</span></code></pre></div>
<p>Как ни странно, функция <code>readConfig</code> является “чистой”, хотя вроде бы и обращается к внешнему миру (то есть имеет side-effect-ы). Почему это так и как работает – я расскажу в следующей статье про “алгебраические эффекты”. А пока, еще немного деталей реализации:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="ot">lookupText ::</span> (<span class="dt">Member</span> <span class="dt">Environment</span> r, <span class="dt">Member</span> (<span class="dt">Error</span> <span class="dt">Text</span>) r) <span class="ot">=&gt;</span> <span class="dt">Text</span> <span class="ot">-&gt;</span> <span class="dt">Sem</span> r <span class="dt">Text</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>lookupText name <span class="ot">=</span> lookupEnv name <span class="op">&gt;&gt;=</span> \<span class="kw">case</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>    <span class="dt">Nothing</span>     <span class="ot">-&gt;</span> throw <span class="op">$</span> <span class="fu">unwords</span> [<span class="st">&quot;Please set&quot;</span>, name, <span class="st">&quot;environment variable.&quot;</span>]</span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>    <span class="dt">Just</span> string <span class="ot">-&gt;</span> <span class="fu">return</span> <span class="op">$</span> <span class="fu">pack</span> string</span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a><span class="ot">lookupNumber ::</span> (<span class="dt">Read</span> a, <span class="dt">Member</span> <span class="dt">Environment</span> r, <span class="dt">Member</span> (<span class="dt">Error</span> <span class="dt">Text</span>) r) <span class="ot">=&gt;</span> <span class="dt">Text</span> <span class="ot">-&gt;</span> <span class="dt">Sem</span> r a</span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a>lookupNumber name <span class="ot">=</span> <span class="fu">read</span> <span class="op">.</span> unpack <span class="op">&lt;$&gt;</span> lookupText name</span></code></pre></div>
<p>Функция <code>lookupText</code> обращается к операционной системе через <code>lookupEnv name</code> и анализирует результат. Если значения не оказалось – генерируется ошибка, в противном случае – функция возвращает значение переменной окружения. <code>lookupNumber</code> является надстройкой над <code>lookupText</code>, которая после успешного получения значения конвертирует его в число. Интересным моментом тут является оператор <code>&lt;$&gt;</code> (так же известный как <code>fmap</code> в <code>Haskell</code> или <code>Optional.map</code> в <code>Java</code>). Его использование позволяет “не засорять” код обработкой граничных случаев вида “если <code>lookupText</code> вернул <code>null</code>, то тоже вернуть <code>null</code>; в противном случае – преобразовать в число и вернуть”. Если вы вспомнили про elvis-оператор, то знайте, он является лишь частным случаем <code>fmap</code> для <code>null</code>-ов ;)</p>
<p><code>&lt;$&gt;</code> несколько раз применяется еще и внутри <code>readConfig</code> для тех же целей – преобразовывать прочитанное из <code>LDABOT_USERS_CONTAINER</code> в <code>Dn</code> (термин из мира <code>LDAP</code>, означает <code>distinguished name</code>) есть смысл только если там что-то было. Самое первое использование <code>&lt;$&gt;</code> немного интереснее. Помните рассказ про <code>&lt;$&gt;</code> из <a href="../../posts/2020-02-27-aeson-parsing.html">первой статьи</a> про парсинг <code>json</code>-а? Речь шла о том, чтобы “адаптировать” конструктор структуры данных <code>Message</code> (который принимает строки) к “парсеру строк”. Если посмотреть на такую адаптацию с другой стороны – операция <code>&lt;$&gt;</code> превращала “парсер строк” в “парсер <code>Message</code>-ей” постулируя “когда (и если) оригинальный парсер строк что-нибудь вернет, примени к этому конструктор <code>Message</code>”.</p>
<p>С <code>Config</code>-ом ситуация та же, оператор <code>&lt;$&gt;</code> постулирует “когда (и если) <strong>все</strong> операнды для вызова функции <code>Config</code> будут готовы – вызывай”. Если ранее мы конструировали <code>Message</code> “в контексте” парсера, который может ничего “не напарсить”, то сейчас мы конструируем <code>Config</code> “в контексте” вычисления, которое может вернуть ошибку. <code>fmap</code> – он как обычный <code>map</code>, только не для списков, а для любых “контейнеров” или “вычислений” (деревья, Optional, парсер, генератор). Подготовка операндов происходит при помощи <code>&lt;*&gt;</code>. Его отличие от <code>&lt;$&gt;</code> в том, что теперь с обоих сторон “вычисления, которые могут вернуть ошибку”. Механика сложная, зато код элегантный, без постоянных проверок (привет программистам на <code>golang</code>) и early return-ов.</p>
<h2 id="тестирование">Тестирование</h2>
<p>С проблематикой вроде разобрались, пора начинать извлекать пользу. из “централизации” работы с настройками а так же от использования “чистых” функций (не зря же прилагались усилия). С точки зрения кода, читающего значения переменных – совершенно не важно откуда именно происходит чтение – из реальных переменных окружения или из заранее подготовленного ассоциативного массива, главное, чтобы <code>lookupEnv</code> возвращала <code>Maybe Text</code>. Определив “тестовое окружение” как простой писок ключ-значение <code>type EnvironmentMock = [(Text, Text)]</code>, можно заставить <code>readConfig</code> читать данные из заранее подготовленного места.</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="ot">withMockedEnvironment ::</span> <span class="dt">EnvironmentMock</span> <span class="ot">-&gt;</span> <span class="dt">Sem</span> '[<span class="dt">Environment</span>, <span class="dt">Error</span> <span class="dt">Text</span>] a <span class="ot">-&gt;</span> <span class="dt">Either</span> <span class="dt">Text</span> a</span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>withMockedEnvironment mockedEnv <span class="ot">=</span> run <span class="op">.</span> runError <span class="op">.</span> fakeEnvironment mockedEnv</span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a><span class="ot">fakeEnvironment ::</span> <span class="dt">Member</span> (<span class="dt">Error</span> <span class="dt">Text</span>) r <span class="ot">=&gt;</span> <span class="dt">EnvironmentMock</span> <span class="ot">-&gt;</span> <span class="dt">InterpreterFor</span> <span class="dt">Environment</span> r</span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a>fakeEnvironment mockedEnv <span class="ot">=</span> interpret <span class="op">$</span> \<span class="kw">case</span></span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a>  <span class="dt">LookupEnv</span> name <span class="ot">-&gt;</span> <span class="fu">return</span> <span class="op">$</span> unpack <span class="op">&lt;$&gt;</span> <span class="fu">lookup</span> name mockedEnv</span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a>withMockedEnvironment</span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a>  [ (<span class="st">&quot;LDABOT_LDAP_HOST&quot;</span>, <span class="st">&quot;host&quot;</span>)</span>
<span id="cb4-10"><a href="#cb4-10" aria-hidden="true" tabindex="-1"></a>  , (<span class="st">&quot;LDABOT_LDAP_PORT&quot;</span>, <span class="st">&quot;123&quot;</span>)</span>
<span id="cb4-11"><a href="#cb4-11" aria-hidden="true" tabindex="-1"></a>  , (<span class="st">&quot;LDABOT_PORT&quot;</span>, <span class="st">&quot;234&quot;</span>)</span>
<span id="cb4-12"><a href="#cb4-12" aria-hidden="true" tabindex="-1"></a>  , (<span class="st">&quot;LDABOT_VERIFY_TOKEN&quot;</span>, <span class="st">&quot;vtoken&quot;</span>)</span>
<span id="cb4-13"><a href="#cb4-13" aria-hidden="true" tabindex="-1"></a>  , (<span class="st">&quot;LDABOT_PAGE_TOKEN&quot;</span>, <span class="st">&quot;ptoken&quot;</span>)</span>
<span id="cb4-14"><a href="#cb4-14" aria-hidden="true" tabindex="-1"></a>  , (<span class="st">&quot;LDABOT_USERNAME&quot;</span>, <span class="st">&quot;user&quot;</span>)</span>
<span id="cb4-15"><a href="#cb4-15" aria-hidden="true" tabindex="-1"></a>  , (<span class="st">&quot;LDABOT_PASSWORD&quot;</span>, <span class="st">&quot;pass&quot;</span>)</span>
<span id="cb4-16"><a href="#cb4-16" aria-hidden="true" tabindex="-1"></a>  , (<span class="st">&quot;LDABOT_USERS_CONTAINER&quot;</span>, <span class="st">&quot;ucont&quot;</span>)</span>
<span id="cb4-17"><a href="#cb4-17" aria-hidden="true" tabindex="-1"></a>  , (<span class="st">&quot;LDABOT_GROUPS_CONTAINER&quot;</span>, <span class="st">&quot;gcont&quot;</span>)</span>
<span id="cb4-18"><a href="#cb4-18" aria-hidden="true" tabindex="-1"></a>  , (<span class="st">&quot;LDABOT_GROUPS_ORGUNITS&quot;</span>, <span class="st">&quot;ou1,ou2&quot;</span>)</span>
<span id="cb4-19"><a href="#cb4-19" aria-hidden="true" tabindex="-1"></a>  ] readConfig <span class="ot">`shouldBe`</span> <span class="dt">Right</span> <span class="dt">Config</span> {</span>
<span id="cb4-20"><a href="#cb4-20" aria-hidden="true" tabindex="-1"></a>    _ldapHost <span class="ot">=</span> <span class="st">&quot;host&quot;</span>,</span>
<span id="cb4-21"><a href="#cb4-21" aria-hidden="true" tabindex="-1"></a>    _ldapPort <span class="ot">=</span> <span class="dv">123</span>,</span>
<span id="cb4-22"><a href="#cb4-22" aria-hidden="true" tabindex="-1"></a>    _port <span class="ot">=</span> <span class="dv">234</span>,</span>
<span id="cb4-23"><a href="#cb4-23" aria-hidden="true" tabindex="-1"></a>    _verifyToken <span class="ot">=</span> <span class="st">&quot;vtoken&quot;</span>,</span>
<span id="cb4-24"><a href="#cb4-24" aria-hidden="true" tabindex="-1"></a>    _pageToken <span class="ot">=</span> <span class="st">&quot;ptoken&quot;</span>,</span>
<span id="cb4-25"><a href="#cb4-25" aria-hidden="true" tabindex="-1"></a>    _user <span class="ot">=</span> <span class="st">&quot;user&quot;</span>,</span>
<span id="cb4-26"><a href="#cb4-26" aria-hidden="true" tabindex="-1"></a>    _password <span class="ot">=</span> <span class="st">&quot;pass&quot;</span>,</span>
<span id="cb4-27"><a href="#cb4-27" aria-hidden="true" tabindex="-1"></a>    _activeUsersContainer <span class="ot">=</span> <span class="dt">Dn</span> <span class="st">&quot;ucont&quot;</span>,</span>
<span id="cb4-28"><a href="#cb4-28" aria-hidden="true" tabindex="-1"></a>    _projectGroupsContainer <span class="ot">=</span> <span class="dt">Dn</span> <span class="st">&quot;gcont&quot;</span>,</span>
<span id="cb4-29"><a href="#cb4-29" aria-hidden="true" tabindex="-1"></a>    _projectGroupsOrgunits <span class="ot">=</span> <span class="st">&quot;ou1&quot;</span> <span class="op">:|</span> [<span class="st">&quot;ou2&quot;</span>]</span>
<span id="cb4-30"><a href="#cb4-30" aria-hidden="true" tabindex="-1"></a>  }</span></code></pre></div>
<p>Как говорит один мой знакомый, “мало вариативности”. Он ярый поклонник разработки через тесты, (привет тебе, В.С.)“. Ну что-ж, постараемся добавить вариативности и уважить скептиков, заявляющих при чтении таких тестов –”а как убедиться в том, что реализация не состоит из хардкода именно этих значений”.</p>
<p>Есть такой прием в тестировании – проверять обратимость (<code>reverse(reverse(list)) === list</code>). Построение конфига из окружения - назовем прямым преобразованием Окружение -&gt; Конфиг. Если бы у нас было обратное преобразование (из Конфига в Окружение, из которого такой Конфиг прочитан), то мы бы могли проверить, что применив сначала прямое преобрзование, а затем обратное – получается исходный Конфиг. Такую пару Окружения и Конфига называют изоморфной, а само преобразование – изоморфизмом. Как обычно бывает в математике – слово сложное, но за ним стоит простая идея ;)</p>
<p>Если сначала конфиг (абсолютно любой) преобразовать в набор пар ключ-значение, а потом из них попытаться “прочитать” конфиг обратно, то в итоге должны ведь получить исходный конфиг.</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="ot">toEnvironmentMock ::</span> <span class="dt">Config</span> <span class="ot">-&gt;</span> <span class="dt">EnvironmentMock</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a>toEnvironmentMock <span class="dt">Config</span> {<span class="op">..</span>} <span class="ot">=</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a>  [ (<span class="st">&quot;LDABOT_LDAP_HOST&quot;</span>, unpack _ldapHost)</span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a>  , (<span class="st">&quot;LDABOT_LDAP_PORT&quot;</span>, <span class="fu">show</span> _ldapPort)</span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a>  , (<span class="st">&quot;LDABOT_PORT&quot;</span>, <span class="fu">show</span> _port)</span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a>  , (<span class="st">&quot;LDABOT_VERIFY_TOKEN&quot;</span>, unpack _verifyToken)</span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a>  , (<span class="st">&quot;LDABOT_PAGE_TOKEN&quot;</span>, unpack _pageToken)</span>
<span id="cb5-8"><a href="#cb5-8" aria-hidden="true" tabindex="-1"></a>  , (<span class="st">&quot;LDABOT_USERNAME&quot;</span>, unpack _user)</span>
<span id="cb5-9"><a href="#cb5-9" aria-hidden="true" tabindex="-1"></a>  , (<span class="st">&quot;LDABOT_PASSWORD&quot;</span>, unpack _password)</span>
<span id="cb5-10"><a href="#cb5-10" aria-hidden="true" tabindex="-1"></a>  , (<span class="st">&quot;LDABOT_USERS_CONTAINER&quot;</span>, fromDn _activeUsersContainer)</span>
<span id="cb5-11"><a href="#cb5-11" aria-hidden="true" tabindex="-1"></a>  , (<span class="st">&quot;LDABOT_GROUPS_CONTAINER&quot;</span>, fromDn _projectGroupsContainer)</span>
<span id="cb5-12"><a href="#cb5-12" aria-hidden="true" tabindex="-1"></a>  , (<span class="st">&quot;LDABOT_GROUPS_ORGUNITS&quot;</span>, unpack <span class="op">$</span> intercalate <span class="st">&quot;,&quot;</span> <span class="op">$</span> toList _projectGroupsOrgunits)]</span>
<span id="cb5-13"><a href="#cb5-13" aria-hidden="true" tabindex="-1"></a>  <span class="kw">where</span></span>
<span id="cb5-14"><a href="#cb5-14" aria-hidden="true" tabindex="-1"></a>    fromDn (<span class="dt">Dn</span> dn) <span class="ot">=</span> unpack dn</span></code></pre></div>
<p>Имея прямое и обратное преобразование, можно записать:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a>it <span class="st">&quot;reads config from complete environment&quot;</span> <span class="op">$</span> forAll <span class="op">$</span> \config <span class="ot">-&gt;</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a>  withMockedEnvironment (toEnvironmentMock config) readConfig <span class="op">===</span> <span class="dt">Right</span> config</span></code></pre></div>
<p>Но это только success случай мы протестировали, пока не ясно как будет себя вести функция чтения конфига, если в переменных окружения будет отсутствовать одно из значений. Но погодите-ка – ведь у нас же есть способ получить окружение в виде списка ключ-значение. Достаточно только удалить из нее одну (случайную) строку и попытаться прочитать конфиг:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a>it <span class="st">&quot;fails to read a config from incomplete environment&quot;</span> <span class="op">$</span> forAll <span class="op">$</span> \config <span class="ot">-&gt;</span> <span class="kw">do</span></span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a>  shuffled <span class="ot">&lt;-</span> shuffle <span class="op">$</span> toEnvironmentMock config</span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a>  <span class="kw">let</span> ((missingKey, _), incompleteMock) <span class="ot">=</span> (<span class="fu">head</span> shuffled, <span class="fu">tail</span> shuffled)</span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a>  <span class="fu">return</span> <span class="op">$</span> withMockedEnvironment incompleteMock readConfig <span class="op">===</span> <span class="dt">Left</span> (<span class="fu">unwords</span> [<span class="st">&quot;Please set&quot;</span>, missingKey, <span class="st">&quot;environment variable.&quot;</span>])</span></code></pre></div>
<p>Ну вот, кажется удалось свести задачу тестирования функции чтения конфигурации к формированию произвольных конфигов. Эта задача для <code>Haskell</code> довольно типична – использовать property-based тестирование на нем очень любят. Так как структура <code>Config</code> состоит из достаточно примитивных типов и оберток над ними, то “произвольность” можно обеспечить с помощью всего нескольких строк.</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a>makeArbitrary '<span class="dt">'Config</span></span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a><span class="kw">instance</span> <span class="dt">Arbitrary</span> <span class="dt">Config</span> <span class="kw">where</span></span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a>  arbitrary <span class="ot">=</span> arbitraryConfig</span>
<span id="cb8-5"><a href="#cb8-5" aria-hidden="true" tabindex="-1"></a>  shrink <span class="ot">=</span> recursivelyShrink</span></code></pre></div>
<p>Благодаря тому, что <code>Config</code> теперь “реализует” <code>Arbitrary</code>, можно создавать “генератор” конфигов – <code>Gen Config</code> при помощи функции <code>arbitrary</code> из класса.</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a><span class="kw">class</span> <span class="dt">Arbitrary</span> a <span class="kw">where</span></span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a><span class="ot">  arbitrary ::</span> <span class="dt">Gen</span> a</span></code></pre></div>
<p>Попробуем в REPL-е сгенерировать что-нибудь случайное:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a><span class="op">&lt;</span> sample (<span class="ot">arbitrary ::</span> <span class="dt">Gen</span> <span class="dt">Config</span>)</span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;</span> <span class="dt">Config</span> {_ldapHost <span class="ot">=</span> <span class="st">&quot;\nIUZ\DELu\EMUG1\DEL\1002298\11790\DC3s\STX&quot;</span>, _ldapPort <span class="ot">=</span> <span class="dv">20</span>, _port <span class="ot">=</span> <span class="op">-</span><span class="dv">17</span>, _verifyToken <span class="ot">=</span> <span class="st">&quot;\SO\DLE9_1\NUL\210889\681130l\ENQ&quot;</span>, _pageToken <span class="ot">=</span> <span class="st">&quot;q\r;h1\959827\&amp;1~\703396P1~\837562\190001xjf&quot;</span>, _user <span class="ot">=</span> <span class="st">&quot;\466790\&amp;6\DC4j&quot;</span>, _password <span class="ot">=</span> <span class="st">&quot;{H&quot;</span>, _activeUsersContainer <span class="ot">=</span> <span class="dt">Dn</span> <span class="st">&quot;&quot;</span>, _projectGroupsContainer <span class="ot">=</span> <span class="dt">Dn</span> <span class="st">&quot;U\ACK\616135\570186v\672268\571313&quot;</span>, _projectGroupsOrgunits <span class="ot">=</span> <span class="st">&quot;\615852L$\598568\ESC6\fc&quot;</span> <span class="op">:|</span> [<span class="st">&quot;[h\DC4N[3pzk\b\SUB6\133277\14775&quot;</span>]}</span></code></pre></div>
<p>Работает! Теперь полиморфная функция <code>forAll</code>, обладающая типом <code>forAll :: (Show a, Testable prop) =&gt; Gen a -&gt; (a -&gt; prop) -&gt; Property</code> может принимать на вход “генератор конфигов” и проверять <code>Property</code> (по сути, чуть-чуть более хитрый предикат, где вместо <code>==</code> используется <code>===</code>).</p>
<pre class="console"><code>Env
  environment reading
    reads config from complete environment
      +++ OK, passed 100 tests.
    fails to read a config from incomplete environment
      +++ OK, passed 100 tests.</code></pre>
<p>Строка <code>+++ OK, passed 100 tests.</code> говорит о том, что было сгенерировано 100 случайных <code>Config</code>-ов для проверки инварианта – конвертации “окружение” и обратно. Количество тестов всегда можно задать аргументом командной строки при запусте тестов.</p>
<pre class="console"><code>$ stack test --test-arguments --qc-max-success=10000

Env
  environment reading
    reads config from complete environment
      +++ OK, passed 10000 tests.
    fails to read a config from incomplete environment
      +++ OK, passed 10000 tests.

Finished in 2.2859 seconds
2 examples, 0 failures</code></pre>
<p>От каких “ошибок” защищают такие defensive (regression, golden) тесты? Например, если случайно переставить местами строки при построении конфига – тесты это отловят. Либо если попытаться захардкодить какое-нибудь одно значение на этапе построения конфига – тесты тоже просигнализируют с несовпадении значений (сгенерированное случайное значение будет отличаться от статического хардкода). Изменение названия переменных, из которых читаем конфиг, такой тест тоже “отловит”, но отловит тут в кавычках, потому что такое падение теста не говорит о некорректности или неработоспособности программы, оно говорит лишь о том, что тесты нужно обновить, по сути “зашив” в процедуру генерации фейкового оружения новые названия переменных. В.С. непременно бы заметил еще на этапе написания тестов, что названия переменных повторяются и в реализации и в тестах – “не DRY”, сказал бы он в code review комментарии…</p>
<h2 id="суши-с-лупой">Суши с лупой</h2>
<p>Для того, чтобы избавиться из повторений, будем использовать популярную в функциональном программировании вещь – линзы. Линза, если совсем просто ее представить, это такая сущность, которая совмещает в себе getter и setter. Ну как setter… программирование же функциональное, immutability везде, нет никаких setter-ов, есть только функции <code>Value -&gt; Object -&gt; Object</code>, которые не меняют <code>Object</code>, а возвращают новый.</p>
<p>В структуре данных <code>Config</code> не случайно свойства начинались с символа подчеркивания, этому есть причина: для каждого поля структуры, <code>Haskell</code> объявит одноименную функцию с сигнатурой, например <code>_ldapHost :: Config -&gt; Text</code>. Если бы поле называлось <code>ldapHost</code>, то часто бы возникал конфликт имен при объявлении временных “переменных”. Да и смотря на использование <code>ldapHost</code> в коде подсознательно думаешь о нем, как о значении, а не как о функции.</p>
<p>Эту конвенцию “эксплуатирует” библиотека <code>lens</code>, позволяющая одной строкой сгенерировать линзы для каждого из полей структуры.</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true" tabindex="-1"></a>makeLenses '<span class="dt">'Config</span></span>
<span id="cb13-2"><a href="#cb13-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-3"><a href="#cb13-3" aria-hidden="true" tabindex="-1"></a><span class="ot">ldapHost ::</span> <span class="dt">Lens'</span> <span class="dt">Config</span> <span class="dt">Text</span></span>
<span id="cb13-4"><a href="#cb13-4" aria-hidden="true" tabindex="-1"></a><span class="ot">ldapPort ::</span> <span class="dt">Lens'</span> <span class="dt">Config</span> <span class="dt">PortNumber</span></span>
<span id="cb13-5"><a href="#cb13-5" aria-hidden="true" tabindex="-1"></a><span class="op">...</span></span></code></pre></div>
<p>Для чего вообще эти линзы удобны? Для работы со вложенным структурами данных в функциональном стиле. Имея список составных объектов.</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">Color</span> <span class="ot">=</span> <span class="dt">Color</span> {<span class="ot">_shade ::</span> <span class="dt">Text</span>}</span>
<span id="cb14-2"><a href="#cb14-2" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">Material</span> <span class="ot">=</span> <span class="dt">Material</span> {<span class="ot">_kind ::</span> <span class="dt">Text</span>,<span class="ot"> _color ::</span> <span class="dt">Color</span>}</span>
<span id="cb14-3"><a href="#cb14-3" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">Player</span> <span class="ot">=</span> <span class="dt">Player</span> {<span class="ot">_name ::</span> <span class="dt">Text</span>,<span class="ot"> _material ::</span> <span class="dt">Material</span>}</span>
<span id="cb14-4"><a href="#cb14-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-5"><a href="#cb14-5" aria-hidden="true" tabindex="-1"></a>makeLenses '<span class="dt">'Color</span></span>
<span id="cb14-6"><a href="#cb14-6" aria-hidden="true" tabindex="-1"></a>makeLenses '<span class="dt">'Material</span></span>
<span id="cb14-7"><a href="#cb14-7" aria-hidden="true" tabindex="-1"></a>makeLenses '<span class="dt">'Player</span></span>
<span id="cb14-8"><a href="#cb14-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-9"><a href="#cb14-9" aria-hidden="true" tabindex="-1"></a><span class="kw">let</span> players <span class="ot">=</span> [<span class="dt">Player</span> <span class="st">&quot;Bender&quot;</span> (<span class="dt">Material</span> <span class="st">&quot;metal&quot;</span> (<span class="dt">Color</span> <span class="st">&quot;shiny&quot;</span>))</span>
<span id="cb14-10"><a href="#cb14-10" aria-hidden="true" tabindex="-1"></a>              ,<span class="dt">Player</span> <span class="st">&quot;Fry&quot;</span> (<span class="dt">Material</span> <span class="st">&quot;meat&quot;</span> (<span class="dt">Color</span> <span class="st">&quot;yellow&quot;</span>))</span>
<span id="cb14-11"><a href="#cb14-11" aria-hidden="true" tabindex="-1"></a>              ,<span class="dt">Player</span> <span class="st">&quot;Leela&quot;</span> (<span class="dt">Material</span> <span class="st">&quot;meat&quot;</span> (<span class="dt">Color</span> <span class="st">&quot;purple&quot;</span>))]</span></code></pre></div>
<p>Можно выполнять нетривиальные операции “вглубь” на immutable данных используя “композицию линз” через знакомый оператор <code>.</code>:</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb15-1"><a href="#cb15-1" aria-hidden="true" tabindex="-1"></a><span class="op">&lt;</span> view material<span class="op">.</span>color<span class="op">.</span>shade <span class="op">$</span> <span class="fu">head</span> players</span>
<span id="cb15-2"><a href="#cb15-2" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;</span> <span class="st">&quot;shiny&quot;</span></span>
<span id="cb15-3"><a href="#cb15-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb15-4"><a href="#cb15-4" aria-hidden="true" tabindex="-1"></a><span class="op">&lt;</span> <span class="fu">map</span> (view <span class="op">$</span> material<span class="op">.</span>color<span class="op">.</span>shade) players</span>
<span id="cb15-5"><a href="#cb15-5" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;</span> [<span class="st">&quot;shiny&quot;</span>,<span class="st">&quot;yellow&quot;</span>,<span class="st">&quot;purple&quot;</span>]</span>
<span id="cb15-6"><a href="#cb15-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb15-7"><a href="#cb15-7" aria-hidden="true" tabindex="-1"></a><span class="op">&lt;</span> <span class="fu">map</span> (over (material<span class="op">.</span>color<span class="op">.</span>shade) (append <span class="st">&quot;super_&quot;</span>)) players</span>
<span id="cb15-8"><a href="#cb15-8" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;</span> [<span class="dt">Player</span> {_name <span class="ot">=</span> <span class="st">&quot;Bender&quot;</span>, _material <span class="ot">=</span> <span class="dt">Material</span> {_kind <span class="ot">=</span> <span class="st">&quot;metal&quot;</span>, _color <span class="ot">=</span> <span class="dt">Color</span> {_shade <span class="ot">=</span> <span class="st">&quot;super_shiny&quot;</span>}}}</span>
<span id="cb15-9"><a href="#cb15-9" aria-hidden="true" tabindex="-1"></a>  ,<span class="dt">Player</span> {_name <span class="ot">=</span> <span class="st">&quot;Fry&quot;</span>, _material <span class="ot">=</span> <span class="dt">Material</span> {_kind <span class="ot">=</span> <span class="st">&quot;meat&quot;</span>, _color <span class="ot">=</span> <span class="dt">Color</span> {_shade <span class="ot">=</span> <span class="st">&quot;super_yellow&quot;</span>}}}</span>
<span id="cb15-10"><a href="#cb15-10" aria-hidden="true" tabindex="-1"></a>  ,<span class="dt">Player</span> {_name <span class="ot">=</span> <span class="st">&quot;Leela&quot;</span>, _material <span class="ot">=</span> <span class="dt">Material</span> {_kind <span class="ot">=</span> <span class="st">&quot;meat&quot;</span>, _color <span class="ot">=</span> <span class="dt">Color</span> {_shade <span class="ot">=</span> <span class="st">&quot;super_purple&quot;</span>}}}]</span></code></pre></div>
<p>Последний пример особенно нагляден, если бы не линзы, пришлось бы писать что-то вроде:</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb16-1"><a href="#cb16-1" aria-hidden="true" tabindex="-1"></a><span class="fu">map</span> (\player <span class="ot">-&gt;</span></span>
<span id="cb16-2"><a href="#cb16-2" aria-hidden="true" tabindex="-1"></a>    <span class="kw">let</span> material <span class="ot">=</span> _material player</span>
<span id="cb16-3"><a href="#cb16-3" aria-hidden="true" tabindex="-1"></a>        color <span class="ot">=</span> _color material</span>
<span id="cb16-4"><a href="#cb16-4" aria-hidden="true" tabindex="-1"></a>        shade <span class="ot">=</span> _shade color</span>
<span id="cb16-5"><a href="#cb16-5" aria-hidden="true" tabindex="-1"></a>    <span class="kw">in</span> player { _material <span class="ot">=</span> material { _color <span class="ot">=</span> color { _shade <span class="ot">=</span> append <span class="st">&quot;super_&quot;</span> shade } } }</span>
<span id="cb16-6"><a href="#cb16-6" aria-hidden="true" tabindex="-1"></a>  ) players</span></code></pre></div>
<p>Вернемся к нашей задачу из избавлению от дублирования. Объявим список пар ключ-линза – никто не запрещает так сделать, ведь линза, по сути, всего-лишь сложная функция, а функции в <code>Haskell</code> first-class значения:</p>
<div class="sourceCode" id="cb17"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb17-1"><a href="#cb17-1" aria-hidden="true" tabindex="-1"></a>settings <span class="ot">=</span> [</span>
<span id="cb17-2"><a href="#cb17-2" aria-hidden="true" tabindex="-1"></a>  (<span class="st">&quot;LDABOT_LDAP_HOST&quot;</span>,        ldapHost),</span>
<span id="cb17-3"><a href="#cb17-3" aria-hidden="true" tabindex="-1"></a>  (<span class="st">&quot;LDABOT_LDAP_PORT&quot;</span>,        ldapPort <span class="op">.</span> isoRead <span class="op">.</span> packed),</span>
<span id="cb17-4"><a href="#cb17-4" aria-hidden="true" tabindex="-1"></a>  (<span class="st">&quot;LDABOT_PORT&quot;</span>,             port <span class="op">.</span> isoRead <span class="op">.</span> packed),</span>
<span id="cb17-5"><a href="#cb17-5" aria-hidden="true" tabindex="-1"></a>  (<span class="st">&quot;LDABOT_VERIFY_TOKEN&quot;</span>,     verifyToken),</span>
<span id="cb17-6"><a href="#cb17-6" aria-hidden="true" tabindex="-1"></a>  (<span class="st">&quot;LDABOT_PAGE_TOKEN&quot;</span>,       pageToken),</span>
<span id="cb17-7"><a href="#cb17-7" aria-hidden="true" tabindex="-1"></a>  (<span class="st">&quot;LDABOT_USERNAME&quot;</span>,         user),</span>
<span id="cb17-8"><a href="#cb17-8" aria-hidden="true" tabindex="-1"></a>  (<span class="st">&quot;LDABOT_PASSWORD&quot;</span>,         password),</span>
<span id="cb17-9"><a href="#cb17-9" aria-hidden="true" tabindex="-1"></a>  (<span class="st">&quot;LDABOT_USERS_CONTAINER&quot;</span>,  activeUsersContainer <span class="op">.</span> isoDn),</span>
<span id="cb17-10"><a href="#cb17-10" aria-hidden="true" tabindex="-1"></a>  (<span class="st">&quot;LDABOT_GROUPS_CONTAINER&quot;</span>, projectGroupsContainer <span class="op">.</span> isoDn),</span>
<span id="cb17-11"><a href="#cb17-11" aria-hidden="true" tabindex="-1"></a>  (<span class="st">&quot;LDABOT_GROUPS_ORGUNITS&quot;</span>,  projectGroupsOrgunits <span class="op">.</span> isoNonEmpty <span class="op">.</span> splitted)]</span>
<span id="cb17-12"><a href="#cb17-12" aria-hidden="true" tabindex="-1"></a>  <span class="kw">where</span></span>
<span id="cb17-13"><a href="#cb17-13" aria-hidden="true" tabindex="-1"></a><span class="ot">    isoRead ::</span> (<span class="dt">Read</span> a, <span class="dt">Show</span> a) <span class="ot">=&gt;</span> <span class="dt">Iso'</span> a <span class="dt">String</span></span>
<span id="cb17-14"><a href="#cb17-14" aria-hidden="true" tabindex="-1"></a>    isoRead     <span class="ot">=</span> iso <span class="fu">show</span> <span class="fu">read</span></span>
<span id="cb17-15"><a href="#cb17-15" aria-hidden="true" tabindex="-1"></a>    isoDn       <span class="ot">=</span> iso (\(<span class="dt">Dn</span> dn) <span class="ot">-&gt;</span> dn) <span class="dt">Dn</span></span>
<span id="cb17-16"><a href="#cb17-16" aria-hidden="true" tabindex="-1"></a>    isoNonEmpty <span class="ot">=</span> iso toList fromList</span>
<span id="cb17-17"><a href="#cb17-17" aria-hidden="true" tabindex="-1"></a>    splitted    <span class="ot">=</span> iso (intercalate <span class="st">&quot;,&quot;</span>) (splitOn <span class="st">&quot;,&quot;</span>)</span></code></pre></div>
<p>Обратите внимание на уже знакомые нам изоморфизмы снизу – пары функций, которые необходимы для преобразования линз к одному виду <code>Lens' Config Text</code>. Ведь исходя из типа <code>Config</code> линза <code>activeUsersContainer</code> работает с типом <code>Dn</code>, а мы хотим унифицировать все лизны в <code>settings</code> приведя их к одной, строковой сигнатуре.</p>
<p>Процедуру “чтения конфигурации” поменяем на свертку</p>
<div class="sourceCode" id="cb18"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb18-1"><a href="#cb18-1" aria-hidden="true" tabindex="-1"></a><span class="ot">readConfig ::</span> (<span class="dt">Member</span> <span class="dt">Environment</span> r, <span class="dt">Member</span> (<span class="dt">Error</span> <span class="dt">Text</span>) r) <span class="ot">=&gt;</span> <span class="dt">Sem</span> r <span class="dt">Config</span></span>
<span id="cb18-2"><a href="#cb18-2" aria-hidden="true" tabindex="-1"></a>readConfig <span class="ot">=</span> foldM reducer (<span class="dt">Config</span> {}) settings</span>
<span id="cb18-3"><a href="#cb18-3" aria-hidden="true" tabindex="-1"></a>  <span class="kw">where</span></span>
<span id="cb18-4"><a href="#cb18-4" aria-hidden="true" tabindex="-1"></a>    reducer config (name, lens) <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb18-5"><a href="#cb18-5" aria-hidden="true" tabindex="-1"></a>      value <span class="ot">&lt;-</span> <span class="fu">lookup</span> name</span>
<span id="cb18-6"><a href="#cb18-6" aria-hidden="true" tabindex="-1"></a>      <span class="fu">return</span> <span class="op">$</span> set lens value config</span></code></pre></div>
<p>Код осуществляет свертку <code>foldM</code> при помощи функции <code>reducer</code> списка <code>settings</code>, используя в качестве начального значения пустой <code>Config {}</code>. Функция <code>reducer</code> имеет на входе два параметра – <code>config</code> в качестве аккумулятор-а и пара ключ-линза из списка <code>settings</code>. Она читает (<code>lookup name</code>) значение переменной окружения, устанавливает прочитанное значение при помощи линзы в <code>config</code> и возвращает его. Таким образом, последовательно пройдясь по всему списку <code>settings</code> все поля структуры <code>Config</code> окажутся заполнены значениями.</p>
<p>Наконец-то мы можем избавиться от дублирования названий переменных в тестах. Вместо свертки, делаем простой обход списка <code>map</code> просматривая через линзу значения в <code>config</code>-е.</p>
<div class="sourceCode" id="cb19"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb19-1"><a href="#cb19-1" aria-hidden="true" tabindex="-1"></a><span class="ot">toEnvironmentMock ::</span> <span class="dt">Config</span> <span class="ot">-&gt;</span> <span class="dt">EnvironmentMock</span></span>
<span id="cb19-2"><a href="#cb19-2" aria-hidden="true" tabindex="-1"></a>toEnvironmentMock config <span class="ot">=</span> <span class="fu">map</span> (\(name, lens) <span class="ot">-&gt;</span> (name, view lens config)) settings</span></code></pre></div>
<p>Использование инверсии, идемпотентности и других инвариантов - здорово помогает при написании тестов, Вариативность, как говорит мой знакомый - при этом “на высоте” ;)</p>
  </section>
</article>

  </main>

  <footer>
    Site generated by
    <a href="http://jaspervdj.be/hakyll">Hakyll</a>
  </footer>
</body>

</html>]]></description>
    <pubDate>Mon, 23 Mar 2020 00:00:00 UT</pubDate>
    <guid>https://maksar.github.io/posts/code/2020-03-23-env-parsing.html</guid>
    <dc:creator>Shestakov Alex</dc:creator>
</item>
<item>
    <title>Type-safe API for server endpoints and clients</title>
    <link>https://maksar.github.io/posts/code/2020-03-09-servant.html</link>
    <description><![CDATA[<!doctype html>
<html lang="en">

<head>
  <meta charset="utf-8">
  <meta http-equiv="x-ua-compatible" content="ie=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Shestakov Alex Blog - Type-safe API for server endpoints and clients</title>
  <link rel="stylesheet" href="../../css/default.css" />

  <script type="text/javascript" src="../../vendor/jquery/jquery-3.6.0.min.js"></script>
  <script type="text/javascript" src="../../vendor/fresco/js/fresco.min.js"></script>
  <link rel="stylesheet" type="text/css" href="../../vendor/fresco/css/fresco.css" />

  <link rel="stylesheet" href="../../vendor/highlight/styles/atom-one-dark.min.css">
  <script src="../../vendor/highlight/highlight.min.js"></script>
  <script src="../../vendor/highlight/languages/haskell.min.js"></script>
  <script src="../../vendor/highlight/languages/ruby.min.js"></script>
  <script src="../../vendor/highlight/languages/shell.min.js"></script>
  <script src="../../vendor/highlight/languages/kotlin.min.js"></script>
  <script src="../../vendor/highlight/languages/javascript.min.js"></script>
  <script>hljs.highlightAll();</script>
</head>

<body>
  <header>
    <div class="logo">
      <a href="../../">Shestakov Alex</a>
    </div>
    <nav>
      &amp;<a href="../../languages/english.html">english</a> &amp;<a href="../../languages/russian.html">russian</a>
      @<a href="../../categories/code.html">code</a> @<a href="../../categories/projects.html">projects</a>
      <a href="../../about.html">About</a>
    </nav>
  </header>

  <main role="main">
    <h1>Type-safe API for server endpoints and clients</h1>
    <article>
  <section class="header">
    March  9, 2020  @<a href="../../categories/code.html">code</a> #<a href="../../tags/russian.html">russian</a> #<a href="../../tags/haskell.html">haskell</a> #<a href="../../tags/servant.html">servant</a>
  </section>
  <section>
    <p><img src="../../images/servant/logo.jpg" class="center" /></p>
<p>Итак - подошло время очередной технической статьи. На этот раз речь пойдет про API-over-HTTP. Вроде банальнейшая вещь, каждый так “сто раз делал” и чего вообще можно было на эту тему необычного придумать… Действительно, практически в любом backend-е есть слой “контроллеров”, который отвечает за то, чтобы функции приложения были доступны извне по протоколу <code>http</code>. Кто-то использует <code>json</code>, кто-то <code>xml</code>, но общий знаменатель всегда - <code>http</code>.</p>
<p><code>REST API</code> - давно стал стандартом де-факто. Все привыкли к модели ресурсов-существительных и стандартных глаголов-действий <code>CRUDL</code>. В code review я сам часто советую заменить action-ы <code>up</code> и <code>down</code> ресурса <code>vote</code> на два отдельных контроллера <code>upvote</code> и <code>downvote</code> с методом <code>create</code>, для соответствия принципам <code>REST</code>.</p>
<p>Но не <code>REST</code>-ом единым, как говорится, есть еще <code>GraphQL</code>, и много чего другого. Для очень маленьких приложений с одним-двумя endpoint-ами следовать заветам <code>REST</code> не так уж и необходимо. Сегодня мы как раз поговорим о подходе к API, который исповедует библиотека <code>Servant</code> из мира языка программирования <code>Haskell</code>, которую я использовал при написании бота <a href="https://itransition.workplace.com/chat/t/105678357661487">Group Manager</a>.</p>
<h2 id="api-как-тип">API как тип</h2>
<p>Библиотека <code>Servant</code> требует описать все ваше API в виде типа. Одного, весьма развесистого и длинного, но все-же типа (как <code>String</code> или <code>List Integer</code>). Рассмотрим пример из практики. Endpoint, реагирующий на оповещения от Facebook-а можно описать как:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="dt">MessageAPI</span> <span class="ot">=</span> <span class="dt">ReqBody</span> '[<span class="dt">JSON</span>] <span class="dt">Messages</span> <span class="op">:&gt;</span> <span class="dt">Post</span> '[<span class="dt">JSON</span>] (<span class="dt">NonEmpty</span> <span class="dt">SendTextMessageResponse</span>)</span></code></pre></div>
<p>Этот тип, состоит из двух частей, разделенных комбинатором <code>:&gt;</code> (читать стоит как… как стрелку, например). Даже не зная всей специфики синтаксиса, можно догадаться, что речь идет о <code>POST</code> запросе, который в body принимает сообщение типа <code>Messages</code> в виде <code>json</code>-а и возвращает непустой список <code>SendTextMessageResponse</code>-ов, так же в виде <code>json</code>-а.</p>
<p>API редко состоит только из одного endpoint-а. Наш случай - не исключение, Facebook требует, чтобы у принимающей нотификации стороны был еще один метод, для <a href="https://developers.facebook.com/docs/graph-api/webhooks/getting-started/#verification-requests">верификации endpoint-а</a>, добавим его.</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="dt">WebHookAPI</span> <span class="ot">=</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>       <span class="dt">ReqBody</span> '[<span class="dt">JSON</span>] <span class="dt">Messages</span> <span class="op">:&gt;</span> <span class="dt">Post</span> '[<span class="dt">JSON</span>] (<span class="dt">NonEmpty</span> <span class="dt">SendTextMessageResponse</span>)</span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>  <span class="op">:&lt;|&gt;</span> <span class="dt">RequiredParam</span> <span class="st">&quot;hub.verify_token&quot;</span> <span class="dt">Text</span> <span class="op">:&gt;</span> <span class="dt">RequiredParam</span> <span class="st">&quot;hub.challenge&quot;</span> <span class="dt">Text</span> <span class="op">:&gt;</span> <span class="dt">Get</span> '[<span class="dt">PlainText</span>] <span class="dt">Text</span></span></code></pre></div>
<p>При помощи комбинатора <code>:&lt;|&gt;</code> (это не emoji, это аналог операции “альтернатива” <code>&lt;|&gt;</code> из <a href="https://itransition.workplace.com/groups/143641062970056/permalink/484712628862896/">предыдущей статьи</a>) к первому запросу добавился еще один: он реагирует на <code>GET</code> запрос, требует наличия двух текстовых параметров и отвечает plain текстом, без всякого <code>json</code>-а. Лишь только посмотрев на тип можно сразу понять протокол взаимодействия приложения с окружающим миром, не обращаясь к документации, не рыща по исходникам в поисках аннотаций над контроллерами и их методами.</p>
<p>Так же как и части типа объединяются между собой комбинатором <code>:&lt;|&gt;</code>, так и реализации этих endpoint-ов можно объединить в одно целое.</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="ot">webhookMessage ::</span> <span class="dt">Messages</span> <span class="ot">-&gt;</span> <span class="dt">Handler</span> (<span class="dt">NonEmpty</span> <span class="dt">SendTextMessageResponse</span>)</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>webhookMessage <span class="ot">=</span> <span class="op">...</span> <span class="co">-- implementation omitted</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a><span class="ot">webhookVerify ::</span> <span class="dt">Text</span> <span class="ot">-&gt;</span> <span class="dt">Text</span> <span class="ot">-&gt;</span> <span class="dt">Handler</span> <span class="dt">Text</span></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>webhookVerify <span class="ot">=</span> <span class="op">...</span> <span class="co">-- implementation omitted</span></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a>entireAPI <span class="ot">=</span> webhookVerify <span class="op">:&lt;|&gt;</span> webhookMessage</span></code></pre></div>
<p>При этом их типы тоже объединятся. Не будем утруждать себя и спросим у <code>REPL</code>-а (в комплируемых языках <code>REPL</code> – не редкость):</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;</span> <span class="op">:</span>t entireAPI</span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a><span class="op">&lt;</span><span class="ot"> entireAPI ::</span> <span class="dt">Messages</span> <span class="ot">-&gt;</span> <span class="dt">Handler</span> (<span class="dt">NonEmpty</span> <span class="dt">SendTextMessageResponse</span>) <span class="op">:&lt;|&gt;</span> <span class="dt">Text</span> <span class="ot">-&gt;</span> <span class="dt">Text</span> <span class="ot">-&gt;</span> <span class="dt">Handler</span> <span class="dt">Text</span></span></code></pre></div>
<h2 id="возможности">Возможности</h2>
<p>Компилятор не даст собрать систему, в которой программист “забыл” обработать какой-то параметр или пытается ответить текстом на запрос, в контракте ответа которого требуется список. Библиотека <code>Servant</code> берет на себя много рутинной работы по ответу на запросы, которые “не обрабатываются”, то есть не описаны (не предусмотрены) в типе. Так же <code>Servant</code> занимается операциями <code>encode</code>/<code>decode</code> данных в/из <code>json</code> или <code>xml</code> форматы в соответствии с заявленным в типе и обработкой ошибок, связанных с этим.</p>
<p>Но все же, пока ничего экстраординарного, ну описан контракт в виде типа, что с того… Наверное дело в том, что можно удобно будет описывать повторяющиеся части API? Написали один раз параметризованный тип:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="co">--   - GET /&lt;name&gt;</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a><span class="co">--   - GET /&lt;name&gt;/id</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a><span class="co">--   - POST /&lt;name&gt;</span></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="dt">CreateReadList</span> (<span class="ot">name ::</span> <span class="dt">Symbol</span>) a <span class="ot">=</span> name <span class="op">:&gt;</span></span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a> (                            <span class="dt">Get</span>  '[<span class="dt">JSON</span>] [a]</span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a> <span class="op">:&lt;|&gt;</span> <span class="dt">Capture</span> <span class="st">&quot;id&quot;</span> <span class="dt">Integer</span> <span class="op">:&gt;</span> <span class="dt">Get</span>  '[<span class="dt">JSON</span>] a</span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a> <span class="op">:&lt;|&gt;</span> <span class="dt">ReqBody</span> '[<span class="dt">JSON</span>] a    <span class="op">:&gt;</span> <span class="dt">Post</span> '[<span class="dt">JSON</span>] <span class="dt">NoContent</span></span>
<span id="cb5-8"><a href="#cb5-8" aria-hidden="true" tabindex="-1"></a> )</span></code></pre></div>
<p>И используем его для нескольких типов сущностей:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="dt">API</span> <span class="ot">=</span> <span class="dt">FactoringAPI</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a>     <span class="op">:&lt;|&gt;</span> <span class="dt">CreateReadList</span> <span class="st">&quot;users&quot;</span> <span class="dt">User</span></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a>     <span class="op">:&lt;|&gt;</span> <span class="dt">CreateReadList</span> <span class="st">&quot;products&quot;</span> <span class="dt">Product</span></span></code></pre></div>
<p>Если захотим в ответ на <code>POST</code> запрос для создания сущности начать что-то возвращать (например id созданной записи), то изменение сделанное в одном месте (вместо <code>NoContent</code> напишем <code>Integer</code>) отразится сразу и на <code>user</code>-ах и на <code>product</code>-ах, причем компилятор нам точно скажет где именно в коде начало возникать несовпадение типов, чтобы мы точно не забыли вернуть <code>Integer</code> из обработчика запроса.</p>
<p>Но эта кроличья нора несколько глубже… Так как тип известен на этапе компиляции, а в Haskell есть интроспекция типов (тоже на этапе компиляции), то можно информацию из типа использовать для… генерации кода!</p>
<p>Объявляемый тип API представляет собой контракт обмена сообщениями. Но сообщения же можно не только принимать, но еще и отправлять! Бот <a href="https://itransition.workplace.com/chat/t/105678357661487">Group Manager</a> тоже вынужден это делать для общения с пользователем. Facebook не обращает внимания на то, что вы ему шлете в ответ на нотификацию о сообщении от пользователя, ему главное чтобы HTTP код был 200. Для того, чтобы пользователю написать – нужно воспользоваться специальным <a href="https://developers.facebook.com/docs/messenger-platform/reference/send-api/">Facebook Messaging API</a>, то есть послать несколько сообщений Facebook-у по HTTP. А что если описать и этот протокол взаимодействия в виде типа?</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="dt">RequiredParam</span> <span class="ot">=</span> <span class="dt">QueryParam'</span> '[<span class="dt">Strict</span>, <span class="dt">Required</span>]</span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="dt">AccessTokenParam</span> <span class="ot">=</span> <span class="dt">RequiredParam</span> <span class="st">&quot;access_token&quot;</span> <span class="dt">Text</span></span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="dt">FBMessengerSendAPI</span> <span class="ot">=</span></span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a>       <span class="st">&quot;me&quot;</span> <span class="op">:&gt;</span> <span class="st">&quot;messages&quot;</span> <span class="op">:&gt;</span> <span class="dt">ReqBody</span> '[<span class="dt">JSON</span>] <span class="dt">SendTextMessageRequest</span> <span class="op">:&gt;</span> <span class="dt">AccessTokenParam</span> <span class="op">:&gt;</span> <span class="dt">Post</span> '[<span class="dt">JSON</span>] <span class="dt">SendTextMessageResponse</span></span>
<span id="cb7-6"><a href="#cb7-6" aria-hidden="true" tabindex="-1"></a>  <span class="op">:&lt;|&gt;</span> <span class="st">&quot;me&quot;</span> <span class="op">:&gt;</span> <span class="st">&quot;messages&quot;</span> <span class="op">:&gt;</span> <span class="dt">ReqBody</span> '[<span class="dt">JSON</span>] <span class="dt">ServiceMessageRequest</span> <span class="op">:&gt;</span> <span class="dt">AccessTokenParam</span> <span class="op">:&gt;</span> <span class="dt">Post</span> '[<span class="dt">JSON</span>] ()</span>
<span id="cb7-7"><a href="#cb7-7" aria-hidden="true" tabindex="-1"></a>  <span class="op">:&lt;|&gt;</span> <span class="dt">Capture</span> <span class="st">&quot;user_id&quot;</span> <span class="dt">Text</span> <span class="op">:&gt;</span> <span class="dt">RequiredParam</span> <span class="st">&quot;fields&quot;</span> <span class="dt">Text</span> <span class="op">:&gt;</span> <span class="dt">AccessTokenParam</span> <span class="op">:&gt;</span> <span class="dt">Get</span> '[<span class="dt">JSON</span>] <span class="dt">UserInfo</span></span></code></pre></div>
<p>Первый и второй API вызовы выглядят похожими. С точки зрения Facebook это, вообще говоря, один и тот же <code>GET</code> endpoint на URL-е <code>"/me/messages"</code>, который принимает <code>json</code> в body, но с точки зрения нас, как потребителя этой API, вызовы разные, с разным назначением и даже возвращаемым типом (в случае служебных сообщений нам “не важно” что Facebook на него ответил).</p>
<p>Прелесть в том, что код для методов доступа к такому API может быть автоматически сгенерирован, нужно только немного помочь компилятору, написав “заглушки” методов с сигнатурами типов:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="ot">sendTextMessage ::</span> <span class="dt">SendTextMessageRequest</span> <span class="ot">-&gt;</span> <span class="dt">Token</span> <span class="ot">-&gt;</span> <span class="dt">ClientM</span> <span class="dt">SendTextMessageResponse</span></span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a><span class="ot">sendServiceMessage ::</span> <span class="dt">ServiceMessageRequest</span> <span class="ot">-&gt;</span> <span class="dt">Token</span> <span class="ot">-&gt;</span> <span class="dt">ClientM</span> <span class="dt">SendTextMessageResponse</span></span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a><span class="ot">getUserInfo ::</span> <span class="dt">Text</span> <span class="ot">-&gt;</span> <span class="dt">Text</span> <span class="ot">-&gt;</span> <span class="dt">Token</span> <span class="ot">-&gt;</span> <span class="dt">ClientM</span> <span class="dt">UserInfo</span></span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-5"><a href="#cb8-5" aria-hidden="true" tabindex="-1"></a>sendTextMessage <span class="op">:&lt;|&gt;</span> sendServiceMessage <span class="op">:&lt;|&gt;</span> getUserInfo <span class="ot">=</span> client (<span class="dt">Proxy</span><span class="ot"> ::</span> <span class="dt">Proxy</span> <span class="dt">FBMessengerSendAPI</span>)</span></code></pre></div>
<p>Пользоваться методами можно предоставив “направление” <code>BaseUrl Https "graph.facebook.com" 443 "/v6.0"</code>:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a>runClientM (getUserInfo <span class="st">&quot;123&quot;</span> <span class="st">&quot;email&quot;</span> (<span class="dt">Token</span> <span class="st">&quot;access_token&quot;</span>)) <span class="op">$</span> with graphAPIBaseUrl <span class="op">&gt;&gt;=</span> \<span class="kw">case</span></span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a>  <span class="dt">Left</span> <span class="fu">error</span>     <span class="ot">-&gt;</span> <span class="co">-- Do something with error</span></span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a>  <span class="dt">Right</span> userInfo <span class="ot">-&gt;</span> <span class="co">-- userInfo from Facebook, has type UserInfo</span></span></code></pre></div>
<p>Пропадает необходимость работы с низкоуровневыми HTTP библиотеками, нет нужды вручную заниматься чтением <code>json</code>-а из ответа сервера, даже строить URL-ы самому не надо (обратите внимание, метод <code>getUserInfo</code> ничего об URL-е “не знает”).</p>
<p>Подход, среди прочего, позволяет: - на основании информации из типа сгенерировать код на <a href="https://hackage.haskell.org/package/servant-js">JavaScript</a> (или на другом <a href="https://hackage.haskell.org/package/servant-foreign">языке</a>) для доступа к такой API-шке; - создать <a href="https://hackage.haskell.org/package/servant-swagger-1.1.8/docs/Servant-Swagger.html">Swagger</a> описание API-шки из ее типа либо наоборот, сгенерировать тип на основе Swagger описания; - в несколько строк создать <a href="https://hackage.haskell.org/package/servant-mock">mock</a> версию API-шки, которая бы возвращала случайные данные, но в строгом в соответствии с ожидаемым форматом; - сгенерировать <a href="https://hackage.haskell.org/package/servant-docs">документацию</a> в markdown формате с описанием и примерами использования; - написать <a href="https://hackage.haskell.org/package/servant-quickcheck-0.0.8.0/docs/Servant-QuickCheck.html">тест</a>, который будет “долбить” все наши endpoint-ы запросами со случайными данными проверяя предикаты <code>not500 &lt;%&gt; notLongerThan 1000000</code> (для целей нагрузочного тестирования) или <code>onlyJsonObjects</code> (чтобы отловить “ошибки дизайна” API вида <code>Post '[JSON] ()</code>).</p>
<p>И это не теоретические “возможности”, для всего есть рабочие библиотеки. Более того, начали появляться <a href="https://www.47deg.com/blog/introducing-mu-haskell-0-1/">реализации</a> той же идеи, но вместо <code>HTTP REST</code> использующие <code>gRPC</code> (говорят сейчас так модно в мире микро-сервисных архитектур).</p>
<h2 id="refactoring">Refactoring</h2>
<p>“Сломать” работающий сервис в процессе рефакторинга становится крайне проблематично. К примеру, решили мы избавиться от дублирования в описании типа <code>FBMessengerSendAPI</code>. В нем несколько раз повторяется часть, моделирующая префикс URL-а “/me/messages”, да и описывать в каждом из endpoint-ов факт того, что “надо бы token передать” утомительно.</p>
<p>Прямо как в алгебраическом уравнении, “выносим за скобки” <code>AccessTokenParam</code>, а затем и префикс <code>"me" :&gt; "messages"</code>. В результате token будет применяться ко всем endpoint-ам, а префикс, только к первым двум (в соответствии со свойством <a href="https://ru.wikipedia.org/wiki/%D0%94%D0%B8%D1%81%D1%82%D1%80%D0%B8%D0%B1%D1%83%D1%82%D0%B8%D0%B2%D0%BD%D0%BE%D1%81%D1%82%D1%8C">дистрибутивности</a>).</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a><span class="co">-- Initial version</span></span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="dt">FBMessengerSendAPI</span> <span class="ot">=</span></span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true" tabindex="-1"></a>       <span class="st">&quot;me&quot;</span> <span class="op">:&gt;</span> <span class="st">&quot;messages&quot;</span> <span class="op">:&gt;</span> <span class="dt">ReqBody</span> '[<span class="dt">JSON</span>] <span class="dt">SendTextMessageRequest</span> <span class="op">:&gt;</span> <span class="dt">AccessTokenParam</span> <span class="op">:&gt;</span> <span class="dt">Post</span> '[<span class="dt">JSON</span>] <span class="dt">SendTextMessageResponse</span></span>
<span id="cb10-4"><a href="#cb10-4" aria-hidden="true" tabindex="-1"></a>  <span class="op">:&lt;|&gt;</span> <span class="st">&quot;me&quot;</span> <span class="op">:&gt;</span> <span class="st">&quot;messages&quot;</span> <span class="op">:&gt;</span> <span class="dt">ReqBody</span> '[<span class="dt">JSON</span>] <span class="dt">ServiceMessageRequest</span> <span class="op">:&gt;</span> <span class="dt">AccessTokenParam</span> <span class="op">:&gt;</span> <span class="dt">Post</span> '[<span class="dt">JSON</span>] ()</span>
<span id="cb10-5"><a href="#cb10-5" aria-hidden="true" tabindex="-1"></a>  <span class="op">:&lt;|&gt;</span> <span class="dt">Capture</span> <span class="st">&quot;user_id&quot;</span> <span class="dt">Text</span> <span class="op">:&gt;</span> <span class="dt">RequiredParam</span> <span class="st">&quot;fields&quot;</span> <span class="dt">Text</span> <span class="op">:&gt;</span> <span class="dt">AccessTokenParam</span> <span class="op">:&gt;</span> <span class="dt">Get</span> '[<span class="dt">JSON</span>] <span class="dt">UserInfo</span></span>
<span id="cb10-6"><a href="#cb10-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-7"><a href="#cb10-7" aria-hidden="true" tabindex="-1"></a><span class="co">-- Step 1 - extracting AccessTokenParam</span></span>
<span id="cb10-8"><a href="#cb10-8" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="dt">FBMessengerSendAPI</span> <span class="ot">=</span></span>
<span id="cb10-9"><a href="#cb10-9" aria-hidden="true" tabindex="-1"></a> <span class="dt">AccessTokenParam</span> <span class="op">:&gt;</span> (</span>
<span id="cb10-10"><a href="#cb10-10" aria-hidden="true" tabindex="-1"></a>       <span class="st">&quot;me&quot;</span> <span class="op">:&gt;</span> <span class="st">&quot;messages&quot;</span> <span class="op">:&gt;</span> <span class="dt">ReqBody</span> '[<span class="dt">JSON</span>] <span class="dt">SendTextMessageRequest</span> <span class="op">:&gt;</span> <span class="dt">Post</span> '[<span class="dt">JSON</span>] <span class="dt">SendTextMessageResponse</span></span>
<span id="cb10-11"><a href="#cb10-11" aria-hidden="true" tabindex="-1"></a>  <span class="op">:&lt;|&gt;</span> <span class="st">&quot;me&quot;</span> <span class="op">:&gt;</span> <span class="st">&quot;messages&quot;</span> <span class="op">:&gt;</span> <span class="dt">ReqBody</span> '[<span class="dt">JSON</span>] <span class="dt">ServiceMessageRequest</span>  <span class="op">:&gt;</span> <span class="dt">Post</span> '[<span class="dt">JSON</span>] <span class="dt">SendTextMessageResponse</span></span>
<span id="cb10-12"><a href="#cb10-12" aria-hidden="true" tabindex="-1"></a>  <span class="op">:&lt;|&gt;</span> <span class="dt">Capture</span> <span class="st">&quot;user_id&quot;</span> <span class="dt">Text</span> <span class="op">:&gt;</span> <span class="dt">RequiredParam</span> <span class="st">&quot;fields&quot;</span> <span class="dt">Text</span> <span class="op">:&gt;</span> <span class="dt">Get</span> '[<span class="dt">JSON</span>] <span class="dt">GetUserInfoMessageResponse</span>)</span>
<span id="cb10-13"><a href="#cb10-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-14"><a href="#cb10-14" aria-hidden="true" tabindex="-1"></a><span class="co">-- Step 2 - extracting &quot;me&quot; :&gt; &quot;messages&quot;</span></span>
<span id="cb10-15"><a href="#cb10-15" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="dt">FBMessengerSendAPI</span> <span class="ot">=</span></span>
<span id="cb10-16"><a href="#cb10-16" aria-hidden="true" tabindex="-1"></a> <span class="dt">AccessTokenParam</span> <span class="op">:&gt;</span> (</span>
<span id="cb10-17"><a href="#cb10-17" aria-hidden="true" tabindex="-1"></a>    <span class="st">&quot;me&quot;</span> <span class="op">:&gt;</span> <span class="st">&quot;messages&quot;</span> <span class="op">:&gt;</span> (</span>
<span id="cb10-18"><a href="#cb10-18" aria-hidden="true" tabindex="-1"></a>         <span class="dt">ReqBody</span> '[<span class="dt">JSON</span>] <span class="dt">SendTextMessageRequest</span> <span class="op">:&gt;</span> <span class="dt">Post</span> '[<span class="dt">JSON</span>] <span class="dt">SendTextMessageResponse</span></span>
<span id="cb10-19"><a href="#cb10-19" aria-hidden="true" tabindex="-1"></a>    <span class="op">:&lt;|&gt;</span> <span class="dt">ReqBody</span> '[<span class="dt">JSON</span>] <span class="dt">ServiceMessageRequest</span>  <span class="op">:&gt;</span> <span class="dt">Post</span> '[<span class="dt">JSON</span>] <span class="dt">SendTextMessageResponse</span>)</span>
<span id="cb10-20"><a href="#cb10-20" aria-hidden="true" tabindex="-1"></a>  <span class="op">:&lt;|&gt;</span> <span class="dt">Capture</span> <span class="st">&quot;user_id&quot;</span> <span class="dt">Text</span> <span class="op">:&gt;</span> <span class="dt">RequiredParam</span> <span class="st">&quot;fields&quot;</span> <span class="dt">Text</span> <span class="op">:&gt;</span> <span class="dt">Get</span> '[<span class="dt">JSON</span>] <span class="dt">GetUserInfoMessageResponse</span>)</span></code></pre></div>
<p>Соответственно, сигнатуры методов доступа к данным, тоже должны измениться. Раньше token был последним параметром, а станет первым:</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a><span class="ot">sendTextMessage ::</span> <span class="dt">Token</span> <span class="ot">-&gt;</span> <span class="dt">SendTextMessageRequest</span> <span class="ot">-&gt;</span> <span class="dt">ClientM</span> <span class="dt">SendTextMessageResponse</span></span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true" tabindex="-1"></a><span class="ot">sendServiceMessage ::</span> <span class="dt">Token</span> <span class="ot">-&gt;</span> <span class="dt">ServiceMessageRequest</span> <span class="ot">-&gt;</span> <span class="dt">ClientM</span> <span class="dt">SendTextMessageResponse</span></span>
<span id="cb11-3"><a href="#cb11-3" aria-hidden="true" tabindex="-1"></a><span class="ot">getUserInfo ::</span> <span class="dt">Token</span> <span class="ot">-&gt;</span> <span class="dt">Text</span> <span class="ot">-&gt;</span> <span class="dt">Text</span> <span class="ot">-&gt;</span> <span class="dt">ClientM</span> <span class="dt">UserInfo</span></span>
<span id="cb11-4"><a href="#cb11-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-5"><a href="#cb11-5" aria-hidden="true" tabindex="-1"></a>sendTextMessage <span class="op">:&lt;|&gt;</span> sendServiceMessage <span class="op">:&lt;|&gt;</span> getUserInfo <span class="ot">=</span> client (<span class="dt">Proxy</span><span class="ot"> ::</span> <span class="dt">Proxy</span> (<span class="dt">Flat</span> <span class="dt">FBMessengerSendAPI</span>))</span></code></pre></div>
<p>А так как они изменились, то компилятор будет ругаться на все их использования в коде, не позволяя нам нечаянно “забыть” поменять порядок в одном из мест. Строгая и мощная система типов не всегда “стоит на пути”, чаще она защищает от ошибок и предотвращает потенциальные баги ;)</p>
  </section>
</article>

  </main>

  <footer>
    Site generated by
    <a href="http://jaspervdj.be/hakyll">Hakyll</a>
  </footer>
</body>

</html>]]></description>
    <pubDate>Mon, 09 Mar 2020 00:00:00 UT</pubDate>
    <guid>https://maksar.github.io/posts/code/2020-03-09-servant.html</guid>
    <dc:creator>Shestakov Alex</dc:creator>
</item>
<item>
    <title>Parsing different JSON payloads into a single data structure</title>
    <link>https://maksar.github.io/posts/code/2020-02-27-aeson-parsing.html</link>
    <description><![CDATA[<!doctype html>
<html lang="en">

<head>
  <meta charset="utf-8">
  <meta http-equiv="x-ua-compatible" content="ie=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Shestakov Alex Blog - Parsing different JSON payloads into a single data structure</title>
  <link rel="stylesheet" href="../../css/default.css" />

  <script type="text/javascript" src="../../vendor/jquery/jquery-3.6.0.min.js"></script>
  <script type="text/javascript" src="../../vendor/fresco/js/fresco.min.js"></script>
  <link rel="stylesheet" type="text/css" href="../../vendor/fresco/css/fresco.css" />

  <link rel="stylesheet" href="../../vendor/highlight/styles/atom-one-dark.min.css">
  <script src="../../vendor/highlight/highlight.min.js"></script>
  <script src="../../vendor/highlight/languages/haskell.min.js"></script>
  <script src="../../vendor/highlight/languages/ruby.min.js"></script>
  <script src="../../vendor/highlight/languages/shell.min.js"></script>
  <script src="../../vendor/highlight/languages/kotlin.min.js"></script>
  <script src="../../vendor/highlight/languages/javascript.min.js"></script>
  <script>hljs.highlightAll();</script>
</head>

<body>
  <header>
    <div class="logo">
      <a href="../../">Shestakov Alex</a>
    </div>
    <nav>
      &amp;<a href="../../languages/english.html">english</a> &amp;<a href="../../languages/russian.html">russian</a>
      @<a href="../../categories/code.html">code</a> @<a href="../../categories/projects.html">projects</a>
      <a href="../../about.html">About</a>
    </nav>
  </header>

  <main role="main">
    <h1>Parsing different JSON payloads into a single data structure</h1>
    <article>
  <section class="header">
    February 27, 2020 &amp;<a href="../../languages/russian.html">russian</a> @<a href="../../categories/code.html">code</a> #<a href="../../tags/haskell.html">haskell</a>
  </section>
  <section>
    <p><img src="../../images/aeson-parsing/logo.jpg" class="center" /></p>
<p>Что-то давно не видно технических статей, спешу исправиться. В связи с задержкой, “градус гиковости” будет временно значительно повышен.</p>
<p>В публикации на прошлой неделе я <a href="../../posts/projects/2020-02-07-ldap-bot.html">рассказал</a> про новый бот для Workplace, который помогает управлять проектными (и не только) группами не прибегая к помощи <code>HelpDesk</code>.</p>
<p>Он написан на языке программирования <code>Haskell</code>, что для нашей компании выбор не совсем типичный (хотя с RFX-ами на эту тему к нам обращались). Знаниями надо делиться, так что запланировал несколько статей по мотивам написания этого бота. Статьи будут раскрывать некоторые интересные аспекты реализации, которые, на первый взгляд, могут показаться странными или неочевидными, но все же позволяют по новому взглянуть на типовые задачи, возникающие при разработке ПО.</p>
<h2 id="почему-haskell">Почему <code>Haskell</code>?</h2>
<p>Меня всегда привлекал этот язык программирования своей строгостью, лаконичностью и близостью к математике. Однако, написать на нем что-то более-менее крупное – шанса все не представлялось. Да, были небольшие pet-проекты, курсы по решению алгоритмических задач, но до “полноценного” production использования дело не доходило.</p>
<p>Но недавно я в очередной раз посетил конференцию по функциональному программированию - <a href="https://fby.dev">F(by)</a> и твердо решил – в этот раз (пока мотивация от докладов не прошла) – надо обязательно это сделать! Задача возникла совершенно естественным способом, из рутины. В настоящее время, многих менеджеров (а в последствии и всех остальных сотрудников) перевели на использование облачных учетных записей <code>Microsoft Office</code>. У них пропала возможность самостоятельно редактировать состав проектных групп.</p>
<p>Дело в том, что синхронизация между наземным хранилищем и “облаком” может быть настроена только однонаправленная (“земля-воздух” кхе-хе). Так как <code>Outlook</code> у менеджеров уже облачный, то изменения, которые они пытаются с его помощью сделать, не могут попасть в наш <code>Active Directory</code>. Предлагаемый <code>MIDS</code> путь - создавать запросы в <code>HelpDesk</code> - меня категорически не устраивал. Вот и пришла идея этот процесс автоматизировать.</p>
<p>План статей пока выходит примерно такой:</p>
<ul>
<li>Parsing different JSON payloads into a single data structure</li>
<li>Type-safe API for server endpoints and clients</li>
<li>Parsing environment variables with reverse tests</li>
<li>First-class Effects with pure testing</li>
<li>Static linking and Dockerize application</li>
</ul>
<h2 id="parsing-different-json-payloads-into-a-single-data-structure">Parsing different JSON payloads into a single data structure</h2>
<p>Чтобы не затягивать - начнем с первой темы ;)</p>
<p>Обычно, при разработке <code>API Endpoint</code>-ов принято иметь структуры данных, которые отражают принимаемый <code>json</code> один-к-одному. А только потом извлекать из него значения, полезные/нужные для работы программы. Так делается для… простоты. Программист знает формат <code>json</code>-а, который будет на входе его сервиса и либо (в случае динамического языка программирования) парсит этот <code>json</code> как нетипизированный <code>Value</code>, либо (в случае статической типизации) парсит его в экземпляр класса, отражающий структуру приходящего <code>json</code>-а.</p>
<p>Подход, сам по себе не плох, но появляется промежуточный слой <code>DTO</code>, для работы приложения совершенно не обязательный. Особенно если достоверно известно (как раз мой случай), что формат этого <code>json</code>-а вряд-ли изменится в скором времени – <code>json</code>-ы мне присылает <code>Facebook</code>.</p>
<p>Пропустить промежуточную <code>DTO</code> можно написав собственный парсер, который сразу преобразует <code>json</code> в нужную для работы системы структуру данных. Звучит довольно сложно, ведь все привыкли использовать для разбора <code>json</code>-а готовые библиотеки, основанные на аннотациях (в случае статических языков) либо парсить <code>json</code> “в нетипизированный объект”.</p>
<p>К счастью в <code>Haskell</code> дела с парсингом (всего, не только <code>json</code>) исторически обстоят намного лучше. Существуют библиотеки так называемых <code>parsing combinator</code>-ов, для создания эффективных парсеров при помощи композиции (композиция функций – краеугольный камень функционального программирования). С их помощью можно распарсить <code>json</code> прямо в нужную вам структуру данных.</p>
<p><code>Facebook</code> (<code>Workplace</code>) присылает боту примерно такой <code>json</code> в случае поступления сообщения от пользователя:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode json"><code class="sourceCode json"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a>  <span class="fu">{</span> <span class="dt">&quot;object&quot;</span><span class="fu">:</span> <span class="st">&quot;page&quot;</span><span class="fu">,</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>    <span class="dt">&quot;entry&quot;</span><span class="fu">:</span> <span class="ot">[</span><span class="fu">{</span><span class="dt">&quot;id&quot;</span><span class="fu">:</span> <span class="st">&quot;entry_id&quot;</span><span class="fu">,</span> <span class="dt">&quot;time&quot;</span><span class="fu">:</span> <span class="dv">123</span><span class="fu">,</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>      <span class="dt">&quot;messaging&quot;</span><span class="fu">:</span> <span class="ot">[</span><span class="fu">{</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>        <span class="dt">&quot;sender&quot;</span><span class="fu">:</span> <span class="fu">{</span><span class="dt">&quot;id&quot;</span><span class="fu">:</span> <span class="st">&quot;sender_id&quot;</span><span class="fu">,</span> <span class="dt">&quot;community&quot;</span><span class="fu">:</span> <span class="fu">{</span><span class="dt">&quot;id&quot;</span><span class="fu">:</span> <span class="st">&quot;community_id&quot;</span><span class="fu">}},</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>        <span class="dt">&quot;recipient&quot;</span><span class="fu">:</span> <span class="fu">{</span><span class="dt">&quot;id&quot;</span><span class="fu">:</span> <span class="st">&quot;recipient_id&quot;</span><span class="fu">},</span> <span class="dt">&quot;timestamp&quot;</span><span class="fu">:</span> <span class="dv">123</span><span class="fu">,</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>        <span class="dt">&quot;message&quot;</span><span class="fu">:</span> <span class="fu">{</span><span class="dt">&quot;mid&quot;</span><span class="fu">:</span> <span class="st">&quot;mid&quot;</span><span class="fu">,</span> <span class="dt">&quot;text&quot;</span><span class="fu">:</span> <span class="st">&quot;text&quot;</span><span class="fu">}}</span><span class="ot">]</span><span class="fu">}</span><span class="ot">]</span><span class="fu">}</span></span></code></pre></div>
<p>И такой <code>json</code> в случае, если пользователь нажал на кнопку из <code>help</code> сообщения.</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode json"><code class="sourceCode json"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a>  <span class="fu">{</span> <span class="dt">&quot;object&quot;</span><span class="fu">:</span> <span class="st">&quot;page&quot;</span><span class="fu">,</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>    <span class="dt">&quot;entry&quot;</span><span class="fu">:</span> <span class="ot">[</span><span class="fu">{</span><span class="dt">&quot;id&quot;</span><span class="fu">:</span> <span class="st">&quot;entry_id&quot;</span><span class="fu">,</span> <span class="dt">&quot;time&quot;</span><span class="fu">:</span> <span class="dv">123</span><span class="fu">,</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>      <span class="dt">&quot;messaging&quot;</span><span class="fu">:</span> <span class="ot">[</span><span class="fu">{</span><span class="dt">&quot;sender&quot;</span><span class="fu">:</span> <span class="fu">{</span><span class="dt">&quot;id&quot;</span><span class="fu">:</span> <span class="st">&quot;sender_id&quot;</span><span class="fu">,</span> <span class="dt">&quot;community&quot;</span><span class="fu">:</span> <span class="fu">{</span><span class="dt">&quot;id&quot;</span><span class="fu">:</span> <span class="st">&quot;community_id&quot;</span><span class="fu">}},</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>        <span class="dt">&quot;recipient&quot;</span><span class="fu">:</span> <span class="fu">{</span><span class="dt">&quot;id&quot;</span><span class="fu">:</span> <span class="st">&quot;recipient_id&quot;</span><span class="fu">},</span> <span class="dt">&quot;timestamp&quot;</span><span class="fu">:</span> <span class="dv">123</span><span class="fu">,</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>        <span class="dt">&quot;postback&quot;</span><span class="fu">:</span> <span class="fu">{</span><span class="dt">&quot;title&quot;</span><span class="fu">:</span> <span class="st">&quot;postback_title&quot;</span><span class="fu">,</span> <span class="dt">&quot;payload&quot;</span><span class="fu">:</span> <span class="st">&quot;payload&quot;</span><span class="fu">}}</span><span class="ot">]</span><span class="fu">}</span><span class="ot">]</span><span class="fu">}</span></span></code></pre></div>
<p>Обратите внимание на последнюю строку <code>json</code> сообщения, в первом случае передается <code>message</code>, а во втором <code>postback</code>. Данных много, но мне из этого всего нужен только <code>sender_id</code> - уникальный идентификатор отправителя (нужен для того, чтобы послать ему ответ) и <code>text</code> либо <code>payload</code> - текст сообщения, которое пользователь послал боту, либо <code>payload</code> (свойство <code>payload</code> назначается кнопке на help сообщении и присылается боту при ее нажатии пользователем).</p>
<p>Парсить все это я буду в такую незатейливую структуру данных:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">Messages</span> <span class="ot">=</span> <span class="dt">Messages</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>  {<span class="ot"> messages ::</span> <span class="dt">NonEmpty</span> <span class="dt">Message</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>  }</span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">Message</span> <span class="ot">=</span> <span class="dt">Message</span></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a>  {<span class="ot"> sender_id ::</span> <span class="dt">String</span></span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a>  ,<span class="ot"> text      ::</span> <span class="dt">String</span></span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a>  }</span></code></pre></div>
<p>Для парсинга была выбрана стандартная для этой задачи библиотека <code>Aeson</code>, требующая “реализовать” интерфейс <code>FromJSON</code>. Не пугаемся незнакомому синтаксису, я все объясню…</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="kw">instance</span> <span class="dt">FromJSON</span> <span class="dt">Messages</span> <span class="kw">where</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>  parseJSON <span class="ot">=</span> withObject <span class="st">&quot;root object&quot;</span> <span class="op">$</span> \root <span class="ot">-&gt;</span></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a>    root <span class="op">.:</span> <span class="st">&quot;entry&quot;</span> <span class="op">&gt;&gt;=</span> <span class="fu">fmap</span> (<span class="dt">Messages</span> <span class="op">.</span> fromList <span class="op">.</span> toList  <span class="op">.</span> join) <span class="op">.</span> withArray <span class="st">&quot;entries array&quot;</span></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>      (<span class="fu">mapM</span> <span class="op">$</span> withObject <span class="st">&quot;entry object&quot;</span> <span class="op">$</span> \entry <span class="ot">-&gt;</span></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a>        entry <span class="op">.:</span> <span class="st">&quot;messaging&quot;</span> <span class="op">&gt;&gt;=</span> withArray <span class="st">&quot;messaging array&quot;</span></span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a>          (<span class="fu">mapM</span> <span class="op">$</span> withObject <span class="st">&quot;message object&quot;</span> <span class="op">$</span> \message <span class="ot">-&gt;</span></span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a>            <span class="dt">Message</span></span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a>              <span class="op">&lt;$&gt;</span> (message <span class="op">.:</span> <span class="st">&quot;sender&quot;</span> <span class="op">&gt;&gt;=</span> (<span class="op">.:</span> <span class="st">&quot;id&quot;</span>))</span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a>              <span class="op">&lt;*&gt;</span> (  (message <span class="op">.:</span> <span class="st">&quot;message&quot;</span> <span class="op">&gt;&gt;=</span> (<span class="op">.:</span> <span class="st">&quot;text&quot;</span>))</span>
<span id="cb4-10"><a href="#cb4-10" aria-hidden="true" tabindex="-1"></a>                 <span class="op">&lt;|&gt;</span> (message <span class="op">.:</span>  <span class="st">&quot;postback&quot;</span> <span class="op">&gt;&gt;=</span> (<span class="op">.:</span> <span class="st">&quot;payload&quot;</span>))</span>
<span id="cb4-11"><a href="#cb4-11" aria-hidden="true" tabindex="-1"></a>                  )</span>
<span id="cb4-12"><a href="#cb4-12" aria-hidden="true" tabindex="-1"></a>          )</span>
<span id="cb4-13"><a href="#cb4-13" aria-hidden="true" tabindex="-1"></a>      )</span></code></pre></div>
<p>Основой является функция <code>withObject</code>, первый параметр которой служебный - название объекта, который мы собираемся парсить. Первый, самый главный объект обзовём <code>root object</code>. Второй параметр - это λ (lambda) - то есть функция, которая на вход принимает уже распаршенный <code>root</code> объект и дальше вольна делать с ним все что ей хочется. А хочется ей взять (при помощи оператора <code>.:</code>, чтобы было похоже на разделитель <code>:</code> ключ-значение из <code>json</code>-а) из <code>root</code> объекта поле по ключу <code>"entry"</code> и начать его парсить (<code>&gt;&gt;=</code>) дальше.</p>
<p>Пока опустим магию <code>fmap (Messages . fromList . toList  . join)</code>, о ней позже. Что в <code>json</code>-е лежит по ключу <code>"entry"</code>? А там массив, значит необходимо воспользоваться функцией <code>withArray</code> первый параметр которой, по традиции - описание того, что сейчас парсим. Нужны эти описания, к слову, для того, чтобы при ошибке парсинга вывести понятную ошибку, например ошибка для <code>json</code>-а <code>{"object": "page", "entry": 123}</code> будет такая: <code>parsing entries array failed, expected Array, but encountered Number</code>. Так что наличие этих описаний полезно как для <code>debug</code>-а, так и для информативности ошибок будущего софта.</p>
<p>Парсим <code>entry object</code>, <code>messaging array</code> и <code>message object</code> уже знакомыми нам <code>withObject</code> и <code>withArray</code>, попутно не забывая итерироваться по ним при помощи <code>mapM</code> (аналог простого <code>map</code>, парсим мы все же массивы, на выходе тоже должны быть массивы). Подошли к самому интересному, созданию итоговых объектов <code>Message</code>.</p>
<p>Конструктор <code>Message</code> (в данном случае <code>Message</code> – это название “конструктора” для создания одноименной структуры <code>Message</code>), принимает две строки - <code>sender_id</code> и <code>text</code>. В Процессе парсинга, у нас нет “строк” (с типом <code>String</code>), есть только “парсеры, которые могут вернуть строку” (с типом <code>Parser String</code>). Так что приходится пользоваться операторами <code>&lt;$&gt;</code> и <code>&lt;*&gt;</code> для того, чтобы увязать парсеры строк и строки между собой. Фактически, оператором <code>&lt;$&gt;</code> мы “учим” конструктор <code>Message</code> принимать вместо строк - парсеры строк.</p>
<p>На месте первого параметра (там где должен быть <code>sender_id</code>) передаем парсер <code>message .: "sender" &gt;&gt;= (.: "id")</code> - его можно перевести на “человеческий” язык как “когда я буду парсить <code>message</code>, я возьму у него свойство <code>sender</code>, а у его содержимого возьму свойство <code>id</code>”. То есть этот парсер, способен обработать json <code>"sender": {"id": "sender_id", "community": {"id": "community_id"}}</code>, вернув при этом только <code>sender_id</code> и проигнорировав все остальное, чего нам и нужно.</p>
<p>Аналогичным образом можно поступить и с <code>text</code> только вот не всегда <code>"message": {"mid": "mid", "text": "text"}}</code> от <code>Facebook</code> в этом месте приходит, иногда ещё и <code>"postback": {"title": "postback_title", "payload": "payload"}}</code> может быть. Мощь и изящество <code>parsing combinator</code>-ов раскрывается как раз в таких случаях. Комбинатор <code>&lt;|&gt;</code> говорит - сначала попытайся применить парсер, который слева от меня <code>(message .: "message" &gt;&gt;= (.: "text")</code>, а если он вернёт ошибку парсинга - попробуй тот, который от меня справа <code>message .:  "postback" &gt;&gt;= (.: "payload")</code>. В итоге, выражение <code>(message .: "message" &gt;&gt;= (.: "text")) &lt;|&gt; (message .:  "postback" &gt;&gt;= (.: "payload"))</code> распарсит либо цепочку <code>message-&gt;text</code> либо <code>postpack-&gt;payload</code> и вернет строку <code>String</code>. Мы скомбинировали два строковых парсера и получили на выходе тоже “парсер строк”, реализующий собой операцию “выбора”, на что намекал знак <code>|</code> в комбинаторе <code>&lt;|&gt;</code>.</p>
<p>Вспомним теперь про два вложенных друг в друга <code>mapM</code>. На уровне <code>root object</code>-а получается, что мы сформировали список списков сообщений, точнее вектор векторов (так как <code>Aeson</code> работает с векторами а не списками) то есть <code>Vector (Vector Message)</code>. Для его “схлопывания” применим <code>join</code>, превратив <code>Vector (Vector Message)</code> в <code>Vector Message</code>, затем (операцию <code>.</code> стоит “читать” слева направо, так как он право-ассоциативен) конвертируем <code>Vector</code> в список при помощи <code>toList</code>, список в <code>NonEmpty</code> (это вид списков, которые не могут быть пусты, ведь должно же в нотификации от <code>Facebook</code> быть хотя бы одно сообщение пользователя) при помощи <code>fromList</code> и передадим это все в конструктор <code>Messages</code>.</p>
<p>Ух, похоже это тот самый случай, когда объяснение кода заняло раз в 10 больше символов, чем сам код… Но что в итоге? Мы можем парсить два разных сообщения в одну структуру данных, с которой работает бот. Для него ведь не важно, сам пользователь написал в чате <code>/help</code> или воспользовался кнопкой-подсказкой. Реагировать бот на это должен одинаково. Тесты успешно проходят:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a>describe <span class="st">&quot;Messages spec&quot;</span> <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a>  <span class="kw">let</span><span class="ot"> decoding ::</span> <span class="dt">Text</span> <span class="ot">-&gt;</span> <span class="dt">Messages</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a>      decoding <span class="ot">=</span> fromJust <span class="op">.</span> decode <span class="op">.</span> <span class="fu">pack</span> <span class="op">.</span> unpack</span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a>  it <span class="st">&quot;parses text message properly&quot;</span> <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a>    decoding [I.text<span class="op">|</span></span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a>      { <span class="st">&quot;object&quot;</span><span class="op">:</span> <span class="st">&quot;page&quot;</span>,</span>
<span id="cb5-8"><a href="#cb5-8" aria-hidden="true" tabindex="-1"></a>        <span class="st">&quot;entry&quot;</span><span class="op">:</span> [{<span class="st">&quot;id&quot;</span><span class="op">:</span> <span class="st">&quot;id&quot;</span>, <span class="st">&quot;time&quot;</span><span class="op">:</span> <span class="dv">1</span>,</span>
<span id="cb5-9"><a href="#cb5-9" aria-hidden="true" tabindex="-1"></a>          <span class="st">&quot;messaging&quot;</span><span class="op">:</span> [{</span>
<span id="cb5-10"><a href="#cb5-10" aria-hidden="true" tabindex="-1"></a>            <span class="st">&quot;sender&quot;</span><span class="op">:</span> {<span class="st">&quot;id&quot;</span><span class="op">:</span> <span class="st">&quot;sender_id&quot;</span>, <span class="st">&quot;community&quot;</span><span class="op">:</span> {<span class="st">&quot;id&quot;</span><span class="op">:</span> <span class="st">&quot;id&quot;</span>}},</span>
<span id="cb5-11"><a href="#cb5-11" aria-hidden="true" tabindex="-1"></a>            <span class="st">&quot;recipient&quot;</span><span class="op">:</span> {<span class="st">&quot;id&quot;</span><span class="op">:</span> <span class="st">&quot;id&quot;</span>}, <span class="st">&quot;timestamp&quot;</span><span class="op">:</span> <span class="dv">1</span>,</span>
<span id="cb5-12"><a href="#cb5-12" aria-hidden="true" tabindex="-1"></a>            <span class="st">&quot;message&quot;</span><span class="op">:</span> {<span class="st">&quot;mid&quot;</span><span class="op">:</span> <span class="st">&quot;mid&quot;</span>, <span class="st">&quot;text&quot;</span><span class="op">:</span> <span class="st">&quot;text&quot;</span>}}]}]}</span>
<span id="cb5-13"><a href="#cb5-13" aria-hidden="true" tabindex="-1"></a>    <span class="op">|</span>] <span class="ot">`shouldBe`</span> (<span class="dt">Messages</span> <span class="op">$</span> (<span class="dt">Message</span> <span class="st">&quot;sender_id&quot;</span> <span class="st">&quot;text&quot;</span>) <span class="op">:|</span> [])</span>
<span id="cb5-14"><a href="#cb5-14" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-15"><a href="#cb5-15" aria-hidden="true" tabindex="-1"></a>  it <span class="st">&quot;parses postback message properly&quot;</span> <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb5-16"><a href="#cb5-16" aria-hidden="true" tabindex="-1"></a>    decoding [I.text<span class="op">|</span></span>
<span id="cb5-17"><a href="#cb5-17" aria-hidden="true" tabindex="-1"></a>      { <span class="st">&quot;object&quot;</span><span class="op">:</span> <span class="st">&quot;page&quot;</span>,</span>
<span id="cb5-18"><a href="#cb5-18" aria-hidden="true" tabindex="-1"></a>        <span class="st">&quot;entry&quot;</span><span class="op">:</span> [{<span class="st">&quot;id&quot;</span><span class="op">:</span> <span class="st">&quot;id&quot;</span>, <span class="st">&quot;time&quot;</span><span class="op">:</span> <span class="dv">1</span>,</span>
<span id="cb5-19"><a href="#cb5-19" aria-hidden="true" tabindex="-1"></a>          <span class="st">&quot;messaging&quot;</span><span class="op">:</span> [{<span class="st">&quot;sender&quot;</span><span class="op">:</span> {<span class="st">&quot;id&quot;</span><span class="op">:</span> <span class="st">&quot;sender_id&quot;</span>, <span class="st">&quot;community&quot;</span><span class="op">:</span> {<span class="st">&quot;id&quot;</span><span class="op">:</span> <span class="st">&quot;id&quot;</span>}},</span>
<span id="cb5-20"><a href="#cb5-20" aria-hidden="true" tabindex="-1"></a>            <span class="st">&quot;recipient&quot;</span><span class="op">:</span> {<span class="st">&quot;id&quot;</span><span class="op">:</span> <span class="st">&quot;id&quot;</span>}, <span class="st">&quot;timestamp&quot;</span><span class="op">:</span> <span class="dv">1</span>,</span>
<span id="cb5-21"><a href="#cb5-21" aria-hidden="true" tabindex="-1"></a>            <span class="st">&quot;postback&quot;</span><span class="op">:</span> {<span class="st">&quot;title&quot;</span><span class="op">:</span> <span class="st">&quot;title&quot;</span>, <span class="st">&quot;payload&quot;</span><span class="op">:</span> <span class="st">&quot;payload&quot;</span>}}]}]}</span>
<span id="cb5-22"><a href="#cb5-22" aria-hidden="true" tabindex="-1"></a>    <span class="op">|</span>] <span class="ot">`shouldBe`</span> (<span class="dt">Messages</span> <span class="op">$</span> <span class="dt">Message</span> <span class="st">&quot;sender_id&quot;</span> <span class="st">&quot;payload&quot;</span> <span class="op">:|</span> [])</span>
<span id="cb5-23"><a href="#cb5-23" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-24"><a href="#cb5-24" aria-hidden="true" tabindex="-1"></a>  it <span class="st">&quot;fails to parse incomplete json&quot;</span> <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb5-25"><a href="#cb5-25" aria-hidden="true" tabindex="-1"></a>    (eitherDecode <span class="st">&quot;{\&quot;object\&quot;: \&quot;page\&quot;}&quot;</span><span class="ot"> ::</span> <span class="dt">Either</span> <span class="dt">String</span> <span class="dt">Messages</span>) <span class="ot">`shouldBe`</span> <span class="dt">Left</span> <span class="st">&quot;Error in $: key \&quot;entry\&quot; not found&quot;</span></span></code></pre></div>
  </section>
</article>

  </main>

  <footer>
    Site generated by
    <a href="http://jaspervdj.be/hakyll">Hakyll</a>
  </footer>
</body>

</html>]]></description>
    <pubDate>Thu, 27 Feb 2020 00:00:00 UT</pubDate>
    <guid>https://maksar.github.io/posts/code/2020-02-27-aeson-parsing.html</guid>
    <dc:creator>Shestakov Alex</dc:creator>
</item>
<item>
    <title>Workplace bot for managing Actve Directory groups</title>
    <link>https://maksar.github.io/posts/projects/2020-02-07-ldap-bot.html</link>
    <description><![CDATA[<!doctype html>
<html lang="en">

<head>
  <meta charset="utf-8">
  <meta http-equiv="x-ua-compatible" content="ie=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Shestakov Alex Blog - Workplace bot for managing Actve Directory groups</title>
  <link rel="stylesheet" href="../../css/default.css" />

  <script type="text/javascript" src="../../vendor/jquery/jquery-3.6.0.min.js"></script>
  <script type="text/javascript" src="../../vendor/fresco/js/fresco.min.js"></script>
  <link rel="stylesheet" type="text/css" href="../../vendor/fresco/css/fresco.css" />

  <link rel="stylesheet" href="../../vendor/highlight/styles/atom-one-dark.min.css">
  <script src="../../vendor/highlight/highlight.min.js"></script>
  <script src="../../vendor/highlight/languages/haskell.min.js"></script>
  <script src="../../vendor/highlight/languages/ruby.min.js"></script>
  <script src="../../vendor/highlight/languages/shell.min.js"></script>
  <script src="../../vendor/highlight/languages/kotlin.min.js"></script>
  <script src="../../vendor/highlight/languages/javascript.min.js"></script>
  <script>hljs.highlightAll();</script>
</head>

<body>
  <header>
    <div class="logo">
      <a href="../../">Shestakov Alex</a>
    </div>
    <nav>
      &amp;<a href="../../languages/english.html">english</a> &amp;<a href="../../languages/russian.html">russian</a>
      @<a href="../../categories/code.html">code</a> @<a href="../../categories/projects.html">projects</a>
      <a href="../../about.html">About</a>
    </nav>
  </header>

  <main role="main">
    <h1>Workplace bot for managing Actve Directory groups</h1>
    <article>
  <section class="header">
    February  7, 2020  @<a href="../../categories/projects.html">projects</a> #<a href="../../tags/english.html">english</a> #<a href="../../tags/AD.html">AD</a> #<a href="../../tags/LDAP.html">LDAP</a> #<a href="../../tags/haskell.html">haskell</a> #<a href="../../tags/polysemy.html">polysemy</a> #<a href="../../tags/aeson.html">aeson</a> #<a href="../../tags/servant.html">servant</a>
  </section>
  <section>
    <p>Here is a facebook bot (we use facebook’s Workplace product as an intranet collaboration point) to manage AD groups.</p>
<p><a href="../../images/ldap-bot/1.png" class="fresco" data-fresco-group="thumbnail" data-fresco-options="ui: 'inside', thumbnails: false"><img src="../../previews/ldap-bot/1.png" /></a> <a href="../../images/ldap-bot/2.png" class="fresco" data-fresco-group="thumbnail" data-fresco-options="ui: 'inside', thumbnails: false"><img src="../../previews/ldap-bot/2.png" /></a> <a href="../../images/ldap-bot/3.png" class="fresco" data-fresco-group="thumbnail" data-fresco-options="ui: 'inside', thumbnails: false"><img src="../../previews/ldap-bot/3.png" /></a> <a href="../../images/ldap-bot/4.png" class="fresco" data-fresco-group="thumbnail" data-fresco-options="ui: 'inside', thumbnails: false"><img src="../../previews/ldap-bot/4.png" /></a></p>
<h2 id="history">History</h2>
<p>Since our organization migrated to hybrid schema (AD “on land” and Azure AD “in cloud”), it is no longer possible for employees connected to the on-premises server to manage the AD groups. While our IT department is figuring out a way to provide management abilities to the employees, I decided to create a simple way to add/remove people into AD groups (our access policies depend on group membership).</p>
<p>It started as a typical pet project, but I wanted to try new things along the way. First implementation was very straightforward (no ReaderT pattern, explicit passing of configuration values). When I felt the urge to write some tests, it became clear that full integration tests is not an option – neither facebook doesn’t like to be bombarded with messages, nor LDAP server. So I introduced a <a href="https://github.com/lexi-lambda/freer-simple">freer-simple</a> effects system, which was later replaced with <a href="https://github.com/polysemy-research/polysemy">polysemy</a>. It makes it possible to swap out some effects with mocks and write well-organized unit tests (I’m not saying they look pretty, they have to mock a lot of things after all).</p>
<p>At that time, the project was dockerized. I even achieved some remarkable results with statically compiling it with musl, UPC-ing the result and packing everything into scratch-based docker image (more on that in attachments). But deployment was a little bit complicated, since I had to either build docker images on a target host or use companies (which was also created and configured by me) docker registry. I started to explore options and got a second chance to look at NIX and <a href="https://github.com/NixOS/nixops">nixops</a> (currently I cannot imagine how I lived without it). So I NIX-ified the bot and even switched to the <a href="https://github.com/input-output-hk/haskell.nix">haskell.nix</a> alternative haskell nix infrastructure.</p>
<p>Along with that, following my built-in craving for minimalism, I decided to try out bare cabal instead of stack, which wasn’t the greatest experience (since stack is much-more user friendly and solved a lot of existing problems for you). But finally, with help of nix flakes, the project can be built the same way on darwin and linux systems.</p>
<p>Continuing to use the bot myself, I felt repeating pain of opening a browser and navigating to the facebook chat each time I have to add or remove someone from the group or even see who is the group manager (using <a href="https://linux.die.net/man/1/ldapsearch">ldapsearch</a> linux utility is not so pleasant, it’s output is quite cumbersome). So I decided to add a terminal interface to the bot. Same functions, but accessed from the terminal. Having nix in place, deployment configuration has changed only slightly, but I am free of browser pain now.</p>
<h2 id="internals">Internals</h2>
<p>I used <a href="https://hackage.haskell.org/package/servant-client">servant-client</a> to “<a href="https://github.com/maksar/ldap-bot/blob/master/src/Client/API.hs#L40-L44">talk</a>” to facebook via it’s graph API (do not confuse with graphQL) and <a href="https://hackage.haskell.org/package/servant-server">servant-server</a> to publish <a href="https://github.com/maksar/ldap-bot/blob/master/src/Server/API.hs#L27-L29">two endpoints</a> facebook will hit whenever a new message arrives to the bot. All communication is JSON-based backed by <a href="https://hackage.haskell.org/package/aeson">aeson</a> library. Instead of blindly mapping incoming messages to the data structures with the same shape, I decided to write a custom <a href="https://github.com/maksar/ldap-bot/blob/master/src/Server/Model.hs#L32">FromJSON</a> instance to flatten the payload (facebook’s message format is a bit crazy). LDAP communication is done with the help of <a href="https://hackage.haskell.org/package/ldap-client">ldap-client</a> library, which is a high-level binding from corresponding C library. Lenses are used to create <a href="https://github.com/maksar/ldap-bot/blob/master/src/Env.hs#L79">isomorphisms</a> between parsed and raw configuration values (for testing environment configuration in a generic way). Polysemy is a star of the show which allows it to separate the domain language from its interpretation, inject logging in the middle of the effects stack, write mock versions of <a href="https://github.com/maksar/ldap-bot/blob/master/test/Client/FacebookSpec.hs#L105">facebook</a>, <a href="https://github.com/maksar/ldap-bot/blob/master/test/Server/LDAPSpec.hs#L68">LDAP</a> and some internal <a href="https://github.com/maksar/ldap-bot/blob/master/test/Server/RegistrySpec.hs#L58">effects</a>. Code gets built by nix and deployed via nixops as a systemd service. First implementation of tests used validity and gen-validity libraries from <a href="https://cs-syd.eu">Tom Sydney Kerckhove</a> (super nice Haskeller, met him on the conference), but then switched to <a href="https://hackage.haskell.org/package/QuickCheck">QuickCheck</a> and <a href="https://hackage.haskell.org/package/hspec">hspec</a>, since I don’t have a lot of data types to generate Validity (Arbitrary in QuichCheck terms) instances for.</p>
<p>Along the way of implementing and supporting that bot I wrote a number of articles about it (also Haskell and FP in general). Unfortunately, the articles are in russian and have no version: my auditory was all russian speaking employees, so there was no point in doing so. I still think it would be beneficial to include them into the story: you can still squint on it and try to see the idea or maybe you do have a friend or colleague, who can understand it ;)</p>
  </section>
</article>

  </main>

  <footer>
    Site generated by
    <a href="http://jaspervdj.be/hakyll">Hakyll</a>
  </footer>
</body>

</html>]]></description>
    <pubDate>Fri, 07 Feb 2020 00:00:00 UT</pubDate>
    <guid>https://maksar.github.io/posts/projects/2020-02-07-ldap-bot.html</guid>
    <dc:creator>Shestakov Alex</dc:creator>
</item>
<item>
    <title>LDAP tips and tricks</title>
    <link>https://maksar.github.io/posts/code/2019-10-29-ldap.html</link>
    <description><![CDATA[<!doctype html>
<html lang="en">

<head>
  <meta charset="utf-8">
  <meta http-equiv="x-ua-compatible" content="ie=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Shestakov Alex Blog - LDAP tips and tricks</title>
  <link rel="stylesheet" href="../../css/default.css" />

  <script type="text/javascript" src="../../vendor/jquery/jquery-3.6.0.min.js"></script>
  <script type="text/javascript" src="../../vendor/fresco/js/fresco.min.js"></script>
  <link rel="stylesheet" type="text/css" href="../../vendor/fresco/css/fresco.css" />

  <link rel="stylesheet" href="../../vendor/highlight/styles/atom-one-dark.min.css">
  <script src="../../vendor/highlight/highlight.min.js"></script>
  <script src="../../vendor/highlight/languages/haskell.min.js"></script>
  <script src="../../vendor/highlight/languages/ruby.min.js"></script>
  <script src="../../vendor/highlight/languages/shell.min.js"></script>
  <script src="../../vendor/highlight/languages/kotlin.min.js"></script>
  <script src="../../vendor/highlight/languages/javascript.min.js"></script>
  <script>hljs.highlightAll();</script>
</head>

<body>
  <header>
    <div class="logo">
      <a href="../../">Shestakov Alex</a>
    </div>
    <nav>
      &amp;<a href="../../languages/english.html">english</a> &amp;<a href="../../languages/russian.html">russian</a>
      @<a href="../../categories/code.html">code</a> @<a href="../../categories/projects.html">projects</a>
      <a href="../../about.html">About</a>
    </nav>
  </header>

  <main role="main">
    <h1>LDAP tips and tricks</h1>
    <article>
  <section class="header">
    October 29, 2019  @<a href="../../categories/code.html">code</a> #<a href="../../tags/russian.html">russian</a> #<a href="../../tags/AD.html">AD</a> #<a href="../../tags/LDAP.html">LDAP</a>
  </section>
  <section>
    <p>Я бы хотел продолжить цикл технических статей на Workplace рассказом о том, с какими трудностями можно столкнуться при работе с Active Directory по LDAP протоколу. Полноценной статьей такой рассказ назвать сложно, скорее – сборник рецептов. Стоит заранее оговориться – никаких упоминаний о Windows и PowerShell в статье нет, это тема очень обширна и заслуживает отдельной публикации (а может и нескольких).</p>
<!--more-->
<p><img src="../../images/ldap/logo.jpg" class="center" /></p>
<h1 id="дата-и-время">Дата и время</h1>
<p>Первое, что бросается в глаза – это незнакомый формат даты-времени. Даже не формат, а форматы – их несколько. Бывают записи вида <code>whenChanged: 20191028073233.0Z</code> с очевидным форматом, но есть еще и записи вида <code>pwdLastSet: 132119732272806390</code> о сути которых лучше меня расскажет <a href="https://www.epochconverter.com/ldap">страница</a>. Приходится писать свои parser/emitter-ы для этих форматов, так как в поставку библиотек он редко входят. Дата и время – очень обширная тема, приглашаю послушать Kovsh Dmitry на предстоящем <a href="https://itransition.workplace.com/events/537058783541251/">Itransition Development Meetup #10</a>.</p>
<h1 id="we-need-to-go-deeper">We need to go deeper</h1>
<p>Как правило, объекты в AD (группы, отделы, пользователи) имеют древовидную структуру, напоминающую (или повторяющую) иерархию реальных организаций. Наша – не исключение (<a href="https://ru.wikipedia.org/wiki/Закон_Конвея">закон Конвея</a>, как-никак). Классические утилиты для работы с AD и, тем более, API – позволяют осуществлять поиск только на один уровень вглубь. Рассмотрим на примере – существует группа RFX Digest Readers, в состав которой входят как пользовательские учетные записи, так и другие группы</p>
<pre class="console"><code>member: CN=Tech Coordinators,OU=Groups
member: CN=Marketing,OU=Groups
member: CN=Departments Managers,OU=Groups
member: CN=Syomkin, Andrey,OU=Active,OU=Users
member: CN=Chernikov, Yury,OU=Active,OU=Users</code></pre>
<p>Наивное решение для поиска всех людей в этой группе – такое:</p>
<pre class="console"><code>ldapsearch -h dc1.itransition.corp -b &quot;OU=Active,OU=Users,OU=Itransition,DC=itransition,DC=corp&quot; &quot;memberOf=CN=RFX Digest Readers,OU=ServiceGroups,OU=Groups,OU=Itransition,DC=itransition,DC=corp&quot; displayName</code></pre>
<p>Однако результат предсказуем – нашлись только два человека:</p>
<pre class="console"><code>member: CN=Syomkin, Andrey,OU=Active,OU=Users
member: CN=Chernikov, Yury,OU=Active,OU=Users</code></pre>
<p>Для того, чтобы найти всех, необходимо прибегнуть к “особой Microsoft магии” – специальным <a href="https://docs.microsoft.com/en-us/windows/win32/adsi/search-filter-syntax">префиксам</a>. Например префикс :1.2.840.113556.1.4.1941: (значение именно такое, по <del>иторическим причинам</del> легенде такое значение соответствовало ключу <code>LDAP_MATCHING_RULE_IN_CHAIN</code> в header файлах) позволяет “искать вглубь”. Такой поиск вернет все необходимые записи.</p>
<pre class="console"><code>ldapsearch -Q -h dc1.itransition.corp -b &quot;OU=Active,OU=Users,OU=Itransition,DC=itransition,DC=corp&quot; &quot;memberOf:1.2.840.113556.1.4.1941:=CN=RFX Digest Readers,OU=ServiceGroups,OU=Groups,OU=Itransition,DC=itransition,DC=corp&quot; displayName | grep displayName: | wc -l

=&gt; 113</code></pre>
<h1 id="синхронизация">Синхронизация</h1>
<p>Если изменение только-только произошло – не спешите стремглав выполнять поиск по AD, в друг там несколько серверов с репликацией и они еще не синхронизировались… О способах и времени синхронизации отдельных серверов в AD ходят легенды. Мой совет – работайте на запись всегда только с одним, конкретным сервером, если возможно. Совет вредный, но рабочий. Буду раз услышать в комментариях совет полезный, но пока так ;)</p>
<h1 id="tls-соединение">TLS соединение</h1>
<p>“Общаться” с AD лучше по защищенному соединению. LDAP поддерживает как несколько режимов аутентификации – kerberos, simple, так и несколько способов шифровать соединение – TLS, START_TLS. Я использую kerberos для работы через консольную утилиту ldapsearch, так как это очень удобно – единожды получив “тикет” (через kinit) можно не утруждаться вводом логина/пароля при каждом поиске. Поддержка kerberos традиционно сильна в Java мире (где NTLM не очень популярен), так что я этот метод так же использую в своих Kotlin приложениях. Simple аутентификация пригодится там, где нет возможности пользоваться развесистыми библиотеками – например в ruby. Но стоит себя дополнительно обезопасить, применив TLS шифрование:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode ruby"><code class="sourceCode ruby"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="ot">@ldap</span> <span class="kw">=</span> <span class="dt">Net</span><span class="kw">::</span><span class="cn">LDAP</span><span class="at">.new</span>(</span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a>  <span class="wa">host: </span><span class="cn">ENV</span><span class="at">.fetch</span>(<span class="st">&quot;AD_ADDRESS&quot;</span>), <span class="wa">port: </span><span class="cn">ENV</span><span class="at">.fetch</span>(<span class="st">&quot;AD_PORT&quot;</span>)<span class="at">.to_i</span>,</span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a>  <span class="wa">auth: </span><span class="kw">{</span> <span class="wa">method: :simple</span>, <span class="wa">username: </span><span class="cn">ENV</span><span class="at">.fetch</span>(<span class="st">&quot;AD_USERNAME&quot;</span>), <span class="wa">password: </span><span class="cn">ENV</span><span class="at">.fetch</span>(<span class="st">&quot;AD_PASSWORD&quot;</span>) <span class="kw">}</span>,</span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a>  <span class="wa">encryption: </span><span class="kw">{</span> <span class="wa">method: :simple_tls</span>, <span class="wa">tls_options: </span><span class="kw">{</span> <span class="wa">ca_file: </span><span class="cn">ENV</span><span class="at">.fetch</span>(<span class="st">&quot;AD_CERTIFICATE&quot;</span>), <span class="wa">verify_mode: </span><span class="dt">OpenSSL</span><span class="kw">::</span><span class="cn">SSL</span><span class="kw">::</span><span class="cn">VERIFY_PEER</span> <span class="kw">}</span> <span class="kw">}</span></span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a>)<span class="at">.tap</span>(<span class="kw">&amp;</span><span class="wa">:bind</span>)</span></code></pre></div>
<p>До того как я прозрел про <code>LDAP_MATCHING_RULE_IN_CHAIN</code>, моя реализация поиска в глубину была такой (до сих пор трудится внутри <a href="https://git.itransition.com/projects/IA/repos/gitman/browse">gitman</a>-а):</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode ruby"><code class="sourceCode ruby"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="cf">def</span> group_members(name, base <span class="kw">=</span> <span class="cn">PROJECT_GROUPS_DN</span>)</span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a>  group <span class="kw">=</span> find(name, base, <span class="kw">[</span><span class="st">&quot;member&quot;</span><span class="kw">]</span>)</span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a>  <span class="cf">return</span> <span class="kw">[]</span> <span class="cf">unless</span> attribute(group, <span class="wa">:member</span>)</span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a>  group<span class="at">.member.map</span>(<span class="kw">&amp;</span>method(<span class="wa">:dn</span>))<span class="at">.flat_map</span> <span class="cf">do</span> <span class="kw">|</span>member<span class="kw">|</span></span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> member<span class="at">.include?</span>(<span class="st">&quot;, &quot;</span>)</span>
<span id="cb6-7"><a href="#cb6-7" aria-hidden="true" tabindex="-1"></a>      user(member, <span class="st">&quot;dn&quot;</span>)</span>
<span id="cb6-8"><a href="#cb6-8" aria-hidden="true" tabindex="-1"></a>    <span class="cf">else</span></span>
<span id="cb6-9"><a href="#cb6-9" aria-hidden="true" tabindex="-1"></a>      group_members(member, base)</span>
<span id="cb6-10"><a href="#cb6-10" aria-hidden="true" tabindex="-1"></a>    <span class="cf">end</span></span>
<span id="cb6-11"><a href="#cb6-11" aria-hidden="true" tabindex="-1"></a>  <span class="cf">end</span><span class="at">.compact.uniq</span></span>
<span id="cb6-12"><a href="#cb6-12" aria-hidden="true" tabindex="-1"></a><span class="cf">end</span></span></code></pre></div>
<h1 id="постраничный-доступ">Постраничный доступ</h1>
<p>При получении большого количества результатов – ldapsearch по умолчанию выдает только первую 1000 штук. Заставить его “выдать всех” можно используя аргумент <code>-E pr=2147483647/noprompt</code>. Он заставит ldapsearch установить очень большой размер “страницы” и не спрашивать “продлевать будете?” при достижении ее границы. При работе из кода (Java, Kotlin), удобно пользоваться createStreamFromIterator из StreamUtils, он позволяет преобразовывать последовательность вызовов next() итератора в удобный для работы поток:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode kotlin"><code class="sourceCode kotlin"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="kw">fun</span> <span class="fu">loadAll</span><span class="op">(</span></span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a>    <span class="va">ldapName</span><span class="op">:</span> <span class="dt">Name</span><span class="op">,</span></span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a>    <span class="va">filter</span><span class="op">:</span> <span class="dt">AbstractFilter</span><span class="op">,</span></span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a>    <span class="va">attributeClass</span><span class="op">:</span> <span class="dt">KClass</span>&lt;<span class="kw">out</span> <span class="va">LDAPAttribute</span>&gt;<span class="op">,</span></span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a>    <span class="va">mapper</span><span class="op">:</span> <span class="op">(</span><span class="dt">Attributes</span><span class="op">)</span> <span class="op">-&gt;</span> <span class="dt">T</span></span>
<span id="cb7-6"><a href="#cb7-6" aria-hidden="true" tabindex="-1"></a><span class="op">):</span> <span class="dt">List</span><span class="op">&lt;</span><span class="dt">T</span><span class="op">&gt;</span> <span class="op">{</span></span>
<span id="cb7-7"><a href="#cb7-7" aria-hidden="true" tabindex="-1"></a>    <span class="kw">val</span> <span class="va">attributes</span> <span class="op">=</span> attributeClass<span class="op">.</span>sealedSubclasses<span class="op">.</span>map <span class="op">{</span> it<span class="op">.</span>objectInstance<span class="op">!!</span> <span class="op">}</span></span>
<span id="cb7-8"><a href="#cb7-8" aria-hidden="true" tabindex="-1"></a>    <span class="kw">val</span> <span class="va">processor</span> <span class="op">=</span> PagedResultsDirContextProcessor<span class="op">(</span>LDAP_PAGE_SIZE<span class="op">)</span></span>
<span id="cb7-9"><a href="#cb7-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-10"><a href="#cb7-10" aria-hidden="true" tabindex="-1"></a>    <span class="kw">return</span> StreamUtils<span class="op">.</span>createStreamFromIterator<span class="op">(</span></span>
<span id="cb7-11"><a href="#cb7-11" aria-hidden="true" tabindex="-1"></a>        <span class="kw">object</span> <span class="op">:</span> <span class="dt">Iterator</span><span class="op">&lt;</span><span class="dt">List</span><span class="op">&lt;</span><span class="dt">T</span><span class="op">&gt;&gt;</span> <span class="op">{</span></span>
<span id="cb7-12"><a href="#cb7-12" aria-hidden="true" tabindex="-1"></a>            <span class="kw">override</span> <span class="kw">fun</span> <span class="fu">hasNext</span><span class="op">()</span> <span class="op">=</span> processor<span class="op">.</span>hasMore<span class="op">()</span></span>
<span id="cb7-13"><a href="#cb7-13" aria-hidden="true" tabindex="-1"></a>            <span class="kw">override</span> <span class="kw">fun</span> <span class="fu">next</span><span class="op">()</span> <span class="op">=</span> LdapTemplate<span class="op">(</span>contextSource<span class="op">).</span>search<span class="op">(</span></span>
<span id="cb7-14"><a href="#cb7-14" aria-hidden="true" tabindex="-1"></a>                ldapName<span class="op">,</span></span>
<span id="cb7-15"><a href="#cb7-15" aria-hidden="true" tabindex="-1"></a>                filter<span class="op">.</span>encode<span class="op">(),</span></span>
<span id="cb7-16"><a href="#cb7-16" aria-hidden="true" tabindex="-1"></a>                searchControls<span class="op">(</span>attributes<span class="op">),</span></span>
<span id="cb7-17"><a href="#cb7-17" aria-hidden="true" tabindex="-1"></a>                AttributesMapper <span class="op">{</span> mapper<span class="op">(</span>it<span class="op">)</span> <span class="op">},</span></span>
<span id="cb7-18"><a href="#cb7-18" aria-hidden="true" tabindex="-1"></a>                processor</span>
<span id="cb7-19"><a href="#cb7-19" aria-hidden="true" tabindex="-1"></a>            <span class="op">)</span></span>
<span id="cb7-20"><a href="#cb7-20" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span>
<span id="cb7-21"><a href="#cb7-21" aria-hidden="true" tabindex="-1"></a>    <span class="op">).</span>flatMap <span class="op">{</span> it<span class="op">.</span>stream<span class="op">()</span> <span class="op">}.</span>toList<span class="op">()</span></span>
<span id="cb7-22"><a href="#cb7-22" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>К сожалению, мне не известен простой/удобный способ загружать данные параллельно, в постраничном режиме из AD. Как правило, этого не требуется – запросы достаточно быстро выполняются, задержками можно пренебречь. Чего не скажешь про Atlassian JIRA, запросы к которой могут занимать минуты. Но как известно, на любую хитрую гайку…</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode kotlin"><code class="sourceCode kotlin"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="kw">fun</span> <span class="op">&lt;</span><span class="dt">T</span><span class="op">&gt;</span> <span class="fu">loadIssues</span><span class="op">(</span><span class="va">fields</span><span class="op">:</span> <span class="dt">String</span><span class="op">,</span> <span class="va">query</span><span class="op">:</span> <span class="dt">String</span><span class="op">,</span> <span class="va">mapper</span><span class="op">:</span> <span class="op">(</span><span class="dt">Issue</span><span class="op">)</span> <span class="op">-&gt;</span> <span class="dt">T</span><span class="op">):</span> <span class="dt">List</span><span class="op">&lt;</span><span class="dt">T</span><span class="op">&gt;</span> <span class="op">=</span></span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a>    jiraClient<span class="op">.</span>searchIssues<span class="op">(</span>query<span class="op">,</span> fields<span class="op">,</span> <span class="dv">1</span><span class="op">).</span>total<span class="op">.</span>let <span class="op">{</span> total <span class="op">-&gt;</span></span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a>        <span class="kw">val</span> <span class="va">chunkSize</span> <span class="op">=</span> max<span class="op">(</span><span class="dv">1</span><span class="op">,</span> total <span class="op">/</span> JIRA_CHUNK_COUNT<span class="op">)</span></span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a>        IntStream<span class="op">.</span>iterate<span class="op">(</span><span class="dv">0</span><span class="op">)</span> <span class="op">{</span> it <span class="op">+</span> chunkSize <span class="op">}.</span>limit<span class="op">((</span>total <span class="op">/</span> chunkSize<span class="op">)</span> <span class="op">+</span> <span class="dv">1L</span><span class="op">).</span>toList<span class="op">().</span>map <span class="op">{</span> start <span class="op">-&gt;</span></span>
<span id="cb8-5"><a href="#cb8-5" aria-hidden="true" tabindex="-1"></a>            DatabaseContext<span class="op">.</span>supplyAsync <span class="op">{</span></span>
<span id="cb8-6"><a href="#cb8-6" aria-hidden="true" tabindex="-1"></a>                Failsafe<span class="op">.</span>with<span class="op">(</span>RetryPolicy<span class="op">&lt;</span>List<span class="op">&lt;</span>T<span class="op">&gt;&gt;().</span>handle<span class="op">(</span>RestException<span class="op">::</span><span class="kw">class</span>.java).withMaxRetries<span class="op">(</span>3<span class="op">)</span>).<span class="kw">get</span> <span class="op">{</span> <span class="op">-&gt;</span></span>
<span id="cb8-7"><a href="#cb8-7" aria-hidden="true" tabindex="-1"></a>                    jiraClient<span class="op">.</span>searchIssues<span class="op">(</span>query<span class="op">,</span> fields<span class="op">,</span> chunkSize<span class="op">,</span> start<span class="op">).</span>issues<span class="op">.</span>map<span class="op">(</span>mapper<span class="op">)</span></span>
<span id="cb8-8"><a href="#cb8-8" aria-hidden="true" tabindex="-1"></a>                <span class="op">}</span></span>
<span id="cb8-9"><a href="#cb8-9" aria-hidden="true" tabindex="-1"></a>            <span class="op">}</span></span>
<span id="cb8-10"><a href="#cb8-10" aria-hidden="true" tabindex="-1"></a>        <span class="op">}.</span>map <span class="op">{</span> it<span class="op">.</span><span class="kw">get</span><span class="op">()</span> <span class="op">}.</span>flatten<span class="op">()</span></span>
<span id="cb8-11"><a href="#cb8-11" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span></code></pre></div>
<h1 id="примеры-запросов">Примеры запросов</h1>
<p>Запросы в AD могут быть весьма сложными, так сказать write-only. Приведу, один такой пример.</p>
<pre class="console"><code>(&amp;(objectClass=person)(|
(memberOf:1.2.840.113556.1.4.1941:=CN=HelpDesk.Operators,OU=ServiceGroups,OU=Groups,OU=Itransition,DC=itransition,DC=corp)
(managedObjects:1.2.840.113556.1.4.1941:=CN=HelpDesk.Operators,OU=ServiceGroups,OU=Groups,OU=Itransition,DC=itransition,DC=corp)
(msExchCoManagedObjectsBL:1.2.840.113556.1.4.1941:=CN=HelpDesk.Operators,OU=ServiceGroups,OU=Groups,OU=Itransition,DC=itransition,DC=corp)
(memberOf:1.2.840.113556.1.4.1941:=CN=IT,OU=Groups,OU=Itransition,DC=itransition,DC=corp)
(managedObjects:1.2.840.113556.1.4.1941:=CN=IT,OU=Groups,OU=Itransition,DC=itransition,DC=corp)
(msExchCoManagedObjectsBL:1.2.840.113556.1.4.1941:=CN=IT,OU=Groups,OU=Itransition,DC=itransition,DC=corp)
(memberOf:1.2.840.113556.1.4.1941:=CN=VECTOR.Development,OU=ProjectGroups,OU=Groups,OU=Itransition,DC=itransition,DC=corp)
(managedObjects:1.2.840.113556.1.4.1941:=CN=VECTOR.Development,OU=ProjectGroups,OU=Groups,OU=Itransition,DC=itransition,DC=corp)
(msExchCoManagedObjectsBL:1.2.840.113556.1.4.1941:=CN=VECTOR.Development,OU=ProjectGroups,OU=Groups,OU=Itransition,DC=itransition,DC=corp)))</code></pre>
<p>На человеческом языке запрос звучит достаточно просто: все HelpDesk Operator-ы, а так же члены групп IT и VECTOR.Development. Из этой безобидности запрос превращается в “ужас на крыльях ночи” благодаря: - обсуждаемому выше магическому префиксу для поиска “в глубину” - наличию не только членов группы (memberOf), но и ее владельцев (managedObjects) - кроме очевидного способа найти владельцев группы, существует еще и Exchange-way управлять составом групп, так что приходится учитывать поле msExchCoManagedObjectsBL</p>
<p>Предыдущий запрос используется в конфигурационном файле nginx для контроля доступа к страницам при помощи https://github.com/kvspb/nginx-auth-ldap.git плагина. Такое решение может оказаться эффективнее, чем встраивать аутентификацию внутрь защищаемой системы. Если вам это необходимо – скорее всего придется собрать модуль самостоятельно</p>
<pre class="docker"><code>RUN git clone https://github.com/kvspb/nginx-auth-ldap.git &amp;&amp; wget -qO- http://nginx.org/download/nginx-1.17.3.tar.gz | tar -xvzf -

RUN cd nginx-1.17.3 &amp;&amp; ./configure  --user=nginx \
                                    --group=nginx \
                                    --prefix=/etc/nginx \
                                    --sbin-path=/usr/sbin/nginx \
                                    --conf-path=/etc/nginx/nginx.conf \
                                    --pid-path=/var/run/nginx.pid \
                                    --lock-path=/var/run/nginx.lock \
                                    --error-log-path=/var/log/nginx/error.log \
                                    --http-log-path=/var/log/nginx/access.log \
                                    --with-http_gzip_static_module \
                                    --with-http_ssl_module \
                                    --with-pcre \
                                    --add-module=/nginx-auth-ldap/ \
                                    --with-debug &amp;&amp; make &amp;&amp; make install &amp;&amp; rm -rf /nginx-1.17.3 &amp;&amp; rm -rf /nginx-auth-ldap</code></pre>
<h1 id="аутентификация-в-teamcity">Аутентификация в TeamCity</h1>
<p>Множество систем поддерживает интеграцию с AD в качестве источника пользователей. Вот рецепт (содержимое необходимо поместить в <code>teamcity_server/datadir/config/ldap-config.properties</code> файл) того, как это можно сделать в TeamCity, чтобы члены проектной команды могли логиниться под доменными учетными записями. Доступ будет автоматически пропадать при покидании проекта. Все что для этого понадобится – служебная учетная запись (для доступа к самому AD).</p>
<pre class=".properties"><code>java.naming.provider.url=ldap://dc1.itransition.corp:389
java.naming.security.principal=CN=vector,OU=ServiceAccounts,OU=Users,OU=Itransition,DC=itransition,DC=corp
java.naming.security.credentials=PASSWORD_WAS_HERE

teamcity.users.login.filter=(&amp;(sAMAccountName=$capturedLogin$)(memberOf:1.2.840.113556.1.4.1941:=CN=VECTOR.Development,OU=ProjectGroups,OU=Groups,OU=Itransition,DC=itransition,DC=corp))

teamcity.options.users.synchronize=true
teamcity.users.filter=(&amp;(objectClass=person)(memberOf:1.2.840.113556.1.4.1941:=CN=VECTOR.Development,OU=ProjectGroups,OU=Groups,OU=Itransition,DC=itransition,DC=corp))

teamcity.users.base=OU=Active,OU=Users,OU=Itransition,DC=itransition,DC=corp
teamcity.users.username=sAMAccountName
teamcity.users.property.displayName=displayName
teamcity.users.property.email=mail

teamcity.options.createUsers=true
teamcity.options.deleteUsers=true</code></pre>
<p>Подробный рассказ о TeamCity и то, как его правильно готовить от Panfilenok Aleksandr вас ждет на предстоящем <a href="https://itransition.workplace.com/events/537058783541251/">Itransition Development Meetup #10</a>.</p>
<h1 id="утилиты-командной-строки">Утилиты командной строки</h1>
<p>Используя ldapseach можно легко (для тех кто любит терминал) строить полезные запросы к AD. Например – список людей, в интересующей вас комнате:</p>
<pre class="console"><code>ldapsearch -Q -h dc1.itransition.corp -b &quot;OU=Active,OU=Users,OU=Itransition,DC=itransition,DC=corp&quot; &quot;(&amp;(physicalDeliveryOfficeName=118a)(streetAddress=Kulman, 1))&quot; | grep displayName:

=&gt;
displayName: Shestakov, Aleksandr
displayName: Rimorev, Andrey</code></pre>
<p>Список проектных групп вашего проекта (результат зависит от консистентности названия групп):</p>
<pre class="console"><code>ldapsearch -o ldif-wrap=no -Q -h dc1.itransition.corp -b &quot;OU=Groups,OU=Itransition,DC=itransition,DC=corp&quot; &quot;name=IRIS*&quot; dn | grep CN=

=&gt;
dn: CN=IRIS.Development,OU=ProjectGroups,OU=Groups,OU=Itransition,DC=itransition,DC=corp
dn: CN=IRIS.DevOps,OU=ProjectGroups,OU=Groups,OU=Itransition,DC=itransition,DC=corp
dn: CN=IRIS.Ecomm,OU=ProjectGroups,OU=Groups,OU=Itransition,DC=itransition,DC=corp
dn: CN=IRIS.Feature,OU=ProjectGroups,OU=Groups,OU=Itransition,DC=itransition,DC=corp
dn: CN=IRIS.FrontEnd,OU=ProjectGroups,OU=Groups,OU=Itransition,DC=itransition,DC=corp
dn: CN=IRIS.Helpdesk,OU=ProjectGroups,OU=Groups,OU=Itransition,DC=itransition,DC=corp
dn: CN=IRIS.IRIS-PLUS,OU=ProjectGroups,OU=Groups,OU=Itransition,DC=itransition,DC=corp
dn: CN=IRIS.Platform,OU=ProjectGroups,OU=Groups,OU=Itransition,DC=itransition,DC=corp
dn: CN=IRIS.PM-BA,OU=MailLists,OU=Groups,OU=Itransition,DC=itransition,DC=corp
dn: CN=IRIS.QA,OU=A1QA.com,OU=Groups,OU=Itransition,DC=itransition,DC=corp
dn: CN=IRIS.TL,OU=MailLists,OU=Groups,OU=Itransition,DC=itransition,DC=corp</code></pre>
<p>Список переговорных на Кульман 1 с окнами:</p>
<pre class="console"><code>ldapsearch -Q -h dc1.itransition.corp -b &quot;OU=ConferenceRooms,OU=ServiceAccounts,OU=Users,OU=Itransition,DC=itransition,DC=corp&quot; &quot;(&amp;(name=Room K1-*)(msExchResourceDisplay=*NaturalLight*))&quot; dn | grep CN= | cut -d , -f 1

=&gt;
dn: CN=Room K1-101
dn: CN=Room K1-117
dn: CN=Room K1-119
dn: CN=Room K1-202
dn: CN=Room K1-208
dn: CN=Room K1-421</code></pre>
<p>Или без окон:</p>
<pre class="console"><code>ldapsearch -Q -h dc1.itransition.corp -b &quot;OU=ConferenceRooms,OU=ServiceAccounts,OU=Users,OU=Itransition,DC=itransition,DC=corp&quot; &quot;(&amp;(name=Room K1-*)(!(msExchResourceDisplay=*NaturalLight*)))&quot; dn | grep CN= | cut -d , -f 1

=&gt;
dn: CN=Room K1-112
dn: CN=Room K1-217
dn: CN=Room K1-224
dn: CN=Room K1-301a-Manicure
dn: CN=Room K1-301a-Massage
dn: CN=Room K1-313a-1
dn: CN=Room K1-315
dn: CN=Room K1-316
dn: CN=Room K1-410
dn: CN=Room K1-411
dn: CN=Room K1-419</code></pre>
<p>Список <em>однофамильцев</em> рабочих станций:</p>
<pre class="console"><code>ldapsearch -o ldif-wrap=no -Q -h dc1.itransition.corp -b &quot;OU=Workstations,OU=Itransition,DC=itransition,DC=corp&quot; &quot;(&amp;(name=shestakova*)(!(name=shestakova-a)))&quot; managedBy

=&gt;
# extended LDIF
#
# LDAPv3
# base &lt;OU=Workstations,OU=Itransition,DC=itransition,DC=corp&gt; with scope subtree
# filter: (&amp;(name=shestakova*)(!(name=shestakova-a)))
# requesting: managedBy
#

# SHESTAKOVAV2, Workstations, Itransition, itransition.corp
dn: CN=SHESTAKOVAV2,OU=Workstations,OU=Itransition,DC=itransition,DC=corp
managedBy: CN=Shestakova\, Vitalina2,OU=Active,OU=Users,OU=Itransition,DC=itransition,DC=corp

# search result
search: 5
result: 0 Success

# numResponses: 2
# numEntries: 1</code></pre>
<h1 id="занимательные-флаги">Занимательные флаги</h1>
<p>При работе с утилитой командной строки ldapsearch необходимо быть внимательным – она любит делать text-wrap, перенося окончания длинных CN на следующую строку. Для того, чтобы этого избежать – удобно пользоваться опцией <code>-o ldif-wrap=no</code>.</p>
<p>Знаете первое правило real estate бизнеса – <a href="https://www.thebalance.com/what-location-means-in-real-estate-1798766">Location, Location и еще раз Location</a>. Так вот ldapsearch тоже о нем в курсе ;) Для того, чтобы избавиться от надоедливых header-ов (иначе не удобно обрабатывать вывод другими утилитами), необходимо передавать флаги <code>-L -L -L</code>, о чем заботливо упоминается в документации: <em>A single -L restricts the output to LDIFv1. A second -L disables comments. A third -L disables printing of the LDIF version.</em></p>
<p>Флаг <code>-Q</code> тоже полезен, он “глушит” вывод SASL/GSSAPI библиотеки (реализация kerberos) в потоке вывода.</p>
<p>Внимательный читатель заметил символ экранирования – обратный slash, который ldapsearch вставляет при печати результатов поиска (причем в комментариях иным способом: <code># Shestakov\2C Aleksandr</code>). Дело в том, что запятая – “разделитель пути” в DN (distinguishable name – уникальный идентификатор объекта в AD). Так что при обработке вывода ldapseach лучше использовать другие поля, например displayName. Это бывает полезно еще и по причине того, что displayName может не совпадать по написанию с DN – так бывает, если пользователь очень-пре-очень хочет, чтобы в корпоративных системах его имя или фамилия имели отличное от принятого стандарта транслитерации.</p>
<p>Ну вот и все, спасибо за внимание ;) Выражаю благодарность Neskoromny Nikolay за идею статьи, Sovetkin Maksim за ревью.</p>
  </section>
</article>

  </main>

  <footer>
    Site generated by
    <a href="http://jaspervdj.be/hakyll">Hakyll</a>
  </footer>
</body>

</html>]]></description>
    <pubDate>Tue, 29 Oct 2019 00:00:00 UT</pubDate>
    <guid>https://maksar.github.io/posts/code/2019-10-29-ldap.html</guid>
    <dc:creator>Shestakov Alex</dc:creator>
</item>

    </channel>
</rss>
